INSERT INTO `config_info` (`id`, `data_id`, `group_id`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `app_name`, `tenant_id`, `c_desc`, `c_use`, `effect`, `type`, `c_schema`) VALUES (210, 'eurynome-cloud-cache.yaml', 'common', 'jetcache:\n  statIntervalMinutes: 15\n  areaInCacheName: false\n  local:\n    default:\n      type: caffeine\n      keyConvertor: fastjson\n      limit: 1000\n  remote:\n    default:\n      type: redis.lettuce\n      keyConvertor: fastjson\n      valueEncoder: kryo\n      valueDecoder: kryo\n      poolConfig:\n        minIdle: ${spring.redis.lettuce.pool.min-idle}\n        maxIdle: ${spring.redis.lettuce.pool.max-idle}\n        maxTotal: ${spring.redis.lettuce.pool.max-active}\n        maxWait: ${spring.redis.lettuce.pool.max-wait}\n      uri:\n        - redis://${spring.redis.password}@${spring.redis.host}:${spring.redis.port}/${spring.redis.database}', '8cf3ebb0348caa4260c5f1bbaa025223', '2021-08-31 20:11:12', '2021-09-03 18:45:37', '', '172.18.0.1', '', '8fdcc073-2e51-4722-8274-3f5b76362bb8', '', '', '', 'yaml', '');
INSERT INTO `config_info` (`id`, `data_id`, `group_id`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `app_name`, `tenant_id`, `c_desc`, `c_use`, `effect`, `type`, `c_schema`) VALUES (211, 'eurynome-cloud-database-postgresql.yaml', 'common', 'herodotus:\n  database-information:\n    platform: postgresql\n    driver-class-name: org.postgresql.Driver\n    dialect: org.hibernate.dialect.PostgreSQL10Dialect\n    url: jdbc:postgresql://${herodotus.environment.database.host}:${herodotus.environment.database.port}/${herodotus.environment.database.name}', '97dc65f253426db9674dbaeb112ce4da', '2021-08-31 20:11:12', '2021-09-03 19:29:34', '', '172.18.0.1', '', '8fdcc073-2e51-4722-8274-3f5b76362bb8', '', '', '', 'yaml', '');
INSERT INTO `config_info` (`id`, `data_id`, `group_id`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `app_name`, `tenant_id`, `c_desc`, `c_use`, `effect`, `type`, `c_schema`) VALUES (212, 'eurynome-cloud-kafka.yaml', 'common', 'spring:\n  cloud:\n    bus:\n      destination: SecurityMetadata\n      id: ${spring.application.name}\n    stream:\n      kafka:\n        binder:\n          brokers: ${herodotus.environment.kafka.bootstrap-servers}\n          default-broker-port: 9092\n          auto-add-partitions: true\n          auto-create-topics: true\n          min-partition-count: 1\n          configuration:\n            commit.interval.ms: 1000\n            default.key.serde: org.apache.kafka.common.serialization.Serdes$StringSerde\n            default.value.serde: org.apache.kafka.common.serialization.Serdes$StringSerde\n          producer-properties:\n            # 发生错误后，消息重发的次数。\n            retries: 1\n            # acks=0 ： 生产者在成功写入消息之前不会等待任何来自服务器的响应。\n            # acks=1 ： 只要集群的首领节点收到消息，生产者就会收到一个来自服务器成功响应。\n            # acks=all ：只有当所有参与复制的节点全部收到消息时，生产者才会收到一个来自服务器的成功响应。\n            acks: 1\n            #当有多个消息需要被发送到同一个分区时，生产者会把它们放在同一个批次里。该参数指定了一个批次可以使用的内存大小，按照字节数计算。\n            batch.size: 16384\n            # 设置生产者内存缓冲区的大小。\n            buffer.memory: 33554432\n            # 10ms的延迟\n            linger.ms: 1\n          consumer-properties:\n            allow.auto.create.topics: true\n            auto.commit.interval.ms: 1000\n      function:\n        bindings:\n          busConsumer-out-0: springCloudBusOutput\n          busConsumer-in-0: springCloudBusInput\n      bindings:\n        springCloudBusOutput:\n          content-type: application/json\n        springCloudBusInput:\n          content-type: application/json\n          group: ${spring.application.name}', '1993f812825be7066697493c0cc29941', '2021-08-31 20:11:12', '2021-09-03 18:49:09', '', '172.18.0.1', '', '8fdcc073-2e51-4722-8274-3f5b76362bb8', '', '', '', 'yaml', '');
INSERT INTO `config_info` (`id`, `data_id`, `group_id`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `app_name`, `tenant_id`, `c_desc`, `c_use`, `effect`, `type`, `c_schema`) VALUES (213, 'eurynome-cloud-platform.yaml', 'common', 'herodotus:\n  platform:\n    endpoint:\n      gateway-address: ${herodotus.environment.gateway-server-addr}\n      uaa-service-uri: ${herodotus.platform.endpoint.gateway-address}/eurynome-cloud-uaa\n      upms-service-uri: ${herodotus.platform.endpoint.gateway-address}/eurynome-cloud-upms-ability\n      access-token-uri: ${herodotus.platform.endpoint.uaa-service-uri}/oauth/token\n      user-authorization-uri: ${herodotus.platform.endpoint.uaa-service-uri}/oauth/authorize\n      token-info-uri: ${herodotus.platform.endpoint.uaa-service-uri}/oauth/check_token\n      user-info-uri: ${herodotus.platform.endpoint.uaa-service-uri}/identity/profile\n    swagger:\n      enabled: ${herodotus.switch.swagger.enabled}\n', '85ddcfd297517915fd3173777cd400ef', '2021-08-31 20:11:12', '2021-08-31 20:11:12', NULL, '172.18.0.1', '', '8fdcc073-2e51-4722-8274-3f5b76362bb8', NULL, NULL, NULL, 'yaml', NULL);
INSERT INTO `config_info` (`id`, `data_id`, `group_id`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `app_name`, `tenant_id`, `c_desc`, `c_use`, `effect`, `type`, `c_schema`) VALUES (214, 'eurynome-cloud-redis.yaml', 'common', 'spring:\n  redis:\n    database: 0\n    host: ${herodotus.environment.redis.host}\n    password: ${herodotus.environment.redis.password}\n    port: ${herodotus.environment.redis.port}\n    timeout: 10000\n    # 如果使用的jedis 则将lettuce改成jedis即可\n    lettuce:\n      pool:\n        # 最大活跃链接数 默认8\n        max-active: 10\n        max-wait: 10000\n        # 最大空闲连接数 默认8\n        max-idle: 10\n        # 最小空闲连接数 默认0\n        min-idle: 5', '9b442b11c691773ad9c9b3101c83f1db', '2021-08-31 20:11:12', '2021-09-03 18:49:37', '', '172.18.0.1', '', '8fdcc073-2e51-4722-8274-3f5b76362bb8', '', '', '', 'yaml', '');
INSERT INTO `config_info` (`id`, `data_id`, `group_id`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `app_name`, `tenant_id`, `c_desc`, `c_use`, `effect`, `type`, `c_schema`) VALUES (215, 'eurynome-cloud-rest.yaml', 'common', 'spring:\n  thymeleaf:\n    mode: HTML\n    cache: false\n    prefix: classpath:/templates\n\nspringdoc:\n  api-docs:\n    resolve-schema-properties: true\n  swagger-ui:\n    enabled: ${herodotus.switch.swagger.enabled}\n    disable-swagger-default-url: true\n    operations-sorter: method\n    show-common-extensions: true\n    show-extensions: true\n    oauth:\n      use-pkce-with-authorization-code-grant: true\n      app-name: ${spring.application.name}\n\nmanagement:\n  endpoints:\n    web:\n      exposure:\n        include: \'*\'\n  endpoint:\n    health:\n      show-details: ALWAYS\n\nfeign:\n  client:\n    config:\n      default:\n        connectTimeout: 5000\n        readTimeout: 5000\n  sentinel:\n    enabled: true\n  hystrix:\n    enabled: false\n\nribbon:\n  ##请求处理的超时时间\n  ReadTimeout: 5000\n  ##请求连接的超时时间\n  ConnectTimeout: 2000\n  ##对当前实例的重试次数\n  MaxAutoRetries: 1\n  ##对所有操作请求都进行重试\n  OkToRetryOnAllOperations: true\n  ##切换实例的重试次数\n  MaxAutoRetriesNextServer: 1\n  http:\n    client:\n      enabled: false\n  okhttp:\n    enabled: true # 用OkHttp代替HttpClient\n  eager-load:\n    enabled: true\n  nacos:\n    enabled: false', 'd035f3b743d628af250c4227f53080b4', '2021-08-31 20:11:12', '2021-09-11 15:48:17', '', '172.18.0.1', '', '8fdcc073-2e51-4722-8274-3f5b76362bb8', '', '', '', 'yaml', '');
INSERT INTO `config_info` (`id`, `data_id`, `group_id`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `app_name`, `tenant_id`, `c_desc`, `c_use`, `effect`, `type`, `c_schema`) VALUES (216, 'eurynome-cloud-environment.yaml', 'development', 'herodotus:\n  environment:\n    logstash-server-addr: false\n    gateway-server-addr: http://localhost:8847\n    database:\n      host: 127.0.0.1\n      port: 15432\n      name: herodotus\n      username: ENC(VQOHWBUv8CXJE50zyMEhCozzElZhNbJ8suinU7Ph651G1xl4QPweElrhtXP4V0T8)\n      password: ENC(VQOHWBUv8CXJE50zyMEhCozzElZhNbJ8suinU7Ph651G1xl4QPweElrhtXP4V0T8)\n    redis:\n      host: 127.0.0.1\n      port: 6379\n      password:\n    kafka:\n      bootstrap-servers: 127.0.0.1:9092\n  switch:\n    database:\n      ddl-auto: update\n      use-second-level-cache: true\n      show-sql: false\n      format-sql: false\n      generate-statistics: false\n    swagger:\n      enabled: true\n\n  management:\n    log-center:\n      server-addr: ${herodotus.environment.logstash-server-addr}\n      loggers:\n        cn.herodotus.eurynome: debug\n        org.springframework.security: debug\n        com.alibaba.nacos.client.naming: error\n        com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.grpc.netty: error\n        # 关闭不必要的日志\n        org.reflections.Reflections: off\n        com.alibaba.nacos.client: error\n        com.alibaba.nacos.common.remote.client: error\n        com.ulisesbocchio: error\n\njasypt:\n  encryptor:\n    password: ${JASPYT_HOME:2bda7d3a-dba1-45a4-b08e-cbd731a0418e}', 'e6362d333a7124d675c23a32164d6124', '2021-08-31 20:11:12', '2021-09-03 23:15:37', '', '172.18.0.1', '', '8fdcc073-2e51-4722-8274-3f5b76362bb8', '', '', '', 'yaml', '');
INSERT INTO `config_info` (`id`, `data_id`, `group_id`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `app_name`, `tenant_id`, `c_desc`, `c_use`, `effect`, `type`, `c_schema`) VALUES (217, 'eurynome-cloud-environment.yaml', 'docker', 'herodotus:\n  environment:\n    logstash-server-addr: 127.0.0.1:5044\n    gateway-server-addr: http://localhost:8847\n    database:\n      host: 127.0.0.1\n      port: 15432\n      name: herodotus\n      username: ENC(VQOHWBUv8CXJE50zyMEhCozzElZhNbJ8suinU7Ph651G1xl4QPweElrhtXP4V0T8)\n      password: ENC(VQOHWBUv8CXJE50zyMEhCozzElZhNbJ8suinU7Ph651G1xl4QPweElrhtXP4V0T8)\n    redis:\n      host: 127.0.0.1\n      port: 6379\n      password:\n    kafka:\n      bootstrap-servers: 127.0.0.1:9092\n  switch:\n    database:\n      ddl-auto: update\n      use-second-level-cache: true\n      show-sql: false\n      format-sql: false\n      generate-statistics: false\n    swagger:\n      enabled: true\n\n  management:\n    log-center:\n      server-addr: ${herodotus.environment.logstash-server-addr}\n      loggers:\n        cn.herodotus.eurynome: debug\n        org.springframework.security: debug\n        com.alibaba.nacos.client.naming: error\n        com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.grpc.netty: error\n        # 关闭不必要的日志\n        org.reflections.Reflections: off\n        com.alibaba.nacos.client: error\n        com.alibaba.nacos.common.remote.client: error\n        com.ulisesbocchio: error\n\njasypt:\n  encryptor:\n    password: ${JASPYT_HOME:2bda7d3a-dba1-45a4-b08e-cbd731a0418e}', 'b51fcab1f21a8bc9917fe93621eefc83', '2021-08-31 20:11:12', '2021-09-03 19:16:51', '', '172.18.0.1', '', '8fdcc073-2e51-4722-8274-3f5b76362bb8', '', '', '', 'yaml', '');
INSERT INTO `config_info` (`id`, `data_id`, `group_id`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `app_name`, `tenant_id`, `c_desc`, `c_use`, `effect`, `type`, `c_schema`) VALUES (218, 'eurynome-cloud-upms-ability.yaml', 'herodotus', 'security:\n  oauth2:\n    client:\n      client-id: 004b87d8-0a18-4e62-a35c-f2f123713349\n      client-secret: 2bda7d3a-dba1-45a4-b08e-cbd731a0418e\n    resource:\n      token-info-uri: ${herodotus.platform.endpoint.token-info-uri}\n      user-info-uri: ${herodotus.platform.endpoint.user-info-uri}', '5dd4099dec6f77e5d1e1dbb9ac1f076a', '2021-08-31 20:11:12', '2021-08-31 20:11:12', NULL, '172.18.0.1', '', '8fdcc073-2e51-4722-8274-3f5b76362bb8', NULL, NULL, NULL, 'yaml', NULL);
INSERT INTO `config_info` (`id`, `data_id`, `group_id`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `app_name`, `tenant_id`, `c_desc`, `c_use`, `effect`, `type`, `c_schema`) VALUES (219, 'eurynome-cloud-environment.yaml', 'production', 'herodotus:\n  environment:\n    logstash-server-addr: 127.0.0.1:5044\n    gateway-server-addr: http://localhost:8847\n    database:\n      host: 127.0.0.1\n      port: 15432\n      name: herodotus\n      username: ENC(VQOHWBUv8CXJE50zyMEhCozzElZhNbJ8suinU7Ph651G1xl4QPweElrhtXP4V0T8)\n      password: ENC(VQOHWBUv8CXJE50zyMEhCozzElZhNbJ8suinU7Ph651G1xl4QPweElrhtXP4V0T8)\n    redis:\n      host: 127.0.0.1\n      port: 6379\n      password:\n    kafka:\n      bootstrap-servers: 127.0.0.1:9092\n  switch:\n    database:\n      ddl-auto: update\n      use-second-level-cache: true\n      show-sql: false\n      format-sql: false\n      generate-statistics: false\n    swagger:\n      enabled: true\n\n  management:\n    log-center:\n      server-addr: ${herodotus.environment.logstash-server-addr}\n      loggers:\n        cn.herodotus.eurynome: debug\n        org.springframework.security: debug\n        com.alibaba.nacos.client.naming: error\n        com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.grpc.netty: error\n        # 关闭不必要的日志\n        org.reflections.Reflections: off\n        com.alibaba.nacos.client: error\n        com.alibaba.nacos.common.remote.client: error\n        com.ulisesbocchio: error\n\njasypt:\n  encryptor:\n    password: ${JASPYT_HOME:2bda7d3a-dba1-45a4-b08e-cbd731a0418e}', 'b51fcab1f21a8bc9917fe93621eefc83', '2021-08-31 20:11:12', '2021-09-03 19:17:05', '', '172.18.0.1', '', '8fdcc073-2e51-4722-8274-3f5b76362bb8', '', '', '', 'yaml', '');
INSERT INTO `config_info` (`id`, `data_id`, `group_id`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `app_name`, `tenant_id`, `c_desc`, `c_use`, `effect`, `type`, `c_schema`) VALUES (220, 'eurynome-cloud-uaa.yaml', 'herodotus', 'security:\n  oauth2:\n    client:\n      client-id: f8e3f156-2cf4-449c-926d-d1377fe82c86\n      client-secret: 067e9d1c-12ed-4400-92ce-97281ddd71ff\n    resource:\n      token-info-uri: ${herodotus.platform.endpoint.token-info-uri}\n      user-info-uri: ${herodotus.platform.endpoint.user-info-uri}', '9f5c1c885126c0d8029da1756fd8040a', '2021-08-31 20:12:04', '2021-08-31 20:12:04', NULL, '172.18.0.1', '', '8fdcc073-2e51-4722-8274-3f5b76362bb8', NULL, NULL, NULL, 'yaml', NULL);
INSERT INTO `config_info` (`id`, `data_id`, `group_id`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `app_name`, `tenant_id`, `c_desc`, `c_use`, `effect`, `type`, `c_schema`) VALUES (221, 'eurynome-cloud-bpmn-ability.yaml', 'herodotus', 'security:\n  oauth2:\n    client:\n      client-id: e2a746fc-cb1a-49c3-9436-67004117b039\n      client-secret: 25c9a32b-45a9-447a-a7e3-3a28d6a6834e\n    resource:\n      token-info-uri: ${herodotus.platform.endpoint.token-info-uri}\n      user-info-uri: ${herodotus.platform.endpoint.user-info-uri}', '61342a060e29f6bb43c119548b50f22c', '2021-08-31 20:12:04', '2021-08-31 20:12:04', NULL, '172.18.0.1', '', '8fdcc073-2e51-4722-8274-3f5b76362bb8', NULL, NULL, NULL, 'yaml', NULL);
INSERT INTO `config_info` (`id`, `data_id`, `group_id`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `app_name`, `tenant_id`, `c_desc`, `c_use`, `effect`, `type`, `c_schema`) VALUES (270, 'eurynome-cloud-database-mysql8.yaml', 'common', 'herodotus:\r\n  database-information:\r\n    platform: mysql\r\n    driver-class-name: com.mysql.cj.jdbc.Driver\r\n    dialect: org.hibernate.dialect.MySQL8Dialect\r\n    url: jdbc:mysql://${herodotus.environment.database.host}:${herodotus.environment.database.port}/${herodotus.environment.database.name}?characterEncoding=utf8&connectTimeout=1000&socketTimeout=3000&autoReconnect=true&useUnicode=true&useSSL=false&serverTimezone=UTC&allowPublicKeyRetrieval=true', '153ad72af0d02ebfe3af94b9b599b2fe', '2021-09-03 18:48:03', '2021-09-03 18:48:03', NULL, '172.18.0.1', '', '8fdcc073-2e51-4722-8274-3f5b76362bb8', NULL, NULL, NULL, 'yaml', NULL);
INSERT INTO `config_info` (`id`, `data_id`, `group_id`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `app_name`, `tenant_id`, `c_desc`, `c_use`, `effect`, `type`, `c_schema`) VALUES (285, 'eurynome-cloud-database.yaml', 'common', 'spring:\n  jpa:\n    database: ${herodotus.database-information.platform}\n    # spring boot2.+后默认使用的是MyISAM引擎,增加如下配置修改为InnoDB模式，\n    # 这样不会出现：Specified key was too long; max key length is 1000 bytes 问题\n    database-platform: ${herodotus.database-information.platform}\n    open-in-view: true\n    show-sql: ${herodotus.switch.database.show-sql}\n    hibernate:\n      ddl-auto: ${herodotus.switch.database.ddl-auto}\n      #create 启动时删数据库中的表，然后创建，退出时不删除数据表\n      #create-drop 启动时删数据库中的表，然后创建，退出时删除数据表 如果表不存在报错\n      #update 如果启动时表格式不一致则更新表，原有数据保留\n      #validate 项目启动表结构进行校验 如果不一致则报错\n      naming:\n        physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl\n    properties:\n      javax:\n        persistence:\n          sharedCache:\n            mode: ENABLE_SELECTIVE\n      hibernate:\n        dialect: ${herodotus.database-information.dialect}\n        format_sql: ${herodotus.switch.database.format-sql}\n        show_sql: ${herodotus.switch.database.show-sql}\n        generate_statistics: ${herodotus.switch.database.generate-statistics}\n        cache:\n          use_query_cache: true\n          use_second_level_cache: ${herodotus.switch.database.use-second-level-cache}\n          region:\n            factory_class: cn.herodotus.eurynome.data.jpa.hibernate.cache.spi.HerodotusRegionFactory\n        javax:\n          cache:\n            missing_cache_strategy: create\n        temp:\n          use_jdbc_metadata_defaults: false\n  sql:\n    init:\n      mode: never\n      platform: ${herodotus.database-information.platform}\n      continue-on-error: true\n      encoding: UTF-8\n      username: ${herodotus.environment.database.username}\n      password: ${herodotus.environment.database.password}\n      # 第一种方式启动的时候 Jpa 会自动创建表，import.sql 只负责创建表单后的初始化数据。第二种方式启动的时候不会创建表，需要在初始化脚本中判断表是否存在，再初始化脚本的步骤\n      # refer: https://www.cnblogs.com/ityouknow/p/7089170.html\n      #      data-locations:\n      #      schema-locations:\n  datasource:\n    driver-class-name: ${herodotus.database-information.driver-class-name}\n    url: ${herodotus.database-information.url}\n    username: ${herodotus.environment.database.username}\n    password: ${herodotus.environment.database.password}\n    type: com.zaxxer.hikari.HikariDataSource\n    hikari:\n      # Lowest acceptable connection timeout is 250 ms. Default: 30000 (30 seconds)\n      connection-timeout: 5000\n      connection-test-query: SELECT 1\n      # The minimum allowed value is 10000ms (10 seconds). Default: 600000 (10 minutes)\n      idle-timeout: 600000\n      minimum-idle: 5\n      maximum-pool-size: 50\n      # We strongly recommend setting this value, and it should be at least 30 seconds less than any database or infrastructure imposed connection time limit.\n      # Default: 1800000 (30 minutes)\n      max-lifetime: 1800000\n      pool-name: Hikari\n      # Lowest acceptable validation timeout is 250 ms. Default: 5000\n      validation-timeout: 5000\n      data-source-properties:\n        prepStmtCacheSize: 250\n        prepStmtCacheSqlLimit: 2048\n        cachePrepStmts: true\n\nmybatis-plus:\n  global-config:\n    banner: false\n    db-config:\n      table-underline: true\n  configuration:\n    cache-enabled: ${herodotus.switch.database.use-second-level-cache}\n    map-underscore-to-camel-case: true', '49e1699551ec20365b04ad159f34c286', '2021-09-03 19:40:35', '2021-09-03 23:07:33', '', '172.18.0.1', '', '8fdcc073-2e51-4722-8274-3f5b76362bb8', '', '', '', 'yaml', '');
INSERT INTO `config_info` (`id`, `data_id`, `group_id`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `app_name`, `tenant_id`, `c_desc`, `c_use`, `effect`, `type`, `c_schema`) VALUES (336, 'eurynome-cloud-database-mysql57.yaml', 'common', 'herodotus:\r\n  database-information:\r\n    platform: mysql\r\n    driver-class-name: com.mysql.jdbc.Driver\r\n    dialect: org.hibernate.dialect.MySQL57Dialect\r\n    url: jdbc:mysql://${herodotus.environment.database.host}:${herodotus.environment.database.port}/${herodotus.environment.database.name}?characterEncoding=utf8&connectTimeout=1000&socketTimeout=3000&autoReconnect=true&useUnicode=true&useSSL=false&serverTimezone=UTC', 'b13e230c1a072c67ab706fce518832d3', '2021-09-16 17:24:34', '2021-09-16 17:24:34', NULL, '172.18.0.1', '', '', NULL, NULL, NULL, 'yaml', NULL);