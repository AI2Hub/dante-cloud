(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{462:function(v,t,_){"use strict";_.r(t);var e=_(1),a=Object(e.a)({},(function(){var v=this,t=v.$createElement,_=v._self._c||t;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h1",{attrs:{id:"数据初始化"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#数据初始化"}},[v._v("#")]),v._v(" 数据初始化")]),v._v(" "),_("h2",{attrs:{id:"知识铺垫"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#知识铺垫"}},[v._v("#")]),v._v(" 知识铺垫")]),v._v(" "),_("h3",{attrs:{id:"基础原理"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#基础原理"}},[v._v("#")]),v._v(" 基础原理")]),v._v(" "),_("p",[_("strong",[v._v("Eurynome Cloud")]),v._v(" 核心数据访问层使用Spring Boot生态中的"),_("code",[v._v("spring-boot-starter-data-jpa")]),v._v("组件，"),_("code",[v._v("spring-boot-starter-data-jpa")]),v._v(" 核心依赖是 "),_("code",[v._v("Spring Data JPA")]),v._v("。")]),v._v(" "),_("p",[_("code",[v._v("JPA")]),v._v("("),_("code",[v._v("Java Persistence API")]),v._v(")意即Java持久化API，是Sun官方在JDK5.0后提出的Java持久化规范。"),_("code",[v._v("Spring Data JPA")]),v._v(" 默认使用 "),_("code",[v._v("Hibernate")]),v._v(" 作为 "),_("code",[v._v("JPA")]),v._v(" 实现。参阅："),_("RouterLink",{attrs:{to:"/knowledge/spring-data-jpa.html#JPA"}},[v._v("Spring Data JPA")])],1),v._v(" "),_("p",[_("code",[v._v("Spring Data JPA")]),v._v(" 利用 "),_("code",[v._v("Hibernate")]),v._v(" 多数据库支持能力实现不同类型数据库的支持，同时使用 "),_("code",[v._v("Hibernate")]),v._v(" 的 "),_("code",[v._v("hbm2ddl")]),v._v(" 机制 实现数据库表的自动创建。除此以外，"),_("code",[v._v("Spring Data JPA")]),v._v(" 提供了数据库SQL脚本自动执行机制，实现了数据脚本的初始化和表结构等创建功能。")]),v._v(" "),_("h3",{attrs:{id:"spring-data-jpa-更换数据库"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#spring-data-jpa-更换数据库"}},[v._v("#")]),v._v(" Spring Data JPA 更换数据库")]),v._v(" "),_("p",[v._v("通过修改"),_("code",[v._v("spring-boot-starter-data-jpa")]),v._v("对应的配置参数就可以达成更换数据库的目的。主要涉及需要修改的配置参数如下表所示：")]),v._v(" "),_("table",[_("thead",[_("tr",[_("th",[v._v("配置")]),v._v(" "),_("th",[v._v("说明")])])]),v._v(" "),_("tbody",[_("tr",[_("td",[v._v("spring.datasource.driver-class-name")]),v._v(" "),_("td",[v._v("数据库Driver Class，不同的数据库驱动不同")])]),v._v(" "),_("tr",[_("td",[v._v("spring.datasource.url")]),v._v(" "),_("td",[v._v("数据库访问连接，不同数据连接格式也不同")])]),v._v(" "),_("tr",[_("td",[v._v("spring.datasource.username")]),v._v(" "),_("td",[v._v("数据库访问用户名，如果相同可以不用修改")])]),v._v(" "),_("tr",[_("td",[v._v("spring.datasource.password")]),v._v(" "),_("td",[v._v("数据库访问密码，如果相同可以不用修改")])]),v._v(" "),_("tr",[_("td",[v._v("spring.jpa.database")]),v._v(" "),_("td",[v._v("选择数据库类型，具体类型与枚举"),_("code",[v._v("org.springframework.orm.jpa.vendor.Database")]),v._v("中的值对应，使用小写值即可")])]),v._v(" "),_("tr",[_("td",[v._v("spring.jpa.properties.hibernate.dialect")]),v._v(" "),_("td",[v._v("选择数据库类型对应的dialect，在 "),_("code",[v._v("org.hibernate.dialect")]),v._v(" 包下可以找到具体数据库对应的dialect")])]),v._v(" "),_("tr",[_("td",[v._v("spring.jpa.hibernate.ddl-auto")]),v._v(" "),_("td",[v._v("设置hibernate初始化操作的类型，具体参见下表")])])])]),v._v(" "),_("p",[v._v("这里要特别注意 "),_("code",[v._v("spring.jpa.hibernate.ddl-auto")]),v._v(" 参数。")]),v._v(" "),_("p",[_("code",[v._v("spring.jpa.hibernate.ddl-auto")]),v._v(" 参数包含以下几个值，具体含义见下表：")]),v._v(" "),_("table",[_("thead",[_("tr",[_("th",[v._v("属性")]),v._v(" "),_("th",[v._v("说明")])])]),v._v(" "),_("tbody",[_("tr",[_("td",[_("code",[v._v("create")])]),v._v(" "),_("td",[v._v("每次加载hibernate时都会删除上一次的生成的表，再重新根据model(与数据库表对应的实体)生成表，因此可能会导致数据丢失。")])]),v._v(" "),_("tr",[_("td",[_("code",[v._v("create-drop")])]),v._v(" "),_("td",[v._v("每次加载hibernate时根据model类生成表，服务一关闭，表就自动删除。该设置适用于演示环境等特殊场景使用")])]),v._v(" "),_("tr",[_("td",[_("code",[v._v("update")])]),v._v(" "),_("td",[v._v("最常用的属性，第一次加载hibernate时根据model类会自动建立起表的结构，再次使用时自动更新表结构，原有数据不会清空。")])]),v._v(" "),_("tr",[_("td",[_("code",[v._v("validate")])]),v._v(" "),_("td",[v._v("每次加载hibernate时，会校验数据与数据库的字段类型是否相同，字段不同会报错。")])]),v._v(" "),_("tr",[_("td",[_("code",[v._v("none")])]),v._v(" "),_("td",[v._v("不进行任何操作")])])])]),v._v(" "),_("p",[v._v("如果想要使用"),_("code",[v._v("spring-boot-starter-data-jpa")]),v._v("提供SQL自动初始化机制，那么还需要额外修改以下配置：")]),v._v(" "),_("blockquote",[_("p",[v._v("通过以上配置参数的修改就可以进行数据库的切换，以及数据库表的创建.")])]),v._v(" "),_("h3",{attrs:{id:"spring-data-jpa-初始化数据库"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#spring-data-jpa-初始化数据库"}},[v._v("#")]),v._v(" Spring Data JPA 初始化数据库")]),v._v(" "),_("p",[_("code",[v._v("Spring Data JPA")]),v._v(" 还提供的数据库SQL脚本的执行机制。将已生成好的数据库SQL脚本，放入到代码工程的"),_("code",[v._v("resources")]),v._v("目录下，按照指定格式命名，通过修改配置就可以实现SQL脚本的自动执行。")]),v._v(" "),_("p",[v._v("具体SQL文件名的格式为："),_("code",[v._v("schema-${platform}.sql")]),v._v(" 和 "),_("code",[v._v("data-${platform}.sql")]),v._v("。"),_("code",[v._v("platform")]),v._v(" 是用来指定不同的数据库类型，以此来实现不同数据库脚本的切换。")]),v._v(" "),_("ul",[_("li",[_("code",[v._v("schema-${platform}.sql")]),v._v("：主要放置数据库定义语言("),_("code",[v._v("DDL")]),v._v(")SQL脚本，例如：数据库表,视图,存储过程等。")]),v._v(" "),_("li",[_("code",[v._v("data-${platform}.sql")]),v._v("：主要放置数据操纵语言("),_("code",[v._v("DML")]),v._v(")SQL脚本，例如：最经常用到的 SELECT,UPDATE,INSERT,DELETE。")])]),v._v(" "),_("blockquote",[_("p",[v._v("由此可见，"),_("code",[v._v("schema-${platform}.sql")]),v._v(" 是先于 "),_("code",[v._v("data-${platform}.sql")]),v._v(" 执行的。")])]),v._v(" "),_("p",[v._v("主要涉及需要修改的配置参数如下表所示：")]),v._v(" "),_("table",[_("thead",[_("tr",[_("th",[v._v("配置")]),v._v(" "),_("th",[v._v("说明")])])]),v._v(" "),_("tbody",[_("tr",[_("td",[v._v("spring.sql.init.mode")]),v._v(" "),_("td",[v._v("用于控制脚本执行状态。")])]),v._v(" "),_("tr",[_("td",[v._v("spring.sql.init.platform")]),v._v(" "),_("td",[v._v("数据库类型，主要用于在data-locations 和 schema-locations 中定位不同数据库的脚本")])]),v._v(" "),_("tr",[_("td",[v._v("spring.sql.init.data-locations")]),v._v(" "),_("td",[v._v("DML SQL文件路径")])]),v._v(" "),_("tr",[_("td",[v._v("spring.sql.init.data-locations")]),v._v(" "),_("td",[v._v("DDL SQL文件路径")])])])]),v._v(" "),_("p",[v._v("这里要特别注意 "),_("code",[v._v("spring.sql.init.mode")]),v._v(" 参数。")]),v._v(" "),_("p",[_("code",[v._v("spring.sql.init.mode")]),v._v(" 参数包含以下几个值，具体含义见下表：")]),v._v(" "),_("table",[_("thead",[_("tr",[_("th",[v._v("属性")]),v._v(" "),_("th",[v._v("说明")])])]),v._v(" "),_("tbody",[_("tr",[_("td",[v._v("always")]),v._v(" "),_("td",[v._v("总是执行，相当于开启")])]),v._v(" "),_("tr",[_("td",[v._v("never")]),v._v(" "),_("td",[v._v("不执行，相当于关闭")])]),v._v(" "),_("tr",[_("td",[v._v("embedded")]),v._v(" "),_("td",[v._v("仅初始化嵌入式数据库，特殊需求和设计会用到")])])])]),v._v(" "),_("h3",{attrs:{id:"特别说明"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#特别说明"}},[v._v("#")]),v._v(" 特别说明")]),v._v(" "),_("div",{staticClass:"custom-block danger"},[_("p",{staticClass:"custom-block-title"},[v._v("警告")]),v._v(" "),_("p",[_("code",[v._v("Spring Data JPA")]),v._v(" 既可以通过 "),_("code",[v._v("Hibernate")]),v._v(" 的机制进行数据库表的创建，也可以通过"),_("code",[v._v("sql.init")]),v._v("的方式进行数据库表以及数据初始化的创建。这两者是各自独立的,没有任何必然联系的。具体如何使用就要看设计者的考虑。")]),v._v(" "),_("p",[v._v("两者的执行顺序不同，如果要两者同时使用一定要注意执行顺序，否则很容易导致运行出错。具体的顺序是：")]),v._v(" "),_("p",[_("code",[v._v("schema-${platform}.sql")]),v._v(" > "),_("code",[v._v("data-${platform}.sql")]),v._v(" > "),_("code",[v._v("hbm2ddl")]),v._v("。")])]),v._v(" "),_("h2",{attrs:{id:"操作步骤"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#操作步骤"}},[v._v("#")]),v._v(" 操作步骤")]),v._v(" "),_("p",[_("strong",[v._v("Eurynome Cloud")]),v._v(" 数据库表创建和默认数据的初始化，就是使用 "),_("code",[v._v("Spring Data JPA")]),v._v(" 自身的机制实现。")]),v._v(" "),_("p",[v._v("在 "),_("strong",[v._v("Eurynome Cloud")]),v._v(" 数据库表创建和默认数据的初始化过程中, 主要会进行以下几项操作。")]),v._v(" "),_("ul",[_("li",[v._v("创建核心业务表")]),v._v(" "),_("li",[v._v("扫描已运行服务中所有的"),_("code",[v._v("RestController")]),v._v("接口，将接口数据转换为权限数据，并汇总至用户中心服务统一存储和管理。")]),v._v(" "),_("li",[v._v("系统默认数据，如用户,角色等数据的初始化。")])]),v._v(" "),_("div",{staticClass:"custom-block warning"},[_("p",{staticClass:"custom-block-title"},[v._v("注意")]),v._v(" "),_("p",[v._v("具体开始之前，一定要确保所有前序工作已经完成。参阅："),_("RouterLink",{attrs:{to:"/guide/deployment.html#后端运行"}},[v._v("数据库初始化前序工作")])],1)]),v._v(" "),_("h3",{attrs:{id:"步骤一-创建数据表"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#步骤一-创建数据表"}},[v._v("#")]),v._v(" 步骤一：创建数据表")]),v._v(" "),_("ol",[_("li",[_("p",[v._v("进入Nacos管理界面。找到您所使用的对应 "),_("code",[v._v("多环境")]),v._v(" 下的 "),_("code",[v._v("eurynome-cloud-environment.yaml")]),v._v(" 配置文件。例如，您当前使用的是 "),_("code",[v._v("development")]),v._v(" 环境，那么在Nacos后台管理中，找到 "),_("code",[v._v("Group")]),v._v(" 是 "),_("code",[v._v("development")]),v._v(" 的 "),_("code",[v._v("eurynome-cloud-environment.yaml")]),v._v(" 配置。多环境配置，参阅："),_("RouterLink",{attrs:{to:"/guide/多环境配置.html"}},[v._v("多环境配置")])],1)]),v._v(" "),_("li",[_("p",[v._v("设置 "),_("code",[v._v("eurynome-cloud-environment.yaml")]),v._v("配置文件中属性 "),_("code",[v._v("herodotus.switch.database.ddl-auto")]),v._v(" 的值为 "),_("code",[v._v("create")]),v._v(" 或 "),_("code",[v._v("update")])])])]),v._v(" "),_("div",{staticClass:"custom-block warning"},[_("p",{staticClass:"custom-block-title"},[v._v("注意")]),v._v(" "),_("ul",[_("li",[v._v("如果是初次部署，或者想将已有表重新创建，那么将 "),_("code",[v._v("herodotus.switch.database.ddl-auto")]),v._v(" 的值设置为 "),_("code",[v._v("create")]),v._v("。")]),v._v(" "),_("li",[v._v("如果是已经开始使用系统了，想保留已有的数据，只做更新，那么将 "),_("code",[v._v("herodotus.switch.database.ddl-auto")]),v._v(" 的值设置为 "),_("code",[v._v("update")]),v._v("。")])])]),v._v(" "),_("ol",{attrs:{start:"3"}},[_("li",[v._v("点击"),_("code",[v._v("发布")]),v._v("按钮，发布配置，让配置生效。")])]),v._v(" "),_("div",{staticClass:"custom-block danger"},[_("p",{staticClass:"custom-block-title"},[v._v("警告")]),v._v(" "),_("ul",[_("li",[_("p",[_("strong",[v._v("正式环境一定要提前做好数据备份")]),v._v("。")])]),v._v(" "),_("li",[_("p",[v._v("如果是"),_("code",[v._v("MySQL")]),v._v("数据库的初次部署，那么最好将 "),_("code",[v._v("herodotus.switch.database.ddl-auto")]),v._v(" 的值设置为 "),_("code",[v._v("update")]),v._v("，否则就会出错。")])]),v._v(" "),_("li",[_("p",[_("code",[v._v("herodotus.switch.database.ddl-auto")]),v._v(" 的值设置为 "),_("code",[v._v("update")]),v._v(", 再次运行服务，由于 "),_("code",[v._v("Hibernate")]),v._v(" 不同方言实现逻辑的不同，在有些数据库下运行，例如："),_("code",[v._v("PostgreSQL")]),v._v(", 对于某些兼容性问题，只是输出告警；在某些数据库下运行，例如 MySQL，对于某些兼容性问题，会直接抛出Exception。所以出现这种情况，只要服务继续在运行就不是系统BUG；如果出错直接导致服务运行停止，那么请报 "),_("code",[v._v("ISSUE")]),v._v("。参阅："),_("RouterLink",{attrs:{to:"/others/mysql.html"}},[v._v("MySQL常见问题")])],1)])])]),v._v(" "),_("ol",{attrs:{start:"4"}},[_("li",[v._v("运行 "),_("code",[v._v("UpmsApplication")]),v._v(" 服务。")])]),v._v(" "),_("p",[_("code",[v._v("UpmsApplication")]),v._v(" 服务第一次正常运行之后，所有核心业务表都已经创建，"),_("code",[v._v("UpmsApplication")]),v._v(" 服务中所有接口都已经转换为权限数据存入"),_("code",[v._v("sys_authority")]),v._v("表中。")]),v._v(" "),_("blockquote",[_("p",[v._v("如果看到有数据库表创建，同时"),_("code",[v._v("sys_authority")]),v._v("表中有数据，证明数据库表创建成功。")])]),v._v(" "),_("h3",{attrs:{id:"步骤二-初始默认数据"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#步骤二-初始默认数据"}},[v._v("#")]),v._v(" 步骤二：初始默认数据")]),v._v(" "),_("h4",{attrs:{id:"方式一-自动初始化"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#方式一-自动初始化"}},[v._v("#")]),v._v(" 方式一：自动初始化")]),v._v(" "),_("ol",[_("li",[_("p",[v._v("停止"),_("code",[v._v("UpmsApplication")]),v._v(" 服务")])]),v._v(" "),_("li",[_("p",[v._v("进入Nacos管理界面。找到您所使用的对应 "),_("code",[v._v("多环境")]),v._v(" 下的 "),_("code",[v._v("eurynome-cloud-environment.yaml")]),v._v(" 配置文件。")])]),v._v(" "),_("li",[_("p",[v._v("设置 "),_("code",[v._v("eurynome-cloud-environment.yaml")]),v._v(" 配置文件中属性 "),_("code",[v._v("herodotus.switch.database.ddl-auto")]),v._v(" 的值为 "),_("code",[v._v("update")]),v._v(" 或 "),_("code",[v._v("none")])])]),v._v(" "),_("li",[_("p",[v._v("设置 "),_("code",[v._v("eurynome-cloud-environment.yaml")]),v._v(" 配置文件中属性 "),_("code",[v._v("herodotus.switch.database.init-mode")]),v._v(" 的值为 "),_("code",[v._v("always")])])]),v._v(" "),_("li",[_("p",[v._v("点击"),_("code",[v._v("发布")]),v._v("按钮，发布配置，让配置生效。")])]),v._v(" "),_("li",[_("p",[v._v("如果默认使用的不是 "),_("code",[v._v("PostgreSQL")]),v._v(" 数据库，需要修改"),_("code",[v._v("${project_home}/services/eurynome-cloud-upms-ability/resources/bootstrap.yml")]),v._v(" 中 "),_("code",[v._v("spring.sql.init.data-locations")]),v._v(" 配置，放开您所使用数据库对应的SQL脚本。注释掉其它SQL脚本")])]),v._v(" "),_("li",[_("p",[v._v("再次运行 "),_("code",[v._v("UpmsApplication")]),v._v(" 服务。")])])]),v._v(" "),_("p",[_("code",[v._v("UpmsApplication")]),v._v(" 服务再一次正常运行之后，如果"),_("code",[v._v("sys_user")]),v._v(","),_("code",[v._v("sys_role")]),v._v(","),_("code",[v._v("sys_role_authority")]),v._v("等表中都都已经有数据了，证明数据初始化成功。")]),v._v(" "),_("h4",{attrs:{id:"方式二-手动初始化"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#方式二-手动初始化"}},[v._v("#")]),v._v(" 方式二：手动初始化")]),v._v(" "),_("ol",[_("li",[_("p",[v._v("设置 "),_("code",[v._v("eurynome-cloud-environment.yaml")]),v._v(" 配置文件中属性 "),_("code",[v._v("herodotus.switch.database.ddl-auto")]),v._v(" 的值为 "),_("code",[v._v("update")]),v._v(" 或 "),_("code",[v._v("none")]),v._v("。")])]),v._v(" "),_("li",[_("p",[v._v("在工程"),_("code",[v._v("${project_home}/services/eurynome-cloud-upms-ability/resources/sqls")]),v._v("目录下，可以找到对应数据库数据初始化脚本。可以用你喜欢的方式导入数据库。")])])]),v._v(" "),_("blockquote",[_("p",[v._v("采用手动初始化方式，下一步可以跳过忽略")])]),v._v(" "),_("h3",{attrs:{id:"步骤三-回置配置"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#步骤三-回置配置"}},[v._v("#")]),v._v(" 步骤三：回置配置")]),v._v(" "),_("ol",[_("li",[_("p",[v._v("停止"),_("code",[v._v("UpmsApplication")]),v._v(" 服务")])]),v._v(" "),_("li",[_("p",[v._v("进入Nacos管理界面。找到您所使用的对应 "),_("code",[v._v("多环境")]),v._v(" 下的 "),_("code",[v._v("eurynome-cloud-environment.yaml")]),v._v(" 配置文件。")])]),v._v(" "),_("li",[_("p",[v._v("设置 "),_("code",[v._v("eurynome-cloud-environment.yaml")]),v._v(" 配置文件中属性 "),_("code",[v._v("herodotus.switch.database.init-mode")]),v._v(" 的值重置为 "),_("code",[v._v("never")]),v._v("。")])]),v._v(" "),_("li",[_("p",[v._v("检查 "),_("code",[v._v("eurynome-cloud-environment.yaml")]),v._v(" 配置文件中属性 "),_("code",[v._v("herodotus.switch.database.ddl-auto")]),v._v(" 的值为 "),_("code",[v._v("update")]),v._v(" 或 "),_("code",[v._v("none")])])]),v._v(" "),_("li",[_("p",[v._v("点击"),_("code",[v._v("发布")]),v._v("按钮，发布配置，让配置生效。")])])]),v._v(" "),_("div",{staticClass:"custom-block danger"},[_("p",{staticClass:"custom-block-title"},[v._v("为什么回置并再次检查")]),v._v(" "),_("ul",[_("li",[v._v("如果 "),_("code",[v._v("herodotus.switch.database.ddl-auto")]),v._v(" 的值为 "),_("code",[v._v("create")]),v._v(" 或 "),_("code",[v._v("create-drop")]),v._v("，再次启动服务会重新建表，那么前面的工作就白做了。")]),v._v(" "),_("li",[v._v("如果 "),_("code",[v._v("herodotus.switch.database.init-mode")]),v._v(" 的值为 "),_("code",[v._v("always")]),v._v("，再次启动服务会再次执行SQL脚本，必定出现主键冲突问题导致失败。")])])]),v._v(" "),_("h3",{attrs:{id:"总结"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[v._v("#")]),v._v(" 总结")]),v._v(" "),_("p",[v._v("经过实际的使用，总体感受 "),_("code",[v._v("Spring Data JPA")]),v._v(" 以及 "),_("code",[v._v("Hibernate")]),v._v(" 的多数据库支持还是非常强大，在 "),_("code",[v._v("PostgreSQL")]),v._v(" 等自身版本差异不大的数据库家族中，使用非常顺滑。而像"),_("code",[v._v("MySQL")]),v._v(" 这种自身各个版本差异较大的数据库家族中，使用起来确实有点蹩脚。")]),v._v(" "),_("h2",{attrs:{id:"配置参数对应关系"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#配置参数对应关系"}},[v._v("#")]),v._v(" 配置参数对应关系")]),v._v(" "),_("p",[_("strong",[v._v("Eurynome Cloud")]),v._v(" 数据库操作设计配置参数与"),_("code",[v._v("spring-boot-starter-data-jpa")]),v._v("配置参数对应关系如下表：")]),v._v(" "),_("table",[_("thead",[_("tr",[_("th",[v._v("配置")]),v._v(" "),_("th",[v._v("对应")])])]),v._v(" "),_("tbody",[_("tr",[_("td",[v._v("herodotus.database-information.driver-class-name")]),v._v(" "),_("td",[v._v("spring.datasource.driver-class-name")])]),v._v(" "),_("tr",[_("td",[v._v("herodotus.database-information.url")]),v._v(" "),_("td",[v._v("spring.datasource.url")])]),v._v(" "),_("tr",[_("td",[v._v("herodotus.environment.database.username")]),v._v(" "),_("td",[v._v("spring.datasource.username")])]),v._v(" "),_("tr",[_("td",[v._v("herodotus.environment.database.password")]),v._v(" "),_("td",[v._v("spring.datasource.password")])]),v._v(" "),_("tr",[_("td",[v._v("herodotus.database-information.platform")]),v._v(" "),_("td",[v._v("spring.jpa.database"),_("br"),v._v("spring.sql.init.platform")])]),v._v(" "),_("tr",[_("td",[v._v("herodotus.environment.database.dialect")]),v._v(" "),_("td",[v._v("spring.jpa.properties.hibernate.dialect")])]),v._v(" "),_("tr",[_("td",[v._v("herodotus.switch.database.ddl-auto")]),v._v(" "),_("td",[v._v("spring.jpa.hibernate.ddl-auto")])]),v._v(" "),_("tr",[_("td",[v._v("herodotus.switch.database.init-mode")]),v._v(" "),_("td",[v._v("spring.sql.init.mode")])])])])])}),[],!1,null,null,null);t.default=a.exports}}]);