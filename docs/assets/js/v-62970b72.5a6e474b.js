"use strict";(self.webpackChunkeurynome_cloud_document=self.webpackChunkeurynome_cloud_document||[]).push([[707],{8301:(e,a,n)=>{n.r(a),n.d(a,{data:()=>s});const s={key:"v-62970b72",path:"/basic-knowledge/dev-environment.html",title:"本地开发环境搭建",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"Java 开发环境",slug:"java-开发环境",children:[{level:3,title:"[1]、JDK 安装及配置",slug:"_1-、jdk-安装及配置",children:[]},{level:3,title:"[2]、Maven 安装及配置",slug:"_2-、maven-安装及配置",children:[]},{level:3,title:"[3]、Git 安装",slug:"_3-、git-安装",children:[]},{level:3,title:"[4]、Idea 安装及配置",slug:"_4-、idea-安装及配置",children:[]},{level:3,title:"[5]、检出代码和编译",slug:"_5-、检出代码和编译",children:[]}]},{level:2,title:"Node 开发环境",slug:"node-开发环境",children:[{level:3,title:"[1]、Nodejs 安装",slug:"_1-、nodejs-安装",children:[]},{level:3,title:"[2]、Nodejs 配置",slug:"_2-、nodejs-配置",children:[]},{level:3,title:"[3]、Yarn 简介",slug:"_3-、yarn-简介",children:[]},{level:3,title:"[4]、Yarn 安装",slug:"_4-、yarn-安装",children:[]},{level:3,title:"[5]、Yarn 配置",slug:"_5-、yarn-配置",children:[]}]}],filePathRelative:"basic-knowledge/dev-environment.md",git:{updatedTime:null,contributors:[]}}},4867:(e,a,n)=>{n.r(a),n.d(a,{default:()=>ce});var s=n(6252);const o=(0,s.uE)('<h1 id="本地开发环境搭建" tabindex="-1"><a class="header-anchor" href="#本地开发环境搭建" aria-hidden="true">#</a> 本地开发环境搭建</h1><h2 id="java-开发环境" tabindex="-1"><a class="header-anchor" href="#java-开发环境" aria-hidden="true">#</a> Java 开发环境</h2><h3 id="_1-、jdk-安装及配置" tabindex="-1"><a class="header-anchor" href="#_1-、jdk-安装及配置" aria-hidden="true">#</a> [1]、JDK 安装及配置</h3><h4 id="_1-下载-jdk" tabindex="-1"><a class="header-anchor" href="#_1-下载-jdk" aria-hidden="true">#</a> （1）下载 JDK</h4>',4),c=(0,s.Uk)("下载 "),d=(0,s._)("code",null,"Java SE Development Kit",-1),l=(0,s.Uk)(" (JDK) "),i={href:"https://www.oracle.com/java/technologies/downloads/#java8",target:"_blank",rel:"noopener noreferrer"},t=(0,s.Uk)("下载地址"),p=(0,s.Uk)("。"),r=(0,s.uE)('<div class="custom-container tip"><p class="custom-container-title">说明</p><p>建议下载 <code>JDK 8</code>, 更高的版本逻辑上是向下兼容的，但是本系统还没有进行过验证。</p></div><h4 id="_2-安装-jdk" tabindex="-1"><a class="header-anchor" href="#_2-安装-jdk" aria-hidden="true">#</a> （2）安装 JDK</h4><p>点击安装下载后的<code>JDK</code>安装文件，全部点击下一步即可。</p><div class="custom-container tip"><p class="custom-container-title">说明</p><p>建议全部点击下一步安装，不要修改安装目录等内容，全部默认安装。一方面，在没有搞清楚 JDK 和 JRE 区别时，不建议修改安装目录，这经常会导致装错或者漏装；另一方面，个人觉得装在默认目录挺好，方便定位查找，重装系统也一并清除了。</p><blockquote><p>只是个人建议，请结合自己的实际情况和考虑安装。</p></blockquote></div><h4 id="_3-配置jdk环境变量-windows" tabindex="-1"><a class="header-anchor" href="#_3-配置jdk环境变量-windows" aria-hidden="true">#</a> （3）配置JDK环境变量（Windows）</h4><p>右键点击 Windows 左下角的 Windows 图标，选择 <code>系统—&gt;高级系统设置—&gt;环境变量</code>。</p><ol><li>在 <code>系统变量</code> 栏中，点击<code>新建</code>，弹出 <code>编辑系统变量</code> 对话框。</li></ol><ul><li>在 <code>变量名(N)</code> 中，输入变量名称 <code>JAVA_HOME</code></li><li>在 <code>变量值(V)</code> 中，输入JDK 所在目录 <code>C:\\Program Files\\Java\\jdk1.8.0_301</code></li></ul><div class="custom-container warning"><p class="custom-container-title">注意</p><p>JDK 安装完成之后，会在 <code>C:\\Program Files\\Java</code> 目录中生成两个目录, 以 <code>Java SE Development Kit 8u301</code> 为例，生成的目录就是：<code>jdk1.8.0_301</code> 和 <code>jre1.8.0_301</code>。</p><p>在 <code>变量值(V)</code> 中，我们要配置的是 <code>jdk1.8.0_301</code> 目录地址，而不是 <code>jre1.8.0_301</code></p></div><p>点击 <code>编辑系统变量</code> 对话框中的【确定】按钮，保存配置。</p><ol start="2"><li>还是在 <code>系统变量</code> 栏中，找到 <code>Path</code> 变量，点击<code>编辑</code>， 弹出 <code>编辑环境变量</code> 对话框</li></ol><p>在 <code>编辑环境变量</code> 对话框中，添加 <code>%JAVA_HOME%\\bin</code></p><div class="custom-container tip"><p class="custom-container-title">说明</p><p><code>%JAVA_HOME%</code> 的意思，即使引用上一步中，定义的变量 <code>JAVA_HOME</code> 的 变量值。</p></div><p>点击 <code>编辑环境变量</code> 对话框中的【确定】按钮，保存配置。</p><h4 id="_4-验证jdk安装" tabindex="-1"><a class="header-anchor" href="#_4-验证jdk安装" aria-hidden="true">#</a> （4）验证JDK安装</h4><div class="custom-container tip"><p class="custom-container-title">说明</p><p>至此，JDK环境变量已经配置完成。以上这些配置已经可以完全满足JAVA开发的正常需要，除非特别的应用需求，比如说本地运行自定义的、需要独立运行的纯Java程序外，不再需要像网上说的，还要配置什么 <code>.</code> 、 <code>classpath</code>、 <code>tools.jar</code> 之类的东西。</p></div><p>新打开一个命令提示符（CMD），输入以下命令：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>java -version\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>如果可以正确显示版本信息，说明安装成功，如下图所示。</p><p><img src="/eurynome-cloud/images/environment/jdk-validation.png" alt="jdk-validation"></p><div class="custom-container warning"><p class="custom-container-title">注意</p><p>CMD 自身有 Session 机制，每次打开是以当前的环境变量配置作为依据运行。环境变量配置完成之后，如果使用之前的 CMD 窗口，新的环境变量配置将不会生效。所以一定要注意，重新开一个 CMD 窗口进行安装验证。</p></div><h3 id="_2-、maven-安装及配置" tabindex="-1"><a class="header-anchor" href="#_2-、maven-安装及配置" aria-hidden="true">#</a> [2]、Maven 安装及配置</h3><h4 id="_1-下载maven" tabindex="-1"><a class="header-anchor" href="#_1-下载maven" aria-hidden="true">#</a> （1）下载Maven</h4>',23),u=(0,s.Uk)("下载 "),h=(0,s._)("code",null,"Apache Maven",-1),m=(0,s.Uk)(),g={href:"http://maven.apache.org/download.cgi",target:"_blank",rel:"noopener noreferrer"},v=(0,s.Uk)("下载地址"),b=(0,s.Uk)("。"),k=(0,s.uE)('<h4 id="_2-解压缩-maven" tabindex="-1"><a class="header-anchor" href="#_2-解压缩-maven" aria-hidden="true">#</a> （2）解压缩 Maven</h4><p>将下载好的 <code>apache-maven-XXXX-bin.zip</code>, 解压到你想要放置的任何位置。</p><div class="custom-container tip"><p class="custom-container-title">说明</p><p>Maven 是 Java 开发常用的工具，建议最好找一个相对固定的位置放置，一方面，不需要频繁修改和更换版本；另一方面，主要是好找，方便反复使用。</p></div><h4 id="_3-配置maven环境变量-windows" tabindex="-1"><a class="header-anchor" href="#_3-配置maven环境变量-windows" aria-hidden="true">#</a> （3）配置Maven环境变量（Windows）</h4><p>右键点击 Windows 左下角的 Windows 图标，选择 <code>系统—&gt;高级系统设置—&gt;环境变量</code>。</p><ol><li>在 <code>系统变量</code> 栏中，点击<code>新建</code>，弹出 <code>编辑系统变量</code> 对话框。</li></ol><ul><li>在 <code>变量名(N)</code> 中，输入变量名称 <code>MAVEN_HOME</code></li><li>在 <code>变量值(V)</code> 中，输入 Maven 所在目录，这里以 <code>D:\\Environment\\apache-maven-3.8.2</code> 为例，请根据实际情况进行修改。</li></ul><p>点击 <code>编辑系统变量</code> 对话框中的【确定】按钮，保存配置。</p><ol start="2"><li>还是在 <code>系统变量</code> 栏中，找到 <code>Path</code> 变量，点击<code>编辑</code>， 弹出 <code>编辑环境变量</code> 对话框</li></ol><p>在 <code>编辑环境变量</code> 对话框中，添加 <code>%MAVEN_HOME%\\bin</code></p><div class="custom-container tip"><p class="custom-container-title">说明</p><p><code>%MAVEN_HOME%</code> 的意思，即使引用上一步中，定义的变量 <code>MAVEN_HOME</code> 的 变量值。</p></div><p>点击 <code>编辑环境变量</code> 对话框中的【确定】按钮，保存配置。</p><h4 id="_4-验证maven安装" tabindex="-1"><a class="header-anchor" href="#_4-验证maven安装" aria-hidden="true">#</a> （4）验证Maven安装</h4><p>新打开一个命令提示符（CMD），输入以下命令：</p><p>如果可以正确显示版本信息，说明安装成功，如下图所示。</p><p><img src="/eurynome-cloud/images/environment/maven-validation.png" alt="maven-validation"></p><div class="custom-container warning"><p class="custom-container-title">注意</p><p>CMD 自身有 Session 机制，每次打开是以当前的环境变量配置作为依据运行。环境变量配置完成之后，如果使用之前的 CMD 窗口，新的环境变量配置将不会生效。所以一定要注意，重新开一个 CMD 窗口进行安装验证。</p></div><h4 id="_5-创建本地仓库目录" tabindex="-1"><a class="header-anchor" href="#_5-创建本地仓库目录" aria-hidden="true">#</a> （5）创建本地仓库目录</h4><p>建议找一个相对固定的位置，创建任意名称的文件夹，作为本地仓库存储 Maven 下载的依赖。</p><div class="custom-container tip"><p class="custom-container-title">说明</p><p>使用 Maven 时，Maven 会从中央库，将 <code>pom.xml</code> 中依赖的组件，下载至本地供开发和编译使用。默认情况下，Maven 会将下载的依赖组件，放置到系统盘中的 <code>.m2</code> 目录下。这不仅会慢慢撑大系统盘空间的使用，如果重装系统，相关的组件又需要重新下载。</p><p>指定一个文件夹，作为本地 Maven 存储仓库，可以减少依赖组件的反复下载，起到重复使用的作用。</p></div><p>这里以 <code>maven-repository</code> 为例，放在与 <code>apache-maven-3.8.2</code> 平级的目录下。只是示例，请根据实际情况修改。</p><h4 id="_6-修改-maven-配置" tabindex="-1"><a class="header-anchor" href="#_6-修改-maven-配置" aria-hidden="true">#</a> （6）修改 Maven 配置</h4><p>在 Maven 安装目录下，找到 <code>settings.xml</code> 文件，具体路径为 <code>${maven_home}/conf/settings.xml</code>。</p><p>用任意编辑器打开 <code>settings.xml</code> 文件中，找到被注释掉的 <code>&lt;localRepository&gt;</code> 节点，在其下方添加以下配置：</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>localRepository</span><span class="token punctuation">&gt;</span></span>D:/Environment/maven-repository<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>localRepository</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><div class="custom-container tip"><p class="custom-container-title">说明</p><p>这里的路径，就是上一步中创建的本地 Maven 存储仓库文件夹所在的路径。</p><blockquote><p>注意：路径的格式，斜杠的方向。不同的操作系统，会略有不同。</p></blockquote></div><p>在 <code>settings.xml</code> 文件中，找到 <code>&lt;mirrors&gt;</code> 节点，在其内部添加以下配置：</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirror</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">&gt;</span></span>aliyunmaven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrorOf</span><span class="token punctuation">&gt;</span></span>*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrorOf</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>阿里云公共仓库<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">&gt;</span></span>https://maven.aliyun.com/repository/public<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirror</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><div class="custom-container tip"><p class="custom-container-title">说明</p><p>Maven 默认是从中央仓库进行依赖的下载，具体地址为 <code>https://repo.maven.apache.org/maven2</code>。因为涉及到国外网络，下载速度比较慢。通过上面的配置，将 Maven 仓库修改为阿里公共仓库，依赖下载速度会快很多。</p><blockquote><p>阿里公共仓库会同步中央库的内容，可以放心使用，不用担心内容不全的问题。当然，可以根据你自身的情况添加其它的仓库。</p></blockquote></div><h3 id="_3-、git-安装" tabindex="-1"><a class="header-anchor" href="#_3-、git-安装" aria-hidden="true">#</a> [3]、Git 安装</h3>',30),_=(0,s.Uk)("下载 "),f=(0,s._)("code",null,"Git",-1),x=(0,s.Uk)(),M={href:"https://git-scm.com/download/win",target:"_blank",rel:"noopener noreferrer"},y=(0,s.Uk)("下载地址"),j=(0,s.Uk)("。"),w=(0,s._)("p",null,[(0,s.Uk)("全部使用默认设置，一路 "),(0,s._)("code",null,"Next"),(0,s.Uk)(" 安装即可")],-1),E=(0,s._)("h3",{id:"_4-、idea-安装及配置",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#_4-、idea-安装及配置","aria-hidden":"true"},"#"),(0,s.Uk)(" [4]、Idea 安装及配置")],-1),U=(0,s._)("h4",{id:"_1-下载-idea",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#_1-下载-idea","aria-hidden":"true"},"#"),(0,s.Uk)(" （1）下载 Idea")],-1),N=(0,s.Uk)("下载 "),J=(0,s._)("code",null,"Idea",-1),D=(0,s.Uk)(),q={href:"https://www.jetbrains.com/idea/",target:"_blank",rel:"noopener noreferrer"},A=(0,s.Uk)("下载地址"),C=(0,s.Uk)("。"),P=(0,s.uE)('<p>全部使用默认设置，一路 <code>Next</code> 安装即可</p><blockquote><p>具体怎么激活，请自行百度</p></blockquote><div class="custom-container tip"><p class="custom-container-title">这里为什么将 Idea 安装放在第四部分说明？</p><p>主要原因是，JDK、Maven 和 Git 均已安装配置好之后，再来安装 Idea，Idea 就会自动读取 <code>JAVA_HOME</code>、 <code>MAVEN_HOME</code> 以及 Git的安装路径等信息，并进行自动配置。就无须再手动配置这些信息，使用起来比较方便。</p><p>如果没有按照，上面所说的顺序，已经提前安装好了Idea。可以在JDK、Maven 和 Git 均已安装配置好之后，重新启动 Idea，<code>JAVA_HOME</code>、 <code>MAVEN_HOME</code> 以及 Git的安装路径等信息也会被读取并进行设置。</p></div><h4 id="_2-在-idea-中修改-maven-配置" tabindex="-1"><a class="header-anchor" href="#_2-在-idea-中修改-maven-配置" aria-hidden="true">#</a> （2）在 Idea 中修改 Maven 配置</h4><p>打开 Idea，点击 <code>File -&gt; Settings... -&gt; Maven</code>，打开 Maven 配置面板，如下图所示：</p><p><img src="/eurynome-cloud/images/idea/maven-config-01.png" alt="maven-config-01"></p><p>在 Maven 配置面板中，修改 Maven 的配置。</p><ol><li>设置 <code>Maven home path</code></li></ol><p>在 Maven 配置面板中，设置 <code>Maven home path</code> 的值，如果 Maven 的环境变量配置正确，那么在 <code>Maven home path</code> 选择下拉框中，就可以找到当前环境变量中配置的 Maven 信息，这个值就是环境变量 <code>MAVEN_HOME</code> 中配置的值。如下图所示：</p><p><img src="/eurynome-cloud/images/idea/maven-config-02.png" alt="maven-config-02"></p><ol start="2"><li>设置 <code>User setting files</code></li></ol><p>在 Maven 配置面板中，首先勾选 <code>User setting files</code> 设置后面的 <code>Override</code>，勾选之后 <code>User setting files</code> 的选择框就会变为激活的状态。</p><p>点击 <code>User setting files</code> 设置中的 <code>文件夹</code> 按钮，选择 <code>${maven_home}/conf/settings.xml</code> 文件，具体如下图所示：</p><p><img src="/eurynome-cloud/images/idea/maven-config-03.png" alt="maven-config-03"></p><p>如果 <code>${maven_home}/conf/settings.xml</code> 文件已经正确配置，并且在 <code>User setting files</code> 设置中也选择正确的情况下，<code>Local repository</code> 配置就会自动显示出自定义本地仓库的路径，这个路径就是刚刚，在 <code>${maven_home}/conf/settings.xml</code> 中设置的 <code>&lt;localRepository&gt;</code> 的值，这就说明配置成功。如上图所示。</p><div class="custom-container warning"><p class="custom-container-title">注意</p><p>当前截图使用的是 <code>Idea 2021.2.3</code> 版本，之前发现有些低版本Idea，不会自动读取 <code>${maven_home}/conf/settings.xml</code> 中配置的 <code>&lt;localRepository&gt;</code> 值。</p><p>如果出现这种情况，勾选 <code>Local repository</code> 后面的 <code>Override</code>，激活 <code>Local repository</code> 设置的文件选择框，手动选择一下你所定义的本地仓库文件夹，即可解决。</p></div><h4 id="_3-在-idea-中修改-maven-的全局配置" tabindex="-1"><a class="header-anchor" href="#_3-在-idea-中修改-maven-的全局配置" aria-hidden="true">#</a> （3）在 Idea 中修改 Maven 的全局配置</h4><p>Idea 中很多设置否分为两种，一种设置只是针对当前工程，这种设置只是针对当前工程有效，打开新的工程或者重新检出当前工程就需要重新配置；一种设置是针对新工程，配置之后所有用 Idea 打开工程都会生效，就不需要重新设置。</p><p>上一步中进行 Maven 设置，就是前一种设置，只对当前工程有效，打开新的工程或者重新检出当前工程就需要重新设置 Maven。</p><p>可以通过下面的方式，进行 Maven 的 “全局” 配置。</p><p>点击 <code>File -&gt; New Projects Setup -&gt; Settings For New Prjects...</code>，会跳出全局设置面板，如下图所示：</p><p><img src="/eurynome-cloud/images/idea/maven-config-04.png" alt="maven-config-04"></p><p>在这个面板中，找到 Maven 配置，重复进行上一步的操作即可。</p><h3 id="_5-、检出代码和编译" tabindex="-1"><a class="header-anchor" href="#_5-、检出代码和编译" aria-hidden="true">#</a> [5]、检出代码和编译</h3>',24),F=(0,s.Uk)("在 "),I=(0,s._)("code",null,"IDEA",-1),O=(0,s.Uk)(" 中，点击菜单 "),V=(0,s._)("code",null,"File -> New -> Project From Version Control...",-1),Y=(0,s.Uk)(", 在弹出框中输入本工程Git地址："),K={href:"https://gitee.com/herodotus/eurynome-cloud.git",target:"_blank",rel:"noopener noreferrer"},W=(0,s.Uk)("https://gitee.com/herodotus/eurynome-cloud.git"),H=(0,s.Uk)("，然后设置放置目录，点击 "),G=(0,s._)("strong",null,"OK",-1),R=(0,s.Uk)(" 即可。"),S=(0,s._)("p",null,[(0,s.Uk)("在这个过程中，Idea 会从 Git 中检出代码，并且检查 "),(0,s._)("code",null,"pom.xml"),(0,s.Uk)(" 中的依赖，如果本地仓库中没有，就从配置的中央库中重新下载。")],-1),L=(0,s._)("blockquote",null,[(0,s._)("p",null,"检查上文中，自定义的本地 Maven 仓库，如果有依赖包更新，说明全部配置成功。")],-1),$={class:"custom-container tip"},X=(0,s._)("p",{class:"custom-container-title"},"说明",-1),z=(0,s._)("li",null,[(0,s._)("p",null,"如果是初次搭建Java的开发环境，那么本地 Maven 仓库中内容是空的，就会需要一定时间下载所有的依赖库，具体所需时间根据网络情况的不同会有差异。")],-1),T=(0,s.Uk)("如果是初次搭建Java的开发环境，由于下载的依赖包较多，Idea 解析不过来，会导致 Idea 右侧 Maven 面板中有些依赖标成红色。如果已经确定所有的依赖均已下载完成，可以编译一下代码，编译代码参见："),B=(0,s.Uk)("环境部署"),Q=(0,s.Uk)("，如果可以编译成功，说明环境正常，下次启动 Idea 右侧 Maven 面板中被标成红色依赖就会消失"),Z=(0,s.uE)('<div class="custom-container tip"><p class="custom-container-title">提示</p><p>如果本地Java开发环境，不是严格按照本文档顺序进行搭建的。特别是已经提前检出了代码，那么有可能不会自动出发 Idea Maven 的更新机制。</p><p>可以根据第三步中的描述，修改完 Maven 的配置之后，点击下图中的刷新按钮，手动触发 Maven 的更新和下载。</p><blockquote><p>如果发现有编译错误，可以先检查一下 Maven 配置，确保配置没有问题后，尝试点击刷新按钮，多数情况下问题都可以解决。</p></blockquote><p>在IDEA中，打开 <code>Maven</code> 面板，点击刷新按钮。如下图所示：</p><p><img src="/eurynome-cloud/images/idea/refresh-maven.png" alt="refresh-maven"></p></div><h2 id="node-开发环境" tabindex="-1"><a class="header-anchor" href="#node-开发环境" aria-hidden="true">#</a> Node 开发环境</h2><h3 id="_1-、nodejs-安装" tabindex="-1"><a class="header-anchor" href="#_1-、nodejs-安装" aria-hidden="true">#</a> [1]、Nodejs 安装</h3>',3),ee=(0,s.Uk)("下载 Nodejs，"),ae={href:"https://nodejs.org/zh-cn/",target:"_blank",rel:"noopener noreferrer"},ne=(0,s.Uk)("下载地址"),se=(0,s.Uk)("，按照提示安装即可，记得选择将Nodejs增加到PATH一项，如果界面上没有，应该就是默认帮你搞定了，可以忽略。"),oe=(0,s.uE)('<p>安装完成后，通过命令，验证是否安装成：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>node -v\n\nnpm -v\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>如果正常显示版本号，即安装成功。</p><h3 id="_2-、nodejs-配置" tabindex="-1"><a class="header-anchor" href="#_2-、nodejs-配置" aria-hidden="true">#</a> [2]、Nodejs 配置</h3><p>Nodejs安装完成之后，默认会将Node.exe的路径，添加到系统的环境变量中，如果没有请手动添加。</p><p>Nodejs 默认的缓存目录和全局安装目录都在系统盘，会占用大量的系统盘空间，所以建议修改，如果不想修改，请跳过此部分内容。</p><h4 id="_1-配置prefix和cache目录" tabindex="-1"><a class="header-anchor" href="#_1-配置prefix和cache目录" aria-hidden="true">#</a> （1）配置prefix和cache目录</h4><p><code>prefix</code> 就是 Nodejs 来全局安装的位置，<code>cache</code> 就是 Nodejs 依赖下载缓存的目录</p><ul><li>改变 npm prefix 全局安装位置</li></ul><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">npm</span> config <span class="token builtin class-name">set</span> prefix <span class="token string">&quot;你的磁盘路径&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>假设你所指定的根目录地址为：<code>C:\\Program Files\\nodejs</code></p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">npm</span> config <span class="token builtin class-name">set</span> prefix “C:<span class="token punctuation">\\</span>Program Files<span class="token punctuation">\\</span>nodejs<span class="token punctuation">\\</span>node_global”\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ul><li>改变 npm cache 缓存位置</li></ul><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">npm</span> config <span class="token builtin class-name">set</span> cache <span class="token string">&quot;你的磁盘路径&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>假设你所指定的根目录地址为：<code>C:\\Program Files\\nodejs</code></p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">npm</span> config <span class="token builtin class-name">set</span> cache  “C:<span class="token punctuation">\\</span>Program Files<span class="token punctuation">\\</span>nodejs<span class="token punctuation">\\</span>node_cache\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h4 id="_2-配置环境变量" tabindex="-1"><a class="header-anchor" href="#_2-配置环境变量" aria-hidden="true">#</a> （2）配置环境变量</h4><p>Nodejs 在安装过程中，会自动配置 Path 环境变量。但这个环境变量只是针对 <code>Node</code> 和 <code>Npm</code> 有效。对于一些全局安装的应用，例如 @vue/cli，如果不配置环境变量，它的相关命令是无法正常执行的。</p><p>右键点击 Windows 左下角的 Windows 图标，选择 <code>系统—&gt;高级系统设置—&gt;环境变量</code>。</p><ol><li>在 <code>系统变量</code> 栏中，点击<code>新建</code>，弹出 <code>编辑系统变量</code> 对话框。</li></ol><ul><li>在 <code>变量名(N)</code> 中，输入变量名称 <code>NODE_PATH</code></li><li>在 <code>变量值(V)</code> 中，输入上一步中指定的 <code>prefix</code> 加上 <code>node_modules</code> 文件夹，如下所示，请根据实际情况修改</li></ul><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>C:<span class="token punctuation">\\</span>Program Files<span class="token punctuation">\\</span>nodejs<span class="token punctuation">\\</span>node_global<span class="token punctuation">\\</span>node_modules\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><div class="custom-container tip"><p class="custom-container-title">说明</p><p>这个值就是上一步中，通过 <strong>“npm config set prefix”</strong> 设置的值。可以，用下面命令查看</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">npm</span> config get prefix\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><blockquote><p>切记，一定要加上 <code>\\node_modules</code>。因为，有些全局应用是安装在 <code>C:\\Program Files\\nodejs\\node_global\\node_modules</code> 目录下</p></blockquote></div><p>点击 <code>编辑系统变量</code> 对话框中的【确定】按钮，保存配置。</p><ol start="2"><li>在 <code>用户变量</code> 栏中， 找到 <code>Path</code> 变量，点击<code>编辑</code>， 弹出 <code>编辑环境变量</code> 对话框</li></ol><p>在 <code>编辑环境变量</code> 对话框中，添加 <code>C:\\Program Files\\nodejs\\node_global\\</code></p><blockquote><p>这个值就是上一步中，通过 <strong>“npm config set prefix”</strong> 设置的值。</p></blockquote><p>至此，Node 相关的环境变量配置完成。</p><h4 id="_3-配置阿里源" tabindex="-1"><a class="header-anchor" href="#_3-配置阿里源" aria-hidden="true">#</a> （3）配置阿里源</h4><p>将 Npm 的下载源，修改为阿里源，可以提升依赖包下载速度，执行一下命令设置。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">npm</span> config <span class="token builtin class-name">set</span> registry https://registry.npm.taobao.org\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="_3-、yarn-简介" tabindex="-1"><a class="header-anchor" href="#_3-、yarn-简介" aria-hidden="true">#</a> [3]、Yarn 简介</h3><p><code>Yarn</code> 是 Facebook 发布的一款取代 <code>npm</code> 的包管理工具。</p><p>Yarn的特点：</p><ul><li>速度超快。Yarn 缓存了每个下载过的包，所以再次使用时无需重复下载。 同时利用并行下载以最大化资源利用率，因此安装速度更快。</li><li>超级安全。在执行代码之前，Yarn 会通过算法校验每个安装包的完整性。</li><li>超级可靠。使用详细、简洁的锁文件格式和明确的安装算法，Yarn 能够保证在不同系统上无差异的工作。</li></ul><h3 id="_4-、yarn-安装" tabindex="-1"><a class="header-anchor" href="#_4-、yarn-安装" aria-hidden="true">#</a> [4]、Yarn 安装</h3><ul><li>方式一：使用 <code>npm</code> 安装</li></ul><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> -g <span class="token function">yarn</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ul><li>方式二：使用安装文件安装</li></ul><p>即在官网中下载exe文件安装（Windows），其它系统根据实际情况安装。</p><h3 id="_5-、yarn-配置" tabindex="-1"><a class="header-anchor" href="#_5-、yarn-配置" aria-hidden="true">#</a> [5]、Yarn 配置</h3><h4 id="_1-配置-yarn-prefix-和-cache目录" tabindex="-1"><a class="header-anchor" href="#_1-配置-yarn-prefix-和-cache目录" aria-hidden="true">#</a> （1）配置 Yarn prefix 和 cache目录</h4><p>使用 Yarn，那么下载依赖包时，将使用 Yarn 的全局 prefix 和 cache目录，同时将 Yarn 的全局安装应用与 Node 进行关联</p><ul><li>改变 Yarn 全局安装位置</li></ul><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">yarn</span> config <span class="token builtin class-name">set</span> global-folder <span class="token string">&quot;你的磁盘路径&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>假设你所指定的根目录为：<code>C:\\Program Files\\yarn</code></p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">yarn</span> config <span class="token builtin class-name">set</span> global-folder <span class="token string">&quot;C:\\Program Files\\yarn\\global&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ul><li>改变 yarn 缓存位置</li></ul><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">yarn</span> config <span class="token builtin class-name">set</span> cache-folder <span class="token string">&quot;你的磁盘路径&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>假设你所指定的根目录为：<code>C:\\Program Files\\yarn</code></p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">yarn</span> config <span class="token builtin class-name">set</span> cache-folder <span class="token string">&quot;C:\\Program Files\\yarn<span class="token entity" title="\\c">\\c</span>ache&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><blockquote><p>或者在你系统盘的用户目录找到 <code>.yarnrc</code> 的文件，打开它，直接进行编辑</p></blockquote><h4 id="_2-配置-yarn-环境变量" tabindex="-1"><a class="header-anchor" href="#_2-配置-yarn-环境变量" aria-hidden="true">#</a> （2）配置 Yarn 环境变量</h4><p>在我们使用<strong>全局安装</strong>包的时候，会在 <code>C:\\Program Files\\yarn\\global</code>（上面的示例路径，要根据自己的实际情况配置） 目录下生成 node_modules.bin 目录</p><p>需要将 <code>C:\\Program Files\\yarn\\global\\node_modules\\.bin</code> 整个目录 添加到<strong>系统环境变量</strong>中去，否则通过 yarn 添加的全局包 在cmd 中是找不到的。</p><p>右键点击 Windows 左下角的 Windows 图标，选择 <code>系统—&gt;高级系统设置—&gt;环境变量</code>。</p><p>在 <code>系统变量</code> 栏中，找到 <code>Path</code> 变量，点击<code>编辑</code>， 弹出 <code>编辑环境变量</code> 对话框</p><p>在 <code>编辑环境变量</code> 对话框中，添加 ``C:\\Program Files\\yarn\\global\\node_modules.bin`</p><p>点击 <code>编辑环境变量</code> 对话框中的【确定】按钮，保存配置。</p><div class="custom-container tip"><p class="custom-container-title">提示</p><p>可以通过下面的命令，检查当前 yarn 的 bin 目录的位置</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">yarn</span> global bin\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></div><h4 id="_3-yarn-配置阿里源量" tabindex="-1"><a class="header-anchor" href="#_3-yarn-配置阿里源量" aria-hidden="true">#</a> （3）Yarn 配置阿里源量</h4><ol><li>查看一下当前源</li></ol><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">yarn</span> config get registry\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ol start="2"><li>切换为淘宝源</li></ol><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">yarn</span> config <span class="token builtin class-name">set</span> registry https://registry.npm.taobao.org\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>',65),ce={render:function(e,a){const n=(0,s.up)("OutboundLink"),ce=(0,s.up)("RouterLink");return(0,s.wg)(),(0,s.iD)(s.HY,null,[o,(0,s._)("p",null,[c,d,l,(0,s._)("a",i,[t,(0,s.Wm)(n)]),p]),r,(0,s._)("p",null,[u,h,m,(0,s._)("a",g,[v,(0,s.Wm)(n)]),b]),k,(0,s._)("p",null,[_,f,x,(0,s._)("a",M,[y,(0,s.Wm)(n)]),j]),w,E,U,(0,s._)("p",null,[N,J,D,(0,s._)("a",q,[A,(0,s.Wm)(n)]),C]),P,(0,s._)("p",null,[F,I,O,V,Y,(0,s._)("a",K,[W,(0,s.Wm)(n)]),H,G,R]),S,L,(0,s._)("div",$,[X,(0,s._)("ul",null,[z,(0,s._)("li",null,[(0,s._)("p",null,[T,(0,s.Wm)(ce,{to:"/documents-athena/%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2.html"},{default:(0,s.w5)((()=>[B])),_:1}),Q])])])]),Z,(0,s._)("p",null,[ee,(0,s._)("a",ae,[ne,(0,s.Wm)(n)]),se]),oe],64)}}}}]);