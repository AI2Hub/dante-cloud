"use strict";(self.webpackChunkeurynome_cloud_document=self.webpackChunkeurynome_cloud_document||[]).push([[815],{8593:(s,e,n)=>{n.r(e),n.d(e,{data:()=>a});const a={key:"v-c6b464d4",path:"/documents/%E6%B7%BB%E5%8A%A0%E6%A8%A1%E5%9D%97.html",title:"添加模块",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"添加一般模块",slug:"添加一般模块",children:[]},{level:2,title:"添加Vue工程",slug:"添加vue工程",children:[]}],filePathRelative:"documents/添加模块.md",git:{updatedTime:null,contributors:[]}}},9375:(s,e,n)=>{n.r(e),n.d(e,{default:()=>o});const a=(0,n(6252).uE)('<h1 id="添加模块" tabindex="-1"><a class="header-anchor" href="#添加模块" aria-hidden="true">#</a> 添加模块</h1><h2 id="添加一般模块" tabindex="-1"><a class="header-anchor" href="#添加一般模块" aria-hidden="true">#</a> 添加一般模块</h2><ol><li><p>在<code>packages</code>目录下，任意位置，新建模块目录。例如：moduleA</p></li><li><p>请参考已有模块，在目录 moduleA 下，新建文件 <code>package.json</code>, <code>rollup.config.js</code>, <code>tsconfig.json</code></p></li></ol><ul><li><code>package.json</code>: Node 工程基础配置</li><li><code>rollup.config.js</code>: Rollup 本模块配置文件</li><li><code>tsconfig.json</code>: Typescript 本模块配置文件</li></ul><div class="custom-container warning"><p class="custom-container-title">注意</p><p><code>package.json</code> 中一定要指定 <code>name</code> 的值。这个值就是以后引用模块，编译模块的核心名称。其它配置请结合实际进行修改和配置。</p></div><ol start="3"><li>在目录 moduleA 下，新建文件夹 <code>src</code>, <code>types</code></li></ol><ul><li><code>src</code>: 源代码放置目录，可以根据自身需求修改。</li><li><code>types</code>: Typescript 定义文件放置目录，可以根据自身需求修改。</li></ul><ol start="4"><li>在工程中找到<code>${project_home}/package.json</code>。在 <code>workspaces</code>属性中添加新增模块的目录。</li></ol><p>以目录 moduleA 为例，在 <code>workspaces</code> 中添加如下目录配置。</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code>   <span class="token property">&quot;workspaces&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n        <span class="token string">&quot;packages/moduleA&quot;</span><span class="token punctuation">,</span>\n        ···\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ol start="5"><li>以上工作完成之后，就可以在控制台中，通过以下命令，执行新增模块的相关命令。</li></ol><p>假设目录 moduleA 中的模块，名称为 <code>@hecate/moduleA</code>。通过以下命令执行相关操作。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">yarn</span> workspace @hecate/moduleA XXX\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><div class="custom-container tip"><p class="custom-container-title">说明</p><ul><li><code>workspace</code>: 因为工程中有多个模块，通过该参数进行区分</li><li><code>@hecate/moduleA</code>: 就是在该模块下，<code>package.json</code> 中 <code>name</code> 属性值。</li><li><code>XXX</code>: 代表的是，在该模块下<code>package.json</code> 中 <code>scripts</code> 属性中定义的命令</li></ul></div><ol start="6"><li>定义简化命令</li></ol><p>上一步中，执行的命令比较长，不方便记忆和使用。可以在工程中找到<code>${project_home}/package.json</code>，在其中<code>scripts</code> 属性中定义简化命令，实现简化命令与一个或多个模块内命令的映射。</p><p>例如：</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>\n    <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;root&quot;</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;workspaces&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n        <span class="token string">&quot;packages/moduleA&quot;</span><span class="token punctuation">,</span>\n        ···\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token property">&quot;h:mA&quot;</span><span class="token operator">:</span> <span class="token string">&quot;yarn workspace @hecate/moduleA&quot;</span><span class="token punctuation">,</span>\n        ···\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>那么，执行以下命令</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">yarn</span> h:mA XXX\n\n// 等价于\n\n<span class="token function">yarn</span> workspace @hecate/moduleA XXX\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><blockquote><p>以上只是示例，可以结合实际定义自己的简化命令。</p></blockquote><ol start="7"><li>其它模块应用该模块。</li></ol><p>可以通过以下命令，实现其它模块对该模块的依赖引用。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>// 将模块@hecate/moduleA 添加到 模块中@hecate/moduleA\nlerna <span class="token function">add</span> @hecate/moduleA --scope @hecate/moduleB\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="添加vue工程" tabindex="-1"><a class="header-anchor" href="#添加vue工程" aria-hidden="true">#</a> 添加Vue工程</h2><p>将一个单独的Vue工程，添加到工程中，作为一个模块使用。具体方法与 <a href="#%E6%B7%BB%E5%8A%A0%E4%B8%80%E8%88%AC%E6%A8%A1%E5%9D%97">添加一般模块</a> 类似。</p><ol><li><p>新建一个Vue工程，使用 Vue Cli 或任意你喜欢的方式都可以。</p></li><li><p>在<code>packages</code>目录下，任意位置，新建模块目录。</p></li><li><p>将刚刚新建的Vue工程代码拷贝至，新建的模块目录下。</p></li><li><p>按照<a href="#%E6%B7%BB%E5%8A%A0%E4%B8%80%E8%88%AC%E6%A8%A1%E5%9D%97">添加一般模块</a>中，第4~7步的说明，同样操作一遍即可。</p></li></ol><div class="custom-container tip"><p class="custom-container-title">说明</p><p>使用 Vue Cli 会新建标准的 Vue 工程，<code>package.json</code> 中会包含完整的依赖包。只用 <code>Monorepo</code> 方式管理项目，可以将共性的依赖包放到模块外部进行统一管理，各个模块只需要管理自身所需要的依赖包即可。</p><p>因此，可以对比 <code>@herodotus/ui</code> 模块的 <code>package.json</code> 的依赖定义，将新建的 Vue工程中，重复的依赖去掉。</p></div>',28),o={render:function(s,e){return a}}}}]);