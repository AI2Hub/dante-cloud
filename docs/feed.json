{
  "version": "https://jsonfeed.org/version/1.1",
  "title": "Eurynome Cloud",
  "home_page_url": "https://herodotus.cn/",
  "feed_url": "https://herodotus.cn/feed.json",
  "description": "Eurynome Cloud 企业级微服务架构和服务能力开发平台在线文档",
  "author": {
    "name": "码匠君"
  },
  "items": [
    {
      "title": "组件配置",
      "url": "https://herodotus.cn/config/component/",
      "id": "https://herodotus.cn/config/component/",
      "content_html": "<h1 id=\"组件配置\"> 组件配置</h1>\n<h2 id=\"spring-boot\"> Spring Boot</h2>\n<h3 id=\"v2-5-5\"> v2.5.5</h3>\n<p><a href=\"https://docs.spring.io/spring-boot/docs/current/reference/html/application-properties.html#application-properties\" target=\"_blank\" rel=\"noopener noreferrer\">官网</a></p>\n<h2 id=\"camunda\"> Camunda</h2>\n<h3 id=\"v7-15-0\"> v7.15.0</h3>\n<p><a href=\"https://docs.camunda.org/manual/7.15/user-guide/spring-boot-integration/configuration/\" target=\"_blank\" rel=\"noopener noreferrer\">官网</a></p>\n",
      "date_published": "2021-10-27T16:13:57.000Z",
      "date_modified": "2021-10-28T15:24:29.000Z",
      "authors": [
        {
          "name": "码匠君"
        }
      ],
      "tags": []
    },
    {
      "title": "配置",
      "url": "https://herodotus.cn/config/",
      "id": "https://herodotus.cn/config/",
      "content_html": "<h1 id=\"配置\"> 配置</h1>\n<div><p>说明</p>\n<p>一下内容为 <code>eurynome-cloud-environment.yaml</code> 配置</p>\n</div>\n<h2 id=\"herodotus-environment\"> herodotus.environment</h2>\n<h3 id=\"logstash-server-addr\"> logstash-server-addr</h3>\n<ul>\n<li>Type: <code>String</code> | <code>Boolean</code></li>\n<li>Default: <code>false</code></li>\n</ul>\n<p>日志中心Logstash连接TCP地址。<code>Logstash</code>连接默认端口：5044</p>\n<ul>\n<li>Example：<code>127.0.0.1:5044</code></li>\n</ul>\n<div><p>提示</p>\n<p>如果设置成<code>false</code>，则关闭日志收集组件与日志中心<code>Logstash</code>的连接。如果无法连接<code>Logstash</code>则会抛错</p>\n</div>\n<h3 id=\"gateway-server-addr\"> gateway-server-addr</h3>\n<ul>\n<li>Type: <code>String</code></li>\n<li>Default: <code>&quot;&quot;</code></li>\n</ul>\n<p>服务网关地址，Gateway服务默认端口：8847</p>\n<ul>\n<li>Example：<code>http://localhost:8847</code></li>\n</ul>\n<h3 id=\"database-host\"> database.host</h3>\n<ul>\n<li>Type: <code>String</code></li>\n<li>Default: <code>&quot;&quot;</code></li>\n</ul>\n<p>数据库连接地址。</p>\n<ul>\n<li>Example：<code>127.0.0.1</code></li>\n</ul>\n<h3 id=\"database-port\"> database.port</h3>\n<ul>\n<li>Type: <code>String</code></li>\n<li>Default: <code>&quot;&quot;</code></li>\n</ul>\n<p>数据库连接端口。</p>\n<ul>\n<li>Example：<code>5432</code></li>\n</ul>\n<h3 id=\"database-name\"> database.name</h3>\n<ul>\n<li>Type: <code>String</code></li>\n<li>Default: <code>&quot;&quot;</code></li>\n</ul>\n<p>数据库名。</p>\n<h3 id=\"database-username\"> database.username</h3>\n<ul>\n<li>Type: <code>String</code></li>\n<li>Default: <code>&quot;&quot;</code></li>\n</ul>\n<p>数据库登录用户名。</p>\n<h3 id=\"database-password\"> database.password</h3>\n<ul>\n<li>Type: <code>String</code></li>\n<li>Default: <code>&quot;&quot;</code></li>\n</ul>\n<p>数据库登录密码。</p>\n<h3 id=\"redis-host\"> redis.host</h3>\n<ul>\n<li>Type: <code>String</code></li>\n<li>Default: <code>&quot;&quot;</code></li>\n</ul>\n<p><code>Redis</code>连接地址。</p>\n<ul>\n<li>Example：<code>127.0.0.1</code></li>\n</ul>\n<h3 id=\"redis-port\"> redis.port</h3>\n<ul>\n<li>Type: <code>String</code></li>\n<li>Default: <code>6379</code></li>\n</ul>\n<p><code>Redis</code>连接端口。</p>\n<ul>\n<li>Example：<code>6379</code></li>\n</ul>\n<h3 id=\"redis-password\"> redis.password</h3>\n<ul>\n<li>Type: <code>String</code></li>\n<li>Default: <code>&quot;&quot;</code></li>\n</ul>\n<p><code>Redis</code>连接密码。</p>\n<h3 id=\"kafka-bootstrap-servers\"> kafka.bootstrap-servers</h3>\n<ul>\n<li>Type: <code>String</code></li>\n<li>Default: <code>&quot;&quot;</code></li>\n</ul>\n<p><code>Kafka</code>连接地址连接地址。<code>Kafka</code>连接默认端口<code>9092</code></p>\n<ul>\n<li>Example：<code>127.0.0.1:9092</code></li>\n</ul>\n<h2 id=\"herodotus-switch\"> herodotus.switch</h2>\n<h3 id=\"database-ddl-auto\"> database.ddl-auto</h3>\n<ul>\n<li>Type: <code>Enum</code></li>\n<li>Default: <code>&quot;&quot;</code></li>\n<li>Values: <code>create</code>,<code>create-drop</code>,<code>update</code>,<code>validate</code>,<code>none</code></li>\n</ul>\n<p>配置 <code>Spring Data JPA</code> 自动DDL处理状态。参阅：[数据初始化](../documents/数据初始化.md#Spring Data JPA 更换数据库)</p>\n<h3 id=\"database-init-mode\"> database.init-mode</h3>\n<ul>\n<li>Type: <code>Enum</code></li>\n<li>Default: <code>&quot;&quot;</code></li>\n<li>Values: <code>never</code>,<code>always</code>,<code>embedded</code></li>\n</ul>\n<p>配置 <code>Spring Data JPA</code> 自动DDL处理状态。参阅：[数据初始化](../documents/数据初始化.md#Spring Data JPA 初始化数据库)</p>\n<h3 id=\"database-use-second-level-cache\"> database.use-second-level-cache</h3>\n<ul>\n<li>Type: <code>Boolean</code></li>\n<li>Default: <code>false</code></li>\n</ul>\n<p>是否开启 <code>Spring Data JPA</code> 二级缓存</p>\n<h3 id=\"database-show-sql\"> database.show-sql</h3>\n<ul>\n<li>Type: <code>Boolean</code></li>\n<li>Default: <code>false</code></li>\n</ul>\n<p>是否在日志中输出 <code>Hibernate</code> HQL 调试日志</p>\n<h3 id=\"database-format-sql\"> database.format-sql</h3>\n<ul>\n<li>Type: <code>Boolean</code></li>\n<li>Default: <code>false</code></li>\n</ul>\n<p>是否对日志中输出 <code>Hibernate</code> 的 HQL 调试日志进行格式美化</p>\n<h3 id=\"database-generate-statistics\"> database.generate-statistics</h3>\n<ul>\n<li>Type: <code>Boolean</code></li>\n<li>Default: <code>false</code></li>\n</ul>\n<p>是否开启 <code>Hibernate</code> SQL 运行分析</p>\n<h3 id=\"swagger-enabled\"> swagger.enabled</h3>\n<ul>\n<li>Type: <code>Boolean</code></li>\n<li>Default: <code>false</code></li>\n</ul>\n<p>是否开启 <code>Swagger</code> API 文档</p>\n<h2 id=\"herodotus-management\"> herodotus.management</h2>\n<h3 id=\"log-center-server-addr\"> log-center.server-addr</h3>\n<ul>\n<li>Type: <code>String</code> | <code>Boolean</code></li>\n<li>Default: <code>false</code></li>\n</ul>\n<p>日志中心Logstash连接TCP地址。<code>Logstash</code>连接默认端口：5044。具体值与<code>herodotus.environment.logstash-server-addr</code> 相同</p>\n<ul>\n<li>Example：<code>127.0.0.1:5044</code></li>\n</ul>\n<h3 id=\"log-center-loggers\"> log-center.loggers</h3>\n<ul>\n<li>Type: <code>Map&lt;String, LogLevel&gt;</code></li>\n<li>Default: <code>null</code></li>\n</ul>\n<p>指定输出到日志中心的日志级别，以及具体日志内容</p>\n<ul>\n<li>Example：<code>127.0.0.1:5044</code></li>\n</ul>\n<div><pre><code><span>cn.herodotus.eurynome</span><span>:</span> debug\n<span>org.springframework.security</span><span>:</span> debug\n<span>com.alibaba.nacos.client.naming</span><span>:</span> error\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div>",
      "date_published": "2021-10-27T16:13:57.000Z",
      "date_modified": "2021-10-28T15:24:29.000Z",
      "authors": [
        {
          "name": "码匠君"
        }
      ],
      "tags": []
    },
    {
      "title": "更换数据库",
      "url": "https://herodotus.cn/guide/change-database/",
      "id": "https://herodotus.cn/guide/change-database/",
      "content_html": "<h1 id=\"更换数据库\"> 更换数据库</h1>\n<h2 id=\"步骤一-判断是否需要添加数据库方言配置\"> 步骤一：判断是否需要添加数据库方言配置</h2>\n<p><strong>Eurynome Cloud</strong> 使用数据库&quot;方言&quot;配置模式，以达到规范化数据库配置,减少参数修改,快速更换数据库的目的。</p>\n<p>目前，<strong>Eurynome Cloud</strong> 默认提供<code>postgresql</code>和<code>mysql8</code>,<code>mysql57</code>三种方言配置。在Nacos的配置中可以找到<code>eurynome-cloud-database-postgresql.yaml</code>和<code>eurynome-cloud-database-mysql8.yaml</code>,<code>eurynome-cloud-database-mysql57.yaml</code>与之对应。</p>\n<p>如果你所使用的数据库，<code>postgresql</code>和<code>mysql8</code>,<code>mysql57</code>三种方言配置并不能满足，那么请按照下面几步操作；如果能满足请跳过。</p>\n<ol>\n<li>\n<p>在Nacos中新建一个按照格式 <code>eurynome-cloud-database-&lt;database.type&gt;.yaml</code> 命名的配置。</p>\n</li>\n<li>\n<p>复制下面的配置内容到该配置中，注意不要改变格式以及具体配置名。</p>\n</li>\n</ol>\n<div><pre><code><span>herodotus</span><span>:</span>\n  <span>database-information</span><span>:</span>\n    <span>platform</span><span>:</span> postgresql\n    <span>driver-class-name</span><span>:</span> org.postgresql.Driver\n    <span>dialect</span><span>:</span> org.hibernate.dialect.PostgreSQL10Dialect\n    <span>url</span><span>:</span> jdbc<span>:</span>postgresql<span>:</span>//$<span>{</span>herodotus.environment.database.host<span>}</span><span>:</span>$<span>{</span>herodotus.environment.database.port<span>}</span>/$<span>{</span>herodotus.environment.database.name<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><ol start=\"3\">\n<li>根据自己使用的数据库，修改配置中对应的的信息。</li>\n</ol>\n<div><p>说明</p>\n<p>eurynome-cloud-database-&lt;database.type&gt;.yaml中，主要包含针对不同类型数据库，所使用的JDBC Driver等相关配置信息。</p>\n<ul>\n<li>platform：指定数据库类型。</li>\n</ul>\n<blockquote>\n<p>注意：platform具体值来源于枚举类<code>org.springframework.orm.jpa.vendor.Database</code>，请使用全部小写字母值进行配置。这个值不分版本，所以mysql5数据库和mysql8数据库均是使用<code>mysql</code>，目前支持的值如下：\n<code>db2</code>,<code>derby</code>,<code>h2</code>,<code>hana</code>,<code>hsql</code>,<code>informix</code>,<code>mysql</code>,<code>oracle</code>,<code>postgresql</code>,<code>sql_server</code>,<code>sybase</code></p>\n</blockquote>\n<ul>\n<li>driver-class-name：数据库驱动类名。</li>\n<li>dialect: 指定Hibernate针对不同的数据库的Dialect，org.hibernate.dialect 包下可以找到具体数据库对应的dialect。</li>\n<li>url：数据库连接URL。</li>\n</ul>\n<blockquote>\n<p>注意：这里的的URL是通过配置<code>eurynome-cloud-environment.yaml</code>，中的herodotus.environment.database.host,port,name等三个值组装而成。如果新增方言配置，不管具体数据库URL内容是什么，一定确保数据库地址,端口,数据库名使用<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span><span>h</span><span>ero</span><span>d</span><span>o</span><span>t</span><span>u</span><span>s</span><span>.</span><span>e</span><span>n</span><span style=\"margin-right:0.03588em;\">v</span><span>i</span><span>ro</span><span>nm</span><span>e</span><span>n</span><span>t</span><span>.</span><span>d</span><span>a</span><span>t</span><span>aba</span><span>se</span><span>.</span><span>h</span><span>os</span><span>t</span></span><span>,</span></span></span></span>{herodotus.environment.database.port},${herodotus.environment.database.name}三个站位符替换，否则*-environment.yaml中配置的值将不再生效。</p>\n</blockquote>\n</div>\n<h2 id=\"步骤二-修改环境参数\"> 步骤二：修改环境参数</h2>\n<p>在根据你所使用的 <a href=\"./profile-design.html\">Maven多环境</a>，找到 <code>Nacos</code> 对应 <code>Group</code> 下的<code>eurynome-cloud-environment.yaml</code>配置，修改数据库相关的<code>host</code>,<code>port</code>,<code>name</code>,<code>username</code>,<code>password</code>等几个参数的值。</p>\n<div><pre><code><span>herodotus</span><span>:</span>\n  <span>environment</span><span>:</span>\n    <span>logstash-server-addr</span><span>:</span> 127.0.0.1<span>:</span><span>5044</span>\n    <span>gateway-server-addr</span><span>:</span> http<span>:</span>//localhost<span>:</span><span>8847</span>\n    <span>database</span><span>:</span>\n      <span>host</span><span>:</span> 127.0.0.1\n      <span>port</span><span>:</span> <span>5432</span>\n      <span>name</span><span>:</span> herodotus\n      <span>username</span><span>:</span> XXXXX\n      <span>password</span><span>:</span> XXXXX\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><h2 id=\"步骤三-修改pom-xml\"> 步骤三：修改pom.xml</h2>\n<p>找到工程根目录下的<code>pom.xml</code>, 根据你所使用的 <a href=\"./profile-design.html\">Maven多环境</a>找到对应的<code>&lt;profiles&gt;</code>, 修改<code>&lt;database.type&gt;</code>属性值。</p>\n<div><pre><code><span><span><span>&lt;</span>database.type</span><span>></span></span>postgresql<span><span><span>&lt;/</span>database.type</span><span>></span></span>\n</code></pre>\n<div><span>1</span><br></div></div><div><p>注意</p>\n<p>该值与步骤一中，<code>eurynome-cloud-database-&lt;database.type&gt;.yaml</code>的值对应。</p>\n<p>在Maven编译的过程中，<code>&lt;database.type&gt;</code>的值会作为参数传递到各个服务的<code>boostrap.yml</code>配置中，与<code>boostrap.yml</code>中已有的信息拼装成Nacos中对应的配置名。通过这种方式实现Maven多环境,Nacos配置,不同数据库配置的联动</p>\n<div><pre><code><span>-</span> <span>data-id</span><span>:</span> eurynome<span>-</span>cloud<span>-</span>database<span>-</span>@database.type@.yaml\n  <span>group</span><span>:</span> common\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div></div>\n<h2 id=\"步骤四-添加数据库jdbc-driver\"> 步骤四：添加数据库JDBC Driver</h2>\n<p>目前，系统代码已经包含 <code>PostgreSQL</code> , <code>MySQL</code> (支持 <code>MySQL5</code> 和 <code>MySQL8</code> )和 <code>H2</code> 三种数据库的<code>JDBC Driver</code>, 如果你使用数据库不在此范围内，那么就需要在代码包<code>eurynome-cloud-data</code>的<code>pom.xml</code>中添加对应数据库的<code>JDBC Driver</code>。</p>\n<h2 id=\"步骤五-编译工程代码\"> 步骤五：编译工程代码</h2>\n<p>以上步骤完成之后，使用<code>mvn package</code>或<code>mvn install</code>命令，重新编译工程。</p>\n<div><p>警告</p>\n<p>这一步非常重要，因为<code>Maven</code>无法真正做到与<code>yml</code>配置文件的传参，只有通过编译，在编译过程中用<code>pom.xml</code>中<code>&lt;database.type&gt;</code>的值，替换yml配置文件中的<code>@database.type@</code>模拟一种参数传递。</p>\n</div>\n<p>修改配置之后，参考<a href=\"./data-initialization.html\">数据初始化</a>章节进行数据库初始化工作。</p>\n<div><p>提示</p>\n<p>目前仅提供 <code>PostgreSQL</code> 和 <code>MySQL</code> 两种数据库对应的数据初始化脚本，其它数据库需要自己额外处理。如需要使用<code>Spring Data JPA</code>初始化机制，需要手动修改<code>spring.sql.init.*</code>相关参数。</p>\n</div>\n<h2 id=\"步骤六-修改工作流服务数据库类型\"> 步骤六：修改工作流服务数据库类型</h2>\n<p>在 <code>eurynome-cloud-bpmn-ability</code> 模块中，找到<code>bootstrap.yml</code>。根据你所使用的数据库，修改配置<code>camunda.bpm.database.type</code>的值。</p>\n<div><p>说明</p>\n<p><code>camunda.bpm.database.type</code>支持的值有: <code>h2</code>, <code>mysql</code>, <code>mariadb</code>, <code>oracle</code>, <code>postgres</code>, <code>mssql</code>, <code>db2</code>.</p>\n</div>\n",
      "date_published": "2021-10-27T16:13:57.000Z",
      "date_modified": "2021-10-28T15:24:29.000Z",
      "authors": [
        {
          "name": "码匠君"
        }
      ],
      "tags": []
    },
    {
      "title": "系统配置",
      "url": "https://herodotus.cn/config/system/",
      "id": "https://herodotus.cn/config/system/",
      "content_html": "<h1 id=\"系统配置\"> 系统配置</h1>\n",
      "date_published": "2021-10-27T16:13:57.000Z",
      "date_modified": "2021-10-28T15:24:29.000Z",
      "authors": [
        {
          "name": "码匠君"
        }
      ],
      "tags": []
    },
    {
      "title": "常用命令",
      "url": "https://herodotus.cn/guide/common-commands/",
      "id": "https://herodotus.cn/guide/common-commands/",
      "content_html": "<h1 id=\"常用命令\"> 常用命令</h1>\n<h2 id=\"前端工程涉及命令\"> 前端工程涉及命令</h2>\n<h3 id=\"指定包\"> 指定包</h3>\n<p>指定包，在某个包下执行 yarn 命令</p>\n<div><pre><code><span>yarn</span> ws:**\n\n// 例如：\n// 添加包（从npm中添加）\n<span>yarn</span> ws:example <span>add</span> lodash -D\n\n// 删除包\n<span>yarn</span> ws:example remove lodash\n\n// 运行example\n<span>yarn</span> ws:example serve\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><h3 id=\"依赖工程内组件\"> 依赖工程内组件</h3>\n<p>添加本工程中的组件作为依赖包（尚未上传至 npm）</p>\n<div><pre><code>// 将工程中的h-button 添加至example中\n// 注意：不支持批量添加多个，要一个一个加\nlerna <span>add</span> @hecate/h-button --scope @hecate/example\n\n// 删除本工程中的组件，使用yarn命令即可\n<span>yarn</span> ws:example remove @hecate/h-button\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><h3 id=\"根目录添加依赖\"> 根目录添加依赖</h3>\n<p>在根目录添加依赖包</p>\n<div><pre><code>// -W 意思是指工作区，想要操作工程级的包，这个参数不能缺\n// -D 指定devDependencies的意思\n// 添加组件\n<span>yarn</span> <span>add</span> lodash -D -W\n\n// 删除组件\n<span>yarn</span> <span>add</span> lodash -W\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><h3 id=\"升级依赖包\"> 升级依赖包</h3>\n<div><pre><code><span>yarn</span> upgrade-interactive --latest\n\n// 升级全局依赖包\n<span>yarn</span> global upgrade-interactive --latest\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><h3 id=\"编译所有组件\"> 编译所有组件</h3>\n<div><pre><code>lerna run lib\n</code></pre>\n<div><span>1</span><br></div></div><h3 id=\"清空组件-dist\"> 清空组件 dist</h3>\n<div><pre><code>lerna run clean\n</code></pre>\n<div><span>1</span><br></div></div><h3 id=\"清除组件中的-node-modules\"> 清除组件中的 node_modules</h3>\n<div><pre><code>lerna clean\n</code></pre>\n<div><span>1</span><br></div></div><h3 id=\"让各个组件中重新关联依赖包\"> 让各个组件中重新关联依赖包</h3>\n<div><pre><code>lerna bootstrap 或 <span>yarn</span> <span>install</span>\n</code></pre>\n<div><span>1</span><br></div></div><h3 id=\"提交代码\"> 提交代码</h3>\n<div><pre><code><span>yarn</span> push\n</code></pre>\n<div><span>1</span><br></div></div>",
      "date_published": "2021-10-27T16:13:57.000Z",
      "date_modified": "2021-10-28T15:24:29.000Z",
      "authors": [
        {
          "name": "码匠君"
        }
      ],
      "tags": []
    },
    {
      "title": "数据初始化",
      "url": "https://herodotus.cn/guide/data-initialization/",
      "id": "https://herodotus.cn/guide/data-initialization/",
      "content_html": "<h1 id=\"数据初始化\"> 数据初始化</h1>\n<h2 id=\"知识铺垫\"> 知识铺垫</h2>\n<h3 id=\"基础原理\"> 基础原理</h3>\n<p><strong>Eurynome Cloud</strong> 核心数据访问层使用Spring Boot生态中的<code>spring-boot-starter-data-jpa</code>组件，<code>spring-boot-starter-data-jpa</code> 核心依赖是 <code>Spring Data JPA</code>。</p>\n<p><code>JPA</code>(<code>Java Persistence API</code>)意即Java持久化API，是Sun官方在JDK5.0后提出的Java持久化规范。<code>Spring Data JPA</code> 默认使用 <code>Hibernate</code> 作为 <code>JPA</code> 实现。参阅：<a href=\"./../knowledge/spring-data-jpa.html#JPA\">Spring Data JPA</a></p>\n<p><code>Spring Data JPA</code> 利用 <code>Hibernate</code> 多数据库支持能力实现不同类型数据库的支持，同时使用 <code>Hibernate</code> 的 <code>hbm2ddl</code> 机制 实现数据库表的自动创建。除此以外，<code>Spring Data JPA</code> 提供了数据库SQL脚本自动执行机制，实现了数据脚本的初始化和表结构等创建功能。</p>\n<h3 id=\"spring-data-jpa-更换数据库\"> Spring Data JPA 更换数据库</h3>\n<p>通过修改<code>spring-boot-starter-data-jpa</code>对应的配置参数就可以达成更换数据库的目的。主要涉及需要修改的配置参数如下表所示：</p>\n<table>\n<thead>\n<tr>\n<th>配置</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>spring.datasource.driver-class-name</td>\n<td>数据库Driver Class，不同的数据库驱动不同</td>\n</tr>\n<tr>\n<td>spring.datasource.url</td>\n<td>数据库访问连接，不同数据连接格式也不同</td>\n</tr>\n<tr>\n<td>spring.datasource.username</td>\n<td>数据库访问用户名，如果相同可以不用修改</td>\n</tr>\n<tr>\n<td>spring.datasource.password</td>\n<td>数据库访问密码，如果相同可以不用修改</td>\n</tr>\n<tr>\n<td>spring.jpa.database</td>\n<td>选择数据库类型，具体类型与枚举<code>org.springframework.orm.jpa.vendor.Database</code>中的值对应，使用小写值即可</td>\n</tr>\n<tr>\n<td>spring.jpa.properties.hibernate.dialect</td>\n<td>选择数据库类型对应的dialect，在 <code>org.hibernate.dialect</code> 包下可以找到具体数据库对应的dialect</td>\n</tr>\n<tr>\n<td>spring.jpa.hibernate.ddl-auto</td>\n<td>设置hibernate初始化操作的类型，具体参见下表</td>\n</tr>\n</tbody>\n</table>\n<p>这里要特别注意 <code>spring.jpa.hibernate.ddl-auto</code> 参数。</p>\n<p><code>spring.jpa.hibernate.ddl-auto</code> 参数包含以下几个值，具体含义见下表：</p>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>create</code></td>\n<td>每次加载hibernate时都会删除上一次的生成的表，再重新根据model(与数据库表对应的实体)生成表，因此可能会导致数据丢失。</td>\n</tr>\n<tr>\n<td><code>create-drop</code></td>\n<td>每次加载hibernate时根据model类生成表，服务一关闭，表就自动删除。该设置适用于演示环境等特殊场景使用</td>\n</tr>\n<tr>\n<td><code>update</code></td>\n<td>最常用的属性，第一次加载hibernate时根据model类会自动建立起表的结构，再次使用时自动更新表结构，原有数据不会清空。</td>\n</tr>\n<tr>\n<td><code>validate</code></td>\n<td>每次加载hibernate时，会校验数据与数据库的字段类型是否相同，字段不同会报错。</td>\n</tr>\n<tr>\n<td><code>none</code></td>\n<td>不进行任何操作</td>\n</tr>\n</tbody>\n</table>\n<p>如果想要使用<code>spring-boot-starter-data-jpa</code>提供SQL自动初始化机制，那么还需要额外修改以下配置：</p>\n<blockquote>\n<p>通过以上配置参数的修改就可以进行数据库的切换，以及数据库表的创建.</p>\n</blockquote>\n<h3 id=\"spring-data-jpa-初始化数据库\"> Spring Data JPA 初始化数据库</h3>\n<p><code>Spring Data JPA</code> 还提供的数据库SQL脚本的执行机制。将已生成好的数据库SQL脚本，放入到代码工程的<code>resources</code>目录下，按照指定格式命名，通过修改配置就可以实现SQL脚本的自动执行。</p>\n<p>具体SQL文件名的格式为：<code>schema-${platform}.sql</code> 和 <code>data-${platform}.sql</code>。<code>platform</code> 是用来指定不同的数据库类型，以此来实现不同数据库脚本的切换。</p>\n<ul>\n<li><code>schema-${platform}.sql</code>：主要放置数据库定义语言(<code>DDL</code>)SQL脚本，例如：数据库表,视图,存储过程等。</li>\n<li><code>data-${platform}.sql</code>：主要放置数据操纵语言(<code>DML</code>)SQL脚本，例如：最经常用到的 SELECT,UPDATE,INSERT,DELETE。</li>\n</ul>\n<blockquote>\n<p>由此可见，<code>schema-${platform}.sql</code> 是先于 <code>data-${platform}.sql</code> 执行的。</p>\n</blockquote>\n<p>主要涉及需要修改的配置参数如下表所示：</p>\n<table>\n<thead>\n<tr>\n<th>配置</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>spring.sql.init.mode</td>\n<td>用于控制脚本执行状态。</td>\n</tr>\n<tr>\n<td>spring.sql.init.platform</td>\n<td>数据库类型，主要用于在data-locations 和 schema-locations 中定位不同数据库的脚本</td>\n</tr>\n<tr>\n<td>spring.sql.init.data-locations</td>\n<td>DML SQL文件路径</td>\n</tr>\n<tr>\n<td>spring.sql.init.data-locations</td>\n<td>DDL SQL文件路径</td>\n</tr>\n</tbody>\n</table>\n<p>这里要特别注意 <code>spring.sql.init.mode</code> 参数。</p>\n<p><code>spring.sql.init.mode</code> 参数包含以下几个值，具体含义见下表：</p>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>always</td>\n<td>总是执行，相当于开启</td>\n</tr>\n<tr>\n<td>never</td>\n<td>不执行，相当于关闭</td>\n</tr>\n<tr>\n<td>embedded</td>\n<td>仅初始化嵌入式数据库，特殊需求和设计会用到</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"特别说明\"> 特别说明</h3>\n<div><p>警告</p>\n<p><code>Spring Data JPA</code> 既可以通过 <code>Hibernate</code> 的机制进行数据库表的创建，也可以通过<code>sql.init</code>的方式进行数据库表以及数据初始化的创建。这两者是各自独立的,没有任何必然联系的。具体如何使用就要看设计者的考虑。</p>\n<p>两者的执行顺序不同，如果要两者同时使用一定要注意执行顺序，否则很容易导致运行出错。具体的顺序是：</p>\n<p><code>schema-${platform}.sql</code> &gt; <code>data-${platform}.sql</code> &gt; <code>hbm2ddl</code>。</p>\n</div>\n<h2 id=\"操作步骤\"> 操作步骤</h2>\n<p><strong>Eurynome Cloud</strong> 数据库表创建和默认数据的初始化，就是使用 <code>Spring Data JPA</code> 自身的机制实现。</p>\n<p>在 <strong>Eurynome Cloud</strong> 数据库表创建和默认数据的初始化过程中, 主要会进行以下几项操作。</p>\n<ul>\n<li>创建核心业务表</li>\n<li>扫描已运行服务中所有的<code>RestController</code>接口，将接口数据转换为权限数据，并汇总至用户中心服务统一存储和管理。</li>\n<li>系统默认数据，如用户,角色等数据的初始化。</li>\n</ul>\n<div><p>注意</p>\n<p>具体开始之前，一定要确保所有前序工作已经完成。参阅：<a href=\"./deployment.html#后端运行\">数据库初始化前序工作</a></p>\n</div>\n<h3 id=\"步骤一-创建数据表\"> 步骤一：创建数据表</h3>\n<ol>\n<li>\n<p>进入Nacos管理界面。找到您所使用的对应 <code>多环境</code> 下的 <code>eurynome-cloud-environment.yaml</code> 配置文件。例如，您当前使用的是 <code>development</code> 环境，那么在Nacos后台管理中，找到 <code>Group</code> 是 <code>development</code> 的 <code>eurynome-cloud-environment.yaml</code> 配置。多环境配置，参阅：<a href=\"./多环境配置.html\">多环境配置</a></p>\n</li>\n<li>\n<p>设置 <code>eurynome-cloud-environment.yaml</code>配置文件中属性 <code>herodotus.switch.database.ddl-auto</code> 的值为 <code>create</code> 或 <code>update</code></p>\n</li>\n</ol>\n<div><p>注意</p>\n<ul>\n<li>如果是初次部署，或者想将已有表重新创建，那么将 <code>herodotus.switch.database.ddl-auto</code> 的值设置为 <code>create</code>。</li>\n<li>如果是已经开始使用系统了，想保留已有的数据，只做更新，那么将 <code>herodotus.switch.database.ddl-auto</code> 的值设置为 <code>update</code>。</li>\n</ul>\n</div>\n<ol start=\"3\">\n<li>点击<code>发布</code>按钮，发布配置，让配置生效。</li>\n</ol>\n<div><p>警告</p>\n<ul>\n<li>\n<p><strong>正式环境一定要提前做好数据备份</strong>。</p>\n</li>\n<li>\n<p>如果是<code>MySQL</code>数据库的初次部署，那么最好将 <code>herodotus.switch.database.ddl-auto</code> 的值设置为 <code>update</code>，否则就会出错。</p>\n</li>\n<li>\n<p><code>herodotus.switch.database.ddl-auto</code> 的值设置为 <code>update</code>, 再次运行服务，由于 <code>Hibernate</code> 不同方言实现逻辑的不同，在有些数据库下运行，例如：<code>PostgreSQL</code>, 对于某些兼容性问题，只是输出告警；在某些数据库下运行，例如 MySQL，对于某些兼容性问题，会直接抛出Exception。所以出现这种情况，只要服务继续在运行就不是系统BUG；如果出错直接导致服务运行停止，那么请报 <code>ISSUE</code>。参阅：<a href=\"./../others/mysql.html\">MySQL常见问题</a></p>\n</li>\n</ul>\n</div>\n<ol start=\"4\">\n<li>运行 <code>UpmsApplication</code> 服务。</li>\n</ol>\n<p><code>UpmsApplication</code> 服务第一次正常运行之后，所有核心业务表都已经创建，<code>UpmsApplication</code> 服务中所有接口都已经转换为权限数据存入<code>sys_authority</code>表中。</p>\n<blockquote>\n<p>如果看到有数据库表创建，同时<code>sys_authority</code>表中有数据，证明数据库表创建成功。</p>\n</blockquote>\n<h3 id=\"步骤二-初始默认数据\"> 步骤二：初始默认数据</h3>\n<h4 id=\"方式一-自动初始化\"> 方式一：自动初始化</h4>\n<ol>\n<li>\n<p>停止<code>UpmsApplication</code> 服务</p>\n</li>\n<li>\n<p>进入Nacos管理界面。找到您所使用的对应 <code>多环境</code> 下的 <code>eurynome-cloud-environment.yaml</code> 配置文件。</p>\n</li>\n<li>\n<p>设置 <code>eurynome-cloud-environment.yaml</code> 配置文件中属性 <code>herodotus.switch.database.ddl-auto</code> 的值为 <code>update</code> 或 <code>none</code></p>\n</li>\n<li>\n<p>设置 <code>eurynome-cloud-environment.yaml</code> 配置文件中属性 <code>herodotus.switch.database.init-mode</code> 的值为 <code>always</code></p>\n</li>\n<li>\n<p>点击<code>发布</code>按钮，发布配置，让配置生效。</p>\n</li>\n<li>\n<p>如果默认使用的不是 <code>PostgreSQL</code> 数据库，需要修改<code>${project_home}/services/eurynome-cloud-upms-ability/resources/bootstrap.yml</code> 中 <code>spring.sql.init.data-locations</code> 配置，放开您所使用数据库对应的SQL脚本。注释掉其它SQL脚本</p>\n</li>\n<li>\n<p>再次运行 <code>UpmsApplication</code> 服务。</p>\n</li>\n</ol>\n<p><code>UpmsApplication</code> 服务再一次正常运行之后，如果<code>sys_user</code>,<code>sys_role</code>,<code>sys_role_authority</code>等表中都都已经有数据了，证明数据初始化成功。</p>\n<h4 id=\"方式二-手动初始化\"> 方式二：手动初始化</h4>\n<ol>\n<li>\n<p>设置 <code>eurynome-cloud-environment.yaml</code> 配置文件中属性 <code>herodotus.switch.database.ddl-auto</code> 的值为 <code>update</code> 或 <code>none</code>。</p>\n</li>\n<li>\n<p>在工程<code>${project_home}/services/eurynome-cloud-upms-ability/resources/sqls</code>目录下，可以找到对应数据库数据初始化脚本。可以用你喜欢的方式导入数据库。</p>\n</li>\n</ol>\n<blockquote>\n<p>采用手动初始化方式，下一步可以跳过忽略</p>\n</blockquote>\n<h3 id=\"步骤三-回置配置\"> 步骤三：回置配置</h3>\n<ol>\n<li>\n<p>停止<code>UpmsApplication</code> 服务</p>\n</li>\n<li>\n<p>进入Nacos管理界面。找到您所使用的对应 <code>多环境</code> 下的 <code>eurynome-cloud-environment.yaml</code> 配置文件。</p>\n</li>\n<li>\n<p>设置 <code>eurynome-cloud-environment.yaml</code> 配置文件中属性 <code>herodotus.switch.database.init-mode</code> 的值重置为 <code>never</code>。</p>\n</li>\n<li>\n<p>检查 <code>eurynome-cloud-environment.yaml</code> 配置文件中属性 <code>herodotus.switch.database.ddl-auto</code> 的值为 <code>update</code> 或 <code>none</code></p>\n</li>\n<li>\n<p>点击<code>发布</code>按钮，发布配置，让配置生效。</p>\n</li>\n</ol>\n<div><p>为什么回置并再次检查</p>\n<ul>\n<li>如果 <code>herodotus.switch.database.ddl-auto</code> 的值为 <code>create</code> 或 <code>create-drop</code>，再次启动服务会重新建表，那么前面的工作就白做了。</li>\n<li>如果 <code>herodotus.switch.database.init-mode</code> 的值为 <code>always</code>，再次启动服务会再次执行SQL脚本，必定出现主键冲突问题导致失败。</li>\n</ul>\n</div>\n<h3 id=\"总结\"> 总结</h3>\n<p>经过实际的使用，总体感受 <code>Spring Data JPA</code> 以及 <code>Hibernate</code> 的多数据库支持还是非常强大，在 <code>PostgreSQL</code> 等自身版本差异不大的数据库家族中，使用非常顺滑。而像<code>MySQL</code> 这种自身各个版本差异较大的数据库家族中，使用起来确实有点蹩脚。</p>\n<h2 id=\"配置参数对应关系\"> 配置参数对应关系</h2>\n<p><strong>Eurynome Cloud</strong> 数据库操作设计配置参数与<code>spring-boot-starter-data-jpa</code>配置参数对应关系如下表：</p>\n<table>\n<thead>\n<tr>\n<th>配置</th>\n<th>对应</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>herodotus.database-information.driver-class-name</td>\n<td>spring.datasource.driver-class-name</td>\n</tr>\n<tr>\n<td>herodotus.database-information.url</td>\n<td>spring.datasource.url</td>\n</tr>\n<tr>\n<td>herodotus.environment.database.username</td>\n<td>spring.datasource.username</td>\n</tr>\n<tr>\n<td>herodotus.environment.database.password</td>\n<td>spring.datasource.password</td>\n</tr>\n<tr>\n<td>herodotus.database-information.platform</td>\n<td>spring.jpa.database<br>spring.sql.init.platform</td>\n</tr>\n<tr>\n<td>herodotus.environment.database.dialect</td>\n<td>spring.jpa.properties.hibernate.dialect</td>\n</tr>\n<tr>\n<td>herodotus.switch.database.ddl-auto</td>\n<td>spring.jpa.hibernate.ddl-auto</td>\n</tr>\n<tr>\n<td>herodotus.switch.database.init-mode</td>\n<td>spring.sql.init.mode</td>\n</tr>\n</tbody>\n</table>\n",
      "date_published": "2021-10-27T16:13:57.000Z",
      "date_modified": "2021-10-28T15:24:29.000Z",
      "authors": [
        {
          "name": "码匠君"
        }
      ],
      "tags": []
    },
    {
      "title": "新建子模块",
      "url": "https://herodotus.cn/guide/create-sub-module/",
      "id": "https://herodotus.cn/guide/create-sub-module/",
      "content_html": "<h1 id=\"新建子模块\"> 新建子模块</h1>\n<div><p>说明</p>\n<p>以下内容是基于Maven多模块工程创建子模块的案例说明</p>\n</div>\n<h2 id=\"在现有工程内-新建常规模块\"> 在现有工程内，新建常规模块</h2>\n<h3 id=\"手工新建子模块-非微服务模块\"> 手工新建子模块（非微服务模块）</h3>\n<ol>\n<li>\n<p>在合适的位置，新建模块目录，例如：<code>eurynome-test</code></p>\n</li>\n<li>\n<p>在<code>eurynome-test</code>业务模块下，新建<code>pom.xml</code>文件,以及<code>src\\main\\java</code>和<code>src\\main\\resources</code>目录</p>\n</li>\n<li>\n<p>修改<code>eurynome-test</code>业务模块下的<code>pom.xml</code>文件，添加Maven 基础配置</p>\n</li>\n</ol>\n<div><pre><code><span>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span>\n<span><span><span>&lt;</span>project</span> <span>xmlns</span><span><span>=</span><span>\"</span>http://maven.apache.org/POM/4.0.0<span>\"</span></span>\n         <span><span>xmlns:</span>xsi</span><span><span>=</span><span>\"</span>http://www.w3.org/2001/XMLSchema-instance<span>\"</span></span>\n         <span><span>xsi:</span>schemaLocation</span><span><span>=</span><span>\"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span>\"</span></span><span>></span></span>\n    <span><span><span>&lt;</span>modelVersion</span><span>></span></span>4.0.0<span><span><span>&lt;/</span>modelVersion</span><span>></span></span>\n\n    // 根据子模块所在位置，指定其上级目录pom信息作为parent\n    <span><span><span>&lt;</span>parent</span><span>></span></span>\n        <span><span><span>&lt;</span>artifactId</span><span>></span></span>eurynome-cloud<span><span><span>&lt;/</span>artifactId</span><span>></span></span>\n        <span><span><span>&lt;</span>groupId</span><span>></span></span>cn.herodotus.eurynome<span><span><span>&lt;/</span>groupId</span><span>></span></span>\n        <span><span><span>&lt;</span>version</span><span>></span></span>X.X.X<span><span><span>&lt;/</span>version</span><span>></span></span>\n    <span><span><span>&lt;/</span>parent</span><span>></span></span>\n\n    <span><span><span>&lt;</span>artifactId</span><span>></span></span>eurynome-test<span><span><span>&lt;/</span>artifactId</span><span>></span></span>\n    <span><span><span>&lt;</span>version</span><span>></span></span>X.X.X<span><span><span>&lt;/</span>version</span><span>></span></span> // 此处指定版本号，便于versions-maven-plugin统一修改\n    <span><span><span>&lt;</span>packaging</span><span>></span></span>jar<span><span><span>&lt;/</span>packaging</span><span>></span></span>\n\n    <span><span><span>&lt;</span>description</span><span>></span></span>eurynome测试模块<span><span><span>&lt;/</span>description</span><span>></span></span>\n\n    <span><span><span>&lt;</span>dependencies</span><span>></span></span>\n        <span><span><span>&lt;</span>dependency</span><span>></span></span>\n            <span><span><span>&lt;</span>groupId</span><span>></span></span>commons-beanutils<span><span><span>&lt;/</span>groupId</span><span>></span></span>\n            <span><span><span>&lt;</span>artifactId</span><span>></span></span>commons-beanutils<span><span><span>&lt;/</span>artifactId</span><span>></span></span>\n        <span><span><span>&lt;/</span>dependency</span><span>></span></span>\n        ...\n    <span><span><span>&lt;/</span>dependencies</span><span>></span></span>\n\n<span><span><span>&lt;/</span>project</span><span>></span></span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br></div></div><ol start=\"4\">\n<li>找到<code>eurynome-test</code>目录的上级目录中的pom.xml文件，在其中添加<code>&lt;modules&gt;</code>标签，以保持模块的联动依赖或编译</li>\n</ol>\n<div><pre><code><span><span><span>&lt;</span>modules</span><span>></span></span>\n\t<span><span><span>&lt;</span>module</span><span>></span></span>eurynome-test<span><span><span>&lt;/</span>module</span><span>></span></span>\n<span><span><span>&lt;/</span>modules</span><span>></span></span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><ol start=\"5\">\n<li>在工程<code>dependencies</code>目录下的pom.xml中，找到<code>dependencyManagement</code>下的</li>\n</ol>\n<p><code>&lt;!-- Eurynome Cloud --&gt;</code> 部分，添加模块声明</p>\n<div><pre><code><span><span><span>&lt;</span>dependency</span><span>></span></span>\n\t<span><span><span>&lt;</span>groupId</span><span>></span></span>${project.groupId}<span><span><span>&lt;/</span>groupId</span><span>></span></span>\n\t<span><span><span>&lt;</span>artifactId</span><span>></span></span>eurynome-test<span><span><span>&lt;/</span>artifactId</span><span>></span></span>\n\t<span><span><span>&lt;</span>version</span><span>></span></span>${project.version}<span><span><span>&lt;/</span>version</span><span>></span></span>\n<span><span><span>&lt;/</span>dependency</span><span>></span></span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>这样在其它模块中，就可以便捷的引用该模块，而且可以实现通过<code>dependencies</code>中的参数，统一控制模块版本。</p>\n<div><pre><code><span><span><span>&lt;</span>dependency</span><span>></span></span>\n\t<span><span><span>&lt;</span>groupId</span><span>></span></span>${project.groupId}<span><span><span>&lt;/</span>groupId</span><span>></span></span>\n\t<span><span><span>&lt;</span>artifactId</span><span>></span></span>eurynome-test<span><span><span>&lt;/</span>artifactId</span><span>></span></span>\n<span><span><span>&lt;/</span>dependency</span><span>></span></span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><h3 id=\"idea新建子模块-非微服务模块\"> IDEA新建子模块（非微服务模块）</h3>\n<ol>\n<li>在Idea中，点击菜单 <code>File -&gt; New -&gt; Module...</code>，在弹出的对话框中选择，选择<code>Maven</code>，然后点击<code>Next</code></li>\n</ol>\n<p><img src=\"/images/idea/create-module-01.png\" alt=\"输入图片说明\" /></p>\n<p>2,在新的<code>New Module</code>窗口中，输入想要新建的模块名称，点击<code>Finish</code>按钮完成模块新建操作。</p>\n<p><img src=\"/images/idea/create-module-02.png\" alt=\"输入图片说明\" /></p>\n<div><p>注意</p>\n<p>输入完名称之后，一定要重新选择<code>Parent</code>内容，这决定了新建模块所在的位置和层次结构。</p>\n<blockquote>\n<p>以上操作完成之后，会创建与“手工创建”章节结果相同，不再需要额外配置。</p>\n</blockquote>\n</div>\n<h2 id=\"在现有工程内-新建微服务模块\"> 在现有工程内，新建微服务模块</h2>\n<h3 id=\"手工新建子模块-非常规模块\"> 手工新建子模块（非常规模块）</h3>\n<ol>\n<li>\n<p>在合适的位置，新建模块目录，例如：<code>eurynome-test-ability</code></p>\n</li>\n<li>\n<p>在<code>eurynome-test-ability</code>业务模块下，新建<code>pom.xml</code>文件,以及<code>src\\main\\java</code>和<code>src\\main\\resources</code>目录</p>\n</li>\n<li>\n<p>修改<code>eurynome-test-abilit</code>y业务模块下的<code>pom.xml</code>文件，添加Maven 基础配置</p>\n</li>\n</ol>\n<div><pre><code><span>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span>\n<span><span><span>&lt;</span>project</span> <span>xmlns</span><span><span>=</span><span>\"</span>http://maven.apache.org/POM/4.0.0<span>\"</span></span>\n         <span><span>xmlns:</span>xsi</span><span><span>=</span><span>\"</span>http://www.w3.org/2001/XMLSchema-instance<span>\"</span></span>\n         <span><span>xsi:</span>schemaLocation</span><span><span>=</span><span>\"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span>\"</span></span><span>></span></span>\n    <span><span><span>&lt;</span>parent</span><span>></span></span>\n        <span><span><span>&lt;</span>artifactId</span><span>></span></span>eurynome-cloud<span><span><span>&lt;/</span>artifactId</span><span>></span></span>\n        <span><span><span>&lt;</span>groupId</span><span>></span></span>cn.herodotus.eurynome<span><span><span>&lt;/</span>groupId</span><span>></span></span>\n        <span><span><span>&lt;</span>version</span><span>></span></span>X.X.X<span><span><span>&lt;/</span>version</span><span>></span></span>\n    <span><span><span>&lt;/</span>parent</span><span>></span></span>\n    <span><span><span>&lt;</span>modelVersion</span><span>></span></span>4.0.0<span><span><span>&lt;/</span>modelVersion</span><span>></span></span>\n\n    <span><span><span>&lt;</span>artifactId</span><span>></span></span>eurynome-cloud-bpmn-ability<span><span><span>&lt;/</span>artifactId</span><span>></span></span>\n    <span><span><span>&lt;</span>version</span><span>></span></span>X.X.X<span><span><span>&lt;/</span>version</span><span>></span></span>\n\n    <span><span><span>&lt;</span>description</span><span>></span></span>eurynome-test-ability测试服务<span><span><span>&lt;/</span>description</span><span>></span></span>\n\n    <span><span><span>&lt;</span>properties</span><span>></span></span>\n        <span><span><span>&lt;</span>java.version</span><span>></span></span>1.8<span><span><span>&lt;/</span>java.version</span><span>></span></span>\n    <span><span><span>&lt;/</span>properties</span><span>></span></span>\n\n    <span><span><span>&lt;</span>dependencies</span><span>></span></span>\n        <span><span><span>&lt;</span>dependency</span><span>></span></span>\n            <span><span><span>&lt;</span>groupId</span><span>></span></span>${project.groupId}<span><span><span>&lt;/</span>groupId</span><span>></span></span>\n            <span><span><span>&lt;</span>artifactId</span><span>></span></span>eurynome-cloud-starter<span><span><span>&lt;/</span>artifactId</span><span>></span></span>\n        <span><span><span>&lt;/</span>dependency</span><span>></span></span>\n\t\t...\n    <span><span><span>&lt;/</span>dependencies</span><span>></span></span>\n\n    <span><span><span>&lt;</span>build</span><span>></span></span>\n        <span><span><span>&lt;</span>plugins</span><span>></span></span>\n            <span>&lt;!-- spring boot 默认插件 --></span>\n            <span><span><span>&lt;</span>plugin</span><span>></span></span>\n                <span><span><span>&lt;</span>groupId</span><span>></span></span>org.springframework.boot<span><span><span>&lt;/</span>groupId</span><span>></span></span>\n                <span><span><span>&lt;</span>artifactId</span><span>></span></span>spring-boot-maven-plugin<span><span><span>&lt;/</span>artifactId</span><span>></span></span>\n            <span><span><span>&lt;/</span>plugin</span><span>></span></span>\n\n            <span>&lt;!-- docker 打包插件 --></span>\n            <span><span><span>&lt;</span>plugin</span><span>></span></span>\n                <span><span><span>&lt;</span>groupId</span><span>></span></span>io.fabric8<span><span><span>&lt;/</span>groupId</span><span>></span></span>\n                <span><span><span>&lt;</span>artifactId</span><span>></span></span>docker-maven-plugin<span><span><span>&lt;/</span>artifactId</span><span>></span></span>\n            <span><span><span>&lt;/</span>plugin</span><span>></span></span>\n\n            <span>&lt;!-- 拷贝插件 --></span>\n            <span><span><span>&lt;</span>plugin</span><span>></span></span>\n                <span><span><span>&lt;</span>groupId</span><span>></span></span>org.apache.maven.plugins<span><span><span>&lt;/</span>groupId</span><span>></span></span>\n                <span><span><span>&lt;</span>artifactId</span><span>></span></span>maven-antrun-plugin<span><span><span>&lt;/</span>artifactId</span><span>></span></span>\n            <span><span><span>&lt;/</span>plugin</span><span>></span></span>\n        <span><span><span>&lt;/</span>plugins</span><span>></span></span>\n    <span><span><span>&lt;/</span>build</span><span>></span></span>\n\n<span><span><span>&lt;/</span>project</span><span>></span></span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br></div></div><div><p>注意</p>\n<p><code>eurynome-cloud-starter</code>是所有业务微服务启动运行,接入平台必须依赖的核心包</p>\n</div>\n<ol start=\"4\">\n<li>找到<code>eurynome-test-ability</code>目录的上级目录中的pom.xml文件，在其中添加<code>&lt;modules&gt;</code>标签，以保持模块的联动依赖或编译</li>\n</ol>\n<div><pre><code><span><span><span>&lt;</span>modules</span><span>></span></span>\n\t<span><span><span>&lt;</span>module</span><span>></span></span>eurynome-test-ability<span><span><span>&lt;/</span>module</span><span>></span></span>\n<span><span><span>&lt;/</span>modules</span><span>></span></span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><ol start=\"5\">\n<li>在<code>src\\main\\resources</code>目录下添加<code>bootstrap.yml</code>文件</li>\n</ol>\n<div><pre><code><span>server</span><span>:</span>\n  <span>port</span><span>:</span> <span>7070</span>\n<span>spring</span><span>:</span>\n  <span>application</span><span>:</span>\n    <span>name</span><span>:</span>  @artifactId@ <span>#拿到POM文件中的值</span>\n  <span>profiles</span><span>:</span>\n    <span>active</span><span>:</span> @profile.name@\n  <span>main</span><span>:</span>\n    <span>allow-bean-definition-overriding</span><span>:</span> <span>true</span>\n  <span>cloud</span><span>:</span>\n    <span>nacos</span><span>:</span>\n      <span>config</span><span>:</span>\n        <span>namespace</span><span>:</span> @config.namespace@\n        <span>server-addr</span><span>:</span> @config.server<span>-</span>addr@\n        <span>file-extension</span><span>:</span> yaml\n        <span>shared-configs</span><span>:</span>\n          <span>-</span> <span>data-id</span><span>:</span> eurynome<span>-</span>cloud<span>-</span>environment.yaml\n            <span>group</span><span>:</span> @profile.name@\n          <span>-</span> <span>data-id</span><span>:</span> eurynome<span>-</span>cloud<span>-</span>platform.yaml\n            <span>group</span><span>:</span> common\n          <span>-</span> <span>data-id</span><span>:</span> eurynome<span>-</span>cloud<span>-</span>database<span>-</span>@database.type@.yaml\n            <span>group</span><span>:</span> common\n          <span>-</span> <span>data-id</span><span>:</span> eurynome<span>-</span>cloud<span>-</span>redis.yaml\n            <span>group</span><span>:</span> common\n          <span>-</span> <span>data-id</span><span>:</span> eurynome<span>-</span>cloud<span>-</span>cache.yaml\n            <span>group</span><span>:</span> common\n          <span>-</span> <span>data-id</span><span>:</span> eurynome<span>-</span>cloud<span>-</span>rest.yaml\n            <span>group</span><span>:</span> common\n          <span>-</span> <span>data-id</span><span>:</span> eurynome<span>-</span>cloud<span>-</span>kafka.yaml\n            <span>group</span><span>:</span> common\n        <span>extension-configs</span><span>:</span>\n          <span>-</span> <span>data-id</span><span>:</span> $<span>{</span>spring.application.name<span>}</span>.yaml\n            <span>group</span><span>:</span> herodotus\n      <span>discovery</span><span>:</span>\n        <span>namespace</span><span>:</span> @config.namespace@\n        <span>server-addr</span><span>:</span> @discovery.server<span>-</span>addr@\n    <span>sentinel</span><span>:</span>\n      <span>transport</span><span>:</span>\n        <span>port</span><span>:</span> <span>8719</span>\n        <span>dashboard</span><span>:</span> @sentinel.server<span>-</span>addr@\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br></div></div><ol start=\"6\">\n<li>在<code>cn.herodotus.eurynome.test</code>.ability包下面添加启动类</li>\n</ol>\n<div><pre><code><span>package</span> <span>cn<span>.</span>herodotus<span>.</span>eurynome<span>.</span>test<span>.</span>ability</span><span>;</span>\n\n<span>import</span> <span>org<span>.</span>springframework<span>.</span>boot<span>.</span></span><span>SpringApplication</span><span>;</span>\n<span>import</span> <span>org<span>.</span>springframework<span>.</span>boot<span>.</span>autoconfigure<span>.</span></span><span>SpringBootApplication</span><span>;</span>\n\n<span>@SpringBootApplication</span>\n<span>public</span> <span>class</span> <span>TestApplication</span> <span>{</span>\n\n    <span>public</span> <span>static</span> <span>void</span> <span>main</span><span>(</span><span>String</span><span>[</span><span>]</span> args<span>)</span> <span>{</span>\n        <span>SpringApplication</span><span>.</span><span>run</span><span>(</span><span>TestApplication</span><span>.</span><span>class</span><span>,</span> args<span>)</span><span>;</span>\n    <span>}</span>\n\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><h3 id=\"idea新建子模块-非常规模块\"> IDEA新建子模块（非常规模块）</h3>\n<ol>\n<li>在Idea中，点击菜单 <code>File -&gt; New -&gt; Module...</code>，在弹出的对话框中选择，选择<code>Spring Initializr</code>，添加相关信息，然后点击<code>Next</code></li>\n</ol>\n<p><img src=\"/images/idea/create-module-03.png\" alt=\"输入图片说明\" /></p>\n<p>2,在新的<code>New Module</code>窗口中，选择想要添加的微服务相关依赖模块，点击<code>Finish</code>按钮完成模块新建操作。</p>\n<p><img src=\"/images/idea/create-module-04.png\" alt=\"输入图片说明\" /></p>\n<div><p>注意</p>\n<p>这里与章节描述的操作类似，都是通过点击菜单 <code>File -&gt; New -&gt; Module...</code>进行子模块的创建。因为是选择<code>Spring Initializr</code>，虽然操作路径一致，但是完全是按照创建一个新的<code>Spring Boot</code>进行操作，包括创建包的位置,<code>Group</code>,<code>Artifact</code>等信息都需要手工填写，也不会自动添加<code>&lt;modules&gt;</code>等关联信息。模块生成之后，还需要手动修改<code>pom.xml</code>。</p>\n<blockquote>\n<p>使用该种方式的好处，是微服务工程所需要的代码结构,Application服务启动类,<code>Edit Configuraitons...</code>服务运行的默认配置都会帮助自动建好</p>\n</blockquote>\n</div>\n<ol start=\"3\">\n<li>修改<code>eurynome-test-ability</code>业务模块下的<code>pom.xml</code>文件，添加Maven 基础配置</li>\n</ol>\n<div><pre><code><span>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span>\n<span><span><span>&lt;</span>project</span> <span>xmlns</span><span><span>=</span><span>\"</span>http://maven.apache.org/POM/4.0.0<span>\"</span></span>\n         <span><span>xmlns:</span>xsi</span><span><span>=</span><span>\"</span>http://www.w3.org/2001/XMLSchema-instance<span>\"</span></span>\n         <span><span>xsi:</span>schemaLocation</span><span><span>=</span><span>\"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span>\"</span></span><span>></span></span>\n    <span><span><span>&lt;</span>parent</span><span>></span></span>\n        <span><span><span>&lt;</span>artifactId</span><span>></span></span>eurynome-cloud<span><span><span>&lt;/</span>artifactId</span><span>></span></span>\n        <span><span><span>&lt;</span>groupId</span><span>></span></span>cn.herodotus.eurynome<span><span><span>&lt;/</span>groupId</span><span>></span></span>\n        <span><span><span>&lt;</span>version</span><span>></span></span>X.X.X<span><span><span>&lt;/</span>version</span><span>></span></span>\n    <span><span><span>&lt;/</span>parent</span><span>></span></span>\n    <span><span><span>&lt;</span>modelVersion</span><span>></span></span>4.0.0<span><span><span>&lt;/</span>modelVersion</span><span>></span></span>\n\n    <span><span><span>&lt;</span>artifactId</span><span>></span></span>eurynome-cloud-bpmn-ability<span><span><span>&lt;/</span>artifactId</span><span>></span></span>\n    <span><span><span>&lt;</span>version</span><span>></span></span>X.X.X<span><span><span>&lt;/</span>version</span><span>></span></span>\n\n    <span><span><span>&lt;</span>description</span><span>></span></span>eurynome-test-ability测试服务<span><span><span>&lt;/</span>description</span><span>></span></span>\n\n    <span><span><span>&lt;</span>properties</span><span>></span></span>\n        <span><span><span>&lt;</span>java.version</span><span>></span></span>1.8<span><span><span>&lt;/</span>java.version</span><span>></span></span>\n    <span><span><span>&lt;/</span>properties</span><span>></span></span>\n\n    <span><span><span>&lt;</span>dependencies</span><span>></span></span>\n        <span><span><span>&lt;</span>dependency</span><span>></span></span>\n            <span><span><span>&lt;</span>groupId</span><span>></span></span>${project.groupId}<span><span><span>&lt;/</span>groupId</span><span>></span></span>\n            <span><span><span>&lt;</span>artifactId</span><span>></span></span>eurynome-cloud-starter<span><span><span>&lt;/</span>artifactId</span><span>></span></span>\n        <span><span><span>&lt;/</span>dependency</span><span>></span></span>\n\t\t...\n    <span><span><span>&lt;/</span>dependencies</span><span>></span></span>\n\n    <span><span><span>&lt;</span>build</span><span>></span></span>\n        <span><span><span>&lt;</span>plugins</span><span>></span></span>\n            <span>&lt;!-- spring boot 默认插件 --></span>\n            <span><span><span>&lt;</span>plugin</span><span>></span></span>\n                <span><span><span>&lt;</span>groupId</span><span>></span></span>org.springframework.boot<span><span><span>&lt;/</span>groupId</span><span>></span></span>\n                <span><span><span>&lt;</span>artifactId</span><span>></span></span>spring-boot-maven-plugin<span><span><span>&lt;/</span>artifactId</span><span>></span></span>\n            <span><span><span>&lt;/</span>plugin</span><span>></span></span>\n\n            <span>&lt;!-- docker 打包插件 --></span>\n            <span><span><span>&lt;</span>plugin</span><span>></span></span>\n                <span><span><span>&lt;</span>groupId</span><span>></span></span>io.fabric8<span><span><span>&lt;/</span>groupId</span><span>></span></span>\n                <span><span><span>&lt;</span>artifactId</span><span>></span></span>docker-maven-plugin<span><span><span>&lt;/</span>artifactId</span><span>></span></span>\n            <span><span><span>&lt;/</span>plugin</span><span>></span></span>\n\n            <span>&lt;!-- 拷贝插件 --></span>\n            <span><span><span>&lt;</span>plugin</span><span>></span></span>\n                <span><span><span>&lt;</span>groupId</span><span>></span></span>org.apache.maven.plugins<span><span><span>&lt;/</span>groupId</span><span>></span></span>\n                <span><span><span>&lt;</span>artifactId</span><span>></span></span>maven-antrun-plugin<span><span><span>&lt;/</span>artifactId</span><span>></span></span>\n            <span><span><span>&lt;/</span>plugin</span><span>></span></span>\n        <span><span><span>&lt;/</span>plugins</span><span>></span></span>\n    <span><span><span>&lt;/</span>build</span><span>></span></span>\n\n<span><span><span>&lt;/</span>project</span><span>></span></span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br></div></div><div><p>注意</p>\n<p><code>eurynome-cloud-starter</code>是所有业务微服务启动运行,接入平台必须依赖的核心包</p>\n</div>\n<ol start=\"4\">\n<li>找到<code>eurynome-test-ability</code>目录的上级目录中的<code>pom.xml</code>文件，在其中添加<code>&lt;modules&gt;</code>标签，以保持模块的联动依赖或编译</li>\n</ol>\n<div><pre><code><span><span><span>&lt;</span>modules</span><span>></span></span>\n\t<span><span><span>&lt;</span>module</span><span>></span></span>eurynome-test-ability<span><span><span>&lt;/</span>module</span><span>></span></span>\n<span><span><span>&lt;/</span>modules</span><span>></span></span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><ol start=\"5\">\n<li>在<code>src\\main\\resources</code>目录下，新建<code>bootstrap.yml</code>文件并删除自动生成的<code>application.properties</code>文件，或者将自动生成的<code>application.properties</code>文件重命名为<code>bootstrap.yml</code></li>\n</ol>\n<div><pre><code><span>server</span><span>:</span>\n  <span>port</span><span>:</span> <span>7070</span>\n<span>spring</span><span>:</span>\n  <span>application</span><span>:</span>\n    <span>name</span><span>:</span>  @artifactId@ <span>#拿到POM文件中的值</span>\n  <span>profiles</span><span>:</span>\n    <span>active</span><span>:</span> @profile.name@\n  <span>main</span><span>:</span>\n    <span>allow-bean-definition-overriding</span><span>:</span> <span>true</span>\n  <span>cloud</span><span>:</span>\n    <span>nacos</span><span>:</span>\n      <span>config</span><span>:</span>\n        <span>namespace</span><span>:</span> @config.namespace@\n        <span>server-addr</span><span>:</span> @config.server<span>-</span>addr@\n        <span>file-extension</span><span>:</span> yaml\n        <span>shared-configs</span><span>:</span>\n          <span>-</span> <span>data-id</span><span>:</span> eurynome<span>-</span>cloud<span>-</span>environment.yaml\n            <span>group</span><span>:</span> @profile.name@\n          <span>-</span> <span>data-id</span><span>:</span> eurynome<span>-</span>cloud<span>-</span>platform.yaml\n            <span>group</span><span>:</span> common\n          <span>-</span> <span>data-id</span><span>:</span> eurynome<span>-</span>cloud<span>-</span>database<span>-</span>@database.type@.yaml\n            <span>group</span><span>:</span> common\n          <span>-</span> <span>data-id</span><span>:</span> eurynome<span>-</span>cloud<span>-</span>redis.yaml\n            <span>group</span><span>:</span> common\n          <span>-</span> <span>data-id</span><span>:</span> eurynome<span>-</span>cloud<span>-</span>cache.yaml\n            <span>group</span><span>:</span> common\n          <span>-</span> <span>data-id</span><span>:</span> eurynome<span>-</span>cloud<span>-</span>rest.yaml\n            <span>group</span><span>:</span> common\n          <span>-</span> <span>data-id</span><span>:</span> eurynome<span>-</span>cloud<span>-</span>kafka.yaml\n            <span>group</span><span>:</span> common\n        <span>extension-configs</span><span>:</span>\n          <span>-</span> <span>data-id</span><span>:</span> $<span>{</span>spring.application.name<span>}</span>.yaml\n            <span>group</span><span>:</span> herodotus\n      <span>discovery</span><span>:</span>\n        <span>namespace</span><span>:</span> @config.namespace@\n        <span>server-addr</span><span>:</span> @discovery.server<span>-</span>addr@\n    <span>sentinel</span><span>:</span>\n      <span>transport</span><span>:</span>\n        <span>port</span><span>:</span> <span>8719</span>\n        <span>dashboard</span><span>:</span> @sentinel.server<span>-</span>addr@\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br></div></div><h2 id=\"在现有工程外-新建微服务独立模块工程\"> 在现有工程外，新建微服务独立模块工程</h2>\n<div><p>提示</p>\n<p>现有工程外（<code>eurynome-cloud</code>工程外部）建立微服务工程，需要依赖于<code>eurynome-cloud</code>代码，因此需要使用<code>mvn install</code> 命令正确编译过<code>eurynome-cloud</code>工程，确保Maven本地缓存（<code>Maven Repository</code>）或者独立部署的Maven仓库中存在已经编译好的<code>eurynome-cloud</code>工程代码。</p>\n</div>\n<ol>\n<li>在<code>Idea</code>中，点击菜单 <code>File -&gt; New -&gt; Module...</code>，在弹出的对话框中选择，选择<code>Spring Initializr</code>，添加相关信息，然后点击<code>Next</code></li>\n</ol>\n<p><img src=\"/images/idea/create-module-03.png\" alt=\"输入图片说明\" /></p>\n<ol start=\"2\">\n<li>在新的<code>New Module</code>窗口中，选择想要添加的微服务相关依赖模块，点击<code>Finish</code>按钮完成模块新建操作。</li>\n</ol>\n<p><img src=\"/images/idea/create-module-04.png\" alt=\"输入图片说明\" /></p>\n<ol start=\"3\">\n<li>修改新建业务模块下的<code>pom.xml</code>文件中，添加Maven 基础配置</li>\n</ol>\n<div><pre><code><span>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span>\n<span><span><span>&lt;</span>project</span> <span>xmlns</span><span><span>=</span><span>\"</span>http://maven.apache.org/POM/4.0.0<span>\"</span></span> <span><span>xmlns:</span>xsi</span><span><span>=</span><span>\"</span>http://www.w3.org/2001/XMLSchema-instance<span>\"</span></span>\n         <span><span>xsi:</span>schemaLocation</span><span><span>=</span><span>\"</span>http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd<span>\"</span></span><span>></span></span>\n    <span><span><span>&lt;</span>modelVersion</span><span>></span></span>4.0.0<span><span><span>&lt;/</span>modelVersion</span><span>></span></span>\n\n    <span><span><span>&lt;</span>parent</span><span>></span></span>\n        <span><span><span>&lt;</span>groupId</span><span>></span></span>cn.herodotus.eurynome<span><span><span>&lt;/</span>groupId</span><span>></span></span>\n        <span><span><span>&lt;</span>artifactId</span><span>></span></span>dependencies<span><span><span>&lt;/</span>artifactId</span><span>></span></span>\n        <span><span><span>&lt;</span>version</span><span>></span></span>X.X.X<span><span><span>&lt;/</span>version</span><span>></span></span>\n    <span><span><span>&lt;/</span>parent</span><span>></span></span>\n\n    <span><span><span>&lt;</span>artifactId</span><span>></span></span>eurynome-test-ability<span><span><span>&lt;/</span>artifactId</span><span>></span></span>\n    <span><span><span>&lt;</span>version</span><span>></span></span>X.X.X<span><span><span>&lt;/</span>version</span><span>></span></span>\n    <span><span><span>&lt;</span>packaging</span><span>></span></span>jar<span><span><span>&lt;/</span>packaging</span><span>></span></span>\n\n    <span><span><span>&lt;</span>description</span><span>></span></span>eurynome test 服务工程<span><span><span>&lt;/</span>description</span><span>></span></span>\n\n    <span><span><span>&lt;</span>properties</span><span>></span></span>\n        <span><span><span>&lt;</span>java.version</span><span>></span></span>1.8<span><span><span>&lt;/</span>java.version</span><span>></span></span>\n    <span><span><span>&lt;/</span>properties</span><span>></span></span>\n\n    <span><span><span>&lt;</span>dependencies</span><span>></span></span>\n        <span><span><span>&lt;</span>dependency</span><span>></span></span>\n            <span><span><span>&lt;</span>groupId</span><span>></span></span>${project.groupId}<span><span><span>&lt;/</span>groupId</span><span>></span></span>\n            <span><span><span>&lt;</span>artifactId</span><span>></span></span>eurynome-cloud-starter<span><span><span>&lt;/</span>artifactId</span><span>></span></span>\n        <span><span><span>&lt;/</span>dependency</span><span>></span></span>\n    <span><span><span>&lt;/</span>dependencies</span><span>></span></span>\n\n    <span><span><span>&lt;</span>build</span><span>></span></span>\n        <span><span><span>&lt;</span>plugins</span><span>></span></span>\n            <span><span><span>&lt;</span>plugin</span><span>></span></span>\n                <span><span><span>&lt;</span>groupId</span><span>></span></span>org.springframework.boot<span><span><span>&lt;/</span>groupId</span><span>></span></span>\n                <span><span><span>&lt;</span>artifactId</span><span>></span></span>spring-boot-maven-plugin<span><span><span>&lt;/</span>artifactId</span><span>></span></span>\n            <span><span><span>&lt;/</span>plugin</span><span>></span></span>\n        <span><span><span>&lt;/</span>plugins</span><span>></span></span>\n    <span><span><span>&lt;/</span>build</span><span>></span></span>\n\n<span><span><span>&lt;/</span>project</span><span>></span></span>\n\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br></div></div><ol start=\"4\">\n<li>在<code>src\\main\\resources</code>目录下，新建<code>bootstrap.yml</code>文件并删除自动生成的<code>application.properties</code>文件，或者将自动生成的<code>application.properties</code>文件重命名为<code>bootstrap.yml</code></li>\n</ol>\n<div><pre><code><span>server</span><span>:</span>\n  <span>port</span><span>:</span> <span>7070</span>\n<span>spring</span><span>:</span>\n  <span>application</span><span>:</span>\n    <span>name</span><span>:</span>  @artifactId@ <span>#拿到POM文件中的值</span>\n  <span>profiles</span><span>:</span>\n    <span>active</span><span>:</span> @profile.name@\n  <span>main</span><span>:</span>\n    <span>allow-bean-definition-overriding</span><span>:</span> <span>true</span>\n  <span>cloud</span><span>:</span>\n    <span>nacos</span><span>:</span>\n      <span>config</span><span>:</span>\n        <span>namespace</span><span>:</span> @config.namespace@\n        <span>server-addr</span><span>:</span> @config.server<span>-</span>addr@\n        <span>file-extension</span><span>:</span> yaml\n        <span>shared-configs</span><span>:</span>\n          <span>-</span> <span>data-id</span><span>:</span> eurynome<span>-</span>cloud<span>-</span>environment.yaml\n            <span>group</span><span>:</span> @profile.name@\n          <span>-</span> <span>data-id</span><span>:</span> eurynome<span>-</span>cloud<span>-</span>platform.yaml\n            <span>group</span><span>:</span> common\n          <span>-</span> <span>data-id</span><span>:</span> eurynome<span>-</span>cloud<span>-</span>database<span>-</span>@database.type@.yaml\n            <span>group</span><span>:</span> common\n          <span>-</span> <span>data-id</span><span>:</span> eurynome<span>-</span>cloud<span>-</span>redis.yaml\n            <span>group</span><span>:</span> common\n          <span>-</span> <span>data-id</span><span>:</span> eurynome<span>-</span>cloud<span>-</span>cache.yaml\n            <span>group</span><span>:</span> common\n          <span>-</span> <span>data-id</span><span>:</span> eurynome<span>-</span>cloud<span>-</span>rest.yaml\n            <span>group</span><span>:</span> common\n          <span>-</span> <span>data-id</span><span>:</span> eurynome<span>-</span>cloud<span>-</span>kafka.yaml\n            <span>group</span><span>:</span> common\n        <span>extension-configs</span><span>:</span>\n          <span>-</span> <span>data-id</span><span>:</span> $<span>{</span>spring.application.name<span>}</span>.yaml\n            <span>group</span><span>:</span> herodotus\n      <span>discovery</span><span>:</span>\n        <span>namespace</span><span>:</span> @config.namespace@\n        <span>server-addr</span><span>:</span> @discovery.server<span>-</span>addr@\n    <span>sentinel</span><span>:</span>\n      <span>transport</span><span>:</span>\n        <span>port</span><span>:</span> <span>8719</span>\n        <span>dashboard</span><span>:</span> @sentinel.server<span>-</span>addr@\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br></div></div>",
      "image": "https://herodotus.cn/images/idea/create-module-01.png",
      "date_published": "2021-10-27T16:13:57.000Z",
      "date_modified": "2021-10-28T15:24:29.000Z",
      "authors": [
        {
          "name": "码匠君"
        }
      ],
      "tags": []
    },
    {
      "title": "添加模块",
      "url": "https://herodotus.cn/guide/create-component/",
      "id": "https://herodotus.cn/guide/create-component/",
      "content_html": "<h1 id=\"添加模块\"> 添加模块</h1>\n<h2 id=\"添加一般模块\"> 添加一般模块</h2>\n<ol>\n<li>\n<p>在<code>packages</code>目录下，任意位置，新建模块目录。例如：moduleA</p>\n</li>\n<li>\n<p>请参考已有模块，在目录 moduleA 下，新建文件 <code>package.json</code>, <code>rollup.config.js</code>, <code>tsconfig.json</code></p>\n</li>\n</ol>\n<ul>\n<li><code>package.json</code>: Node 工程基础配置</li>\n<li><code>rollup.config.js</code>: Rollup 本模块配置文件</li>\n<li><code>tsconfig.json</code>: Typescript 本模块配置文件</li>\n</ul>\n<div><p>注意</p>\n<p><code>package.json</code> 中一定要指定 <code>name</code> 的值。这个值就是以后引用模块，编译模块的核心名称。其它配置请结合实际进行修改和配置。</p>\n</div>\n<ol start=\"3\">\n<li>在目录 moduleA 下，新建文件夹 <code>src</code>, <code>types</code></li>\n</ol>\n<ul>\n<li><code>src</code>: 源代码放置目录，可以根据自身需求修改。</li>\n<li><code>types</code>: Typescript 定义文件放置目录，可以根据自身需求修改。</li>\n</ul>\n<ol start=\"4\">\n<li>在工程中找到<code>${project_home}/package.json</code>。在 <code>workspaces</code>属性中添加新增模块的目录。</li>\n</ol>\n<p>以目录 moduleA 为例，在 <code>workspaces</code> 中添加如下目录配置。</p>\n<div><pre><code>   <span>\"workspaces\"</span><span>:</span> <span>[</span>\n        <span>\"packages/moduleA\"</span><span>,</span>\n        ···\n    <span>]</span><span>,</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><ol start=\"5\">\n<li>以上工作完成之后，就可以在控制台中，通过以下命令，执行新增模块的相关命令。</li>\n</ol>\n<p>假设目录 moduleA 中的模块，名称为 <code>@hecate/moduleA</code>。通过以下命令执行相关操作。</p>\n<div><pre><code><span>yarn</span> workspace @hecate/moduleA XXX\n</code></pre>\n<div><span>1</span><br></div></div><div><p>说明</p>\n<ul>\n<li><code>workspace</code>: 因为工程中有多个模块，通过该参数进行区分</li>\n<li><code>@hecate/moduleA</code>: 就是在该模块下，<code>package.json</code> 中 <code>name</code> 属性值。</li>\n<li><code>XXX</code>: 代表的是，在该模块下<code>package.json</code> 中 <code>scripts</code> 属性中定义的命令</li>\n</ul>\n</div>\n<ol start=\"6\">\n<li>定义简化命令</li>\n</ol>\n<p>上一步中，执行的命令比较长，不方便记忆和使用。可以在工程中找到<code>${project_home}/package.json</code>，在其中<code>scripts</code> 属性中定义简化命令，实现简化命令与一个或多个模块内命令的映射。</p>\n<p>例如：</p>\n<div><pre><code><span>{</span>\n    <span>\"name\"</span><span>:</span> <span>\"root\"</span><span>,</span>\n    <span>\"workspaces\"</span><span>:</span> <span>[</span>\n        <span>\"packages/moduleA\"</span><span>,</span>\n        ···\n    <span>]</span><span>,</span>\n    <span>\"scripts\"</span><span>:</span> <span>{</span>\n        <span>\"h:mA\"</span><span>:</span> <span>\"yarn workspace @hecate/moduleA\"</span><span>,</span>\n        ···\n    <span>}</span><span>,</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><p>那么，执行以下命令</p>\n<div><pre><code><span>yarn</span> h:mA XXX\n\n// 等价于\n\n<span>yarn</span> workspace @hecate/moduleA XXX\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><blockquote>\n<p>以上只是示例，可以结合实际定义自己的简化命令。</p>\n</blockquote>\n<ol start=\"7\">\n<li>其它模块应用该模块。</li>\n</ol>\n<p>可以通过以下命令，实现其它模块对该模块的依赖引用。</p>\n<div><pre><code>// 将模块@hecate/moduleA 添加到 模块中@hecate/moduleA\nlerna <span>add</span> @hecate/moduleA --scope @hecate/moduleB\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><h2 id=\"添加vue工程\"> 添加Vue工程</h2>\n<p>将一个单独的Vue工程，添加到工程中，作为一个模块使用。具体方法与  类似。</p>\n<ol>\n<li>\n<p>新建一个Vue工程，使用 Vue Cli 或任意你喜欢的方式都可以。</p>\n</li>\n<li>\n<p>在<code>packages</code>目录下，任意位置，新建模块目录。</p>\n</li>\n<li>\n<p>将刚刚新建的Vue工程代码拷贝至，新建的模块目录下。</p>\n</li>\n<li>\n<p>按照中，第4~7步的说明，同样操作一遍即可。</p>\n</li>\n</ol>\n<div><p>说明</p>\n<p>使用 Vue Cli 会新建标准的 Vue 工程，<code>package.json</code> 中会包含完整的依赖包。只用 <code>Monorepo</code> 方式管理项目，可以将共性的依赖包放到模块外部进行统一管理，各个模块只需要管理自身所需要的依赖包即可。</p>\n<p>因此，可以对比 <code>@herodotus/ui</code> 模块的 <code>package.json</code> 的依赖定义，将新建的 Vue工程中，重复的依赖去掉。</p>\n</div>\n",
      "date_published": "2021-10-27T16:13:57.000Z",
      "date_modified": "2021-10-28T15:24:29.000Z",
      "authors": [
        {
          "name": "码匠君"
        }
      ],
      "tags": []
    },
    {
      "title": "前端概览",
      "url": "https://herodotus.cn/guide/frontend-introduction/",
      "id": "https://herodotus.cn/guide/frontend-introduction/",
      "content_html": "<h1 id=\"前端概览\"> 前端概览</h1>\n<h2 id=\"项目简介\"> 项目简介</h2>\n<p><strong>Eurynome Cloud UI</strong> 是 <strong>Eurynome Cloud</strong> 后台管理界面。是前后端分离的,独立运行的前端应用。基于 Vue 2.0 和 Typescript 4.2.X 构建，是组件库式的,模块化的前端工程。</p>\n<p>以 <code>Vuetify</code> 组件库为基础，依赖丰富的常用组件和 <code>Material Design</code> 的设计优势，让你无需大量美工工作的投入，就可以快速得到非常美观的界面功能。</p>\n<h3 id=\"为什么没有使用-vue-3\"> 为什么没有使用 Vue 3</h3>\n<p>Vue 3 已经出来将近一年了，很期待使用其新特性，让代码更简洁,更规范,更高效。为什么现在没有使用 Vue 3，主要原因是本项目定位于使用 Vuetify 组件，Vuetify 3 正在开发中，所以目前的版本仍旧在使用 Vue 2。目前工程代码已经全部切换为Typescript，就是为了迎接 Vue 3 和 Vuetify 3 做前序准备。</p>\n<h2 id=\"主要特性\"> 主要特性</h2>\n<ul>\n<li><strong>Eurynome Cloud UI</strong>是基于 <code>Lerna</code> 和 <code>yarn workspaces</code> 构建的， 以 <code>Monorepo</code> 方式管理代码的项目。</li>\n<li>基于 Vue 2.0 和 Typescript 4.2.X 构建。是组件库式的,模块化的前端工程。</li>\n<li>共性组件采用 <code>Rollup</code> 进行编译，做了已有认知范围内，能够做到的所有性能优化处理</li>\n<li>支持 Vue Webpack 方式编译，并对工程打包进行了深入优化。</li>\n<li>浏览器本地存储采用 localForage，支持 IndexedDB，WebSQL 和 localStorage 三种存储模式</li>\n</ul>\n<h2 id=\"技术介绍\"> 技术介绍</h2>\n<h3 id=\"vuetify\"> Vuetify</h3>\n<p>Vuetify 是一个用于 Vue.js 的 Material Design 组件框架。它的目标是提供所有必要的工具来创建美丽的内容丰富的应用程序。能够让没有任何设计技能的开发者创造出时尚的 Material 风格界面。</p>\n<h4 id=\"为什么选择vuetify\"> 为什么选择Vuetify</h4>\n<p><img src=\"/images/vue/why-vuetify.png\" alt=\"Why\" /></p>\n<ul>\n<li>与其他框架相比，<code>Vuetify</code>覆盖了几乎其他前端框架的功能，组件丰富，移动端和pc端能进行比较好的自适应。框架的可扩展性强，可以根据框架的组件，开发出更高效的组件。</li>\n<li>基于<code>Vue cli</code>提供了 <code>Vuetify Plugin</code>，集成更加方便，基本上实现一键集成，一个命令就能集成，省去很多配置。</li>\n<li>二次开发更加容易，基于 <code>Vuetify</code> 提供的框架进行二次开发，更加的容易。</li>\n<li>组件按需加载， <code>Vuetify</code> 框架内置了组件的按需加载，只要引用 <code>Vuetify</code> 组件，都是按需加载，大大减轻了进一步处理的时间成本。</li>\n<li><code>Vuetify</code> 与其他框架的集成，集成比较简单，以 <code>Nuxt</code> 框架的集成为例，能方便的进行集成，简单的集成，就能使用，并且和后台管理的功能页面使用无差别，可以加快使用的成本</li>\n<li>框架的持续的更新升级，基本每周都有更新，框架组件更新及时。便于系统技术升级。</li>\n</ul>\n<h3 id=\"typescript\"> Typescript</h3>\n<h4 id=\"什么是typescript\"> 什么是TypeScript</h4>\n<p><code>TypeScript</code> 是 <code>JavaScript</code> 的一个超集，主要提供了类型系统和对 ES6 的支持，它由 <code>Microsoft</code> 开发，代码开源于 <code>GitHub</code> 上。</p>\n<p><code>TypeScript</code> 是 <code>JavaScript</code> 的类型的超集，它可以编译成纯 <code>JavaScript</code>。编译出来的 <code>JavaScript</code> <code>可以运行在任何浏览器上。TypeScript</code> 编译工具可以运行在任何服务器和任何系统上。TypeScript 是开源的。</p>\n<h4 id=\"为什么选择typescript\"> 为什么选择TypeScript</h4>\n<ul>\n<li>\n<p><code>TypeScript</code> 增加了代码的可读性和可维护性</p>\n<ul>\n<li>类型系统实际上是最好的文档，大部分的函数看看类型的定义就可以知道如何使用了</li>\n<li>可以在编译阶段就发现大部分错误，这总比在运行时候出错好</li>\n<li>增强了编辑器和 IDE 的功能，包括代码补全,接口提示,跳转到定义,重构等</li>\n</ul>\n</li>\n<li>\n<p><code>TypeScript</code> 非常包容</p>\n<ul>\n<li>TypeScript 是 JavaScript 的超集，.js 文件可以直接重命名为 .ts 即可</li>\n<li>即使不显式的定义类型，也能够自动做出类型推论</li>\n<li>可以定义从简单到复杂的几乎一切类型</li>\n<li>即使 TypeScript 编译报错，也可以生成 JavaScript 文件</li>\n<li>兼容第三方库，即使第三方库不是用 TypeScript 写的，也可以编写单独的类型文件供 TypeScript 读取</li>\n</ul>\n</li>\n<li>\n<p><code>TypeScript</code> 拥有活跃的社区</p>\n<ul>\n<li>大部分第三方库都有提供给 <code>TypeScript</code> 的类型定义文件</li>\n<li><code>Google</code> 开发的 <code>Angular2</code> 就是使用 <code>TypeScript</code> 编写的</li>\n<li><code>TypeScript</code> 拥抱了 <code>ES6</code> 规范，也支持部分 <code>ESNext</code> 草案的规范</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"typescript-的缺点\"> TypeScript 的缺点</h4>\n<p>任何事物都是有两面性的，我认为 TypeScript 的弊端在于：</p>\n<ul>\n<li>有一定的学习成本，需要理解接口（Interfaces）,泛型（Generics）,类（Classes）,枚举类型（Enums）等前端工程师可能不是很熟悉的概念</li>\n<li>短期可能会增加一些开发成本，毕竟要多写一些类型的定义，不过对于一个需要长期维护的项目，TypeScript 能够减少其维护成本</li>\n<li>集成到构建流程需要一些工作量</li>\n<li>可能和一些库结合的不是很完美</li>\n</ul>\n<h3 id=\"monorepo\"> Monorepo</h3>\n<p><code>Monorepo</code> 是管理项目代码的一个方式，指在一个项目仓库 (repo) 中管理多个模块/包 (package)，不同于常见的每个模块建一个 repo</p>\n<p><code>Monorepo</code> 和 <code>Multirepo</code> 是两种不同的源码管理理念，<code>Monorepo</code> 是把所有的相关项目都放在一个仓库中（例如：React, Angular, Babel, Jest, Umijs, ...<code>），Multirepo</code> 则是按模块把子项目拆分到多个仓库中（例如：Rollup, ...）。前者允许多元化发展（各项目可以有自己的构建工具,依赖管理策略,单元测试方法），后者希望集中管理，减少项目间的差异带来的沟通成本。</p>\n<p><code>Monorepo</code> 最主要的好处是统一的工作流和 Code Sharing。比如我想看一个 pacakge 的代码,了解某段逻辑，不需要找它的 repo，直接就在当前 repo；当某个需求要修改多个 pacakge 时，不需要分别到各自的 repo 进行修改,测试,发版或者 npm link，直接在当前 repo 修改，统一测试,统一发版。只要搭建一套脚手架，就能管理（构建,测试,发布）多个 package。</p>\n<h3 id=\"lerna\"> Lerna</h3>\n<p><code>Lerna</code> 是一个管理多个 npm 模块的工具，是 Babel 自己用来维护自己的 Monorepo 并开源出的一个项目。优化维护多包的工作流，解决多个包互相依赖，且发布需要手动维护多个包的问题。</p>\n<h3 id=\"rollup\"> Rollup</h3>\n<p><code>Rollup</code> 是 <code>JavaScript</code> 的模块 <code>bundler，可将一小段代码编译为更大或更复杂的内容，例如库或应用程序。</code></p>\n<p>它对 <code>JavaScript</code> 的 <code>ES6</code> 修订版中包含的代码模块使用了新的标准化格式，而不是先前的特殊解决方案（例如 <code>CommonJS</code> 和 <code>AMD</code>）。ES 模块使用户可以自由，无缝地结合自己喜欢的库中最有用的单个函数。</p>\n<h2 id=\"模块说明\"> 模块说明</h2>\n<p>Vue 相比传统 Javascript 开发，最大优势之一就是其强大的组件化和代码可复用化能力。Vue 极大的提升了前端代码编写的规范性和可维护性， <strong>Eurynome Cloud UI</strong> 采用 <code>Mononrepo</code> 组件库的方式构建前端工程，就是在已有 Vue 强大的组件化能力之上，进一步通用化前端工程代码。提升代码的开发速度和可维护性。</p>\n<h3 id=\"hecate-h-bpmn-moddle\"> @hecate/h-bpmn-moddle</h3>\n<p>基于 <code>bpmn-js</code>,<code>bpmn-js-properties-panel</code>,<code>camunda-bpmn-moddle</code>,<code>diagram-js</code> 构建的标准化的 Bpmn 2.0 在线工作流编辑器。实现编辑器网格,放大缩小,Redo,Undo,模型导入,导出XML,SVG格式模型,部署至服务等功能。</p>\n<p>以组件的形式定义的标准化组件，可在应用中直接引用。</p>\n<h3 id=\"hecate-h-button\"> @hecate/h-button</h3>\n<p>结合实际应用需求，基于 <code>Vuetify</code> Button 等组件封装的按钮组件。通用化按钮使用，减少代码中重复性代码量。</p>\n<p>以组件的形式定义的标准化组件，可在应用中直接引用。</p>\n<h3 id=\"hecate-h-table\"> @hecate/h-table</h3>\n<p>结合实际应用需求，基于 <code>Vuetify</code> Table 等组件封装的按钮组件。通用化按钮使用，减少代码中重复性代码量。</p>\n<p>以组件的形式定义的标准化组件，可在应用中直接引用。</p>\n<h3 id=\"hecate-plugins\"> @hecate/plugins</h3>\n<p>所有基于 <code>Vue</code> 和 <code>Vuetify</code> 构建的应用，都需要重复配置 <code>plugins</code> 等信息。<code>@hecate/plugins</code> 将常规工程中，常用的第三方插件 <code>plugins</code> 配置通用化，方便和简化新工程构建的配置。</p>\n<p>以组件的形式定义的标准化组件，可在应用中直接引用。</p>\n<h3 id=\"hecate-utils\"> @hecate/utils</h3>\n<p>将系统中通用的,工具类代码以及Lodash等工具统一封装，以组件的形式定义的标准化组件，可在应用中直接引用。</p>\n<h3 id=\"herodotus-ui\"> @herodotus/ui</h3>\n<p>基于 <code>Vuetify</code>, <code>Vue</code>, <code>Typescript</code> 构建的 <code>Eurynome Cloud</code> 前端工程。</p>\n",
      "image": "https://herodotus.cn/images/vue/why-vuetify.png",
      "date_published": "2021-10-27T16:13:57.000Z",
      "date_modified": "2021-10-28T15:24:29.000Z",
      "authors": [
        {
          "name": "码匠君"
        }
      ],
      "tags": []
    },
    {
      "title": "依赖组件",
      "url": "https://herodotus.cn/guide/dependent/",
      "id": "https://herodotus.cn/guide/dependent/",
      "content_html": "<h1 id=\"依赖组件\"> 依赖组件</h1>\n<p>系统使用到的相关组件</p>\n<h2 id=\"前端框架\"> 前端框架</h2>\n<ul>\n<li><a href=\"https://cn.vuejs.org/\" target=\"_blank\" rel=\"noopener noreferrer\">Vue</a></li>\n<li><a href=\"https://cli.vuejs.org/zh/guide/\" target=\"_blank\" rel=\"noopener noreferrer\">Vue cli</a></li>\n<li><a href=\"https://class-component.vuejs.org/\" target=\"_blank\" rel=\"noopener noreferrer\">Vue Class Component</a></li>\n<li><a href=\"https://www.npmjs.com/package/vue-property-decorator\" target=\"_blank\" rel=\"noopener noreferrer\">Vue property decorator</a></li>\n</ul>\n<h2 id=\"基础框架组件\"> 基础框架组件</h2>\n<ul>\n<li><a href=\"https://vuetifyjs.com/zh-Hans/\" target=\"_blank\" rel=\"noopener noreferrer\">Vuetify</a></li>\n</ul>\n<h2 id=\"ioc组件\"> IOC组件</h2>\n<ul>\n<li><a href=\"https://www.npmjs.com/package/typescript-ioc\" target=\"_blank\" rel=\"noopener noreferrer\">typescript-ioc</a>。</li>\n</ul>\n<div><p>说明</p>\n<ul>\n<li><strong>优点</strong>：和Spring非常像的 Typescript IOC 组件，用着非常方便。</li>\n<li><strong>缺点</strong>：一年多未更新了。</li>\n</ul>\n</div>\n<h2 id=\"表单校验组件\"> 表单校验组件</h2>\n<ul>\n<li><a href=\"https://vee-validate.logaretm.com/v4/\" target=\"_blank\" rel=\"noopener noreferrer\">VeeValidate</a></li>\n</ul>\n<h2 id=\"离线存储组件\"> 离线存储组件</h2>\n<ul>\n<li><a href=\"http://localforage.docschina.org/\" target=\"_blank\" rel=\"noopener noreferrer\">LocalForage</a></li>\n</ul>\n<h2 id=\"消息提示框组件\"> 消息提示框组件</h2>\n<ul>\n<li><a href=\"https://sweetalert2.github.io/\" target=\"_blank\" rel=\"noopener noreferrer\">Sweetalert2</a></li>\n</ul>\n<h2 id=\"工作流编辑器组件\"> 工作流编辑器组件</h2>\n<ul>\n<li><a href=\"https://github.com/bpmn-io/bpmn-js\" target=\"_blank\" rel=\"noopener noreferrer\">bpmn-js</a></li>\n<li><a href=\"https://github.com/bpmn-io/bpmn-js-properties-panel\" target=\"_blank\" rel=\"noopener noreferrer\">bpmn-js-properties-panel</a></li>\n<li><a href=\"https://github.com/camunda/camunda-bpmn-moddle/commits/master\" target=\"_blank\" rel=\"noopener noreferrer\">camunda-bpmn-moddle</a></li>\n</ul>\n<h2 id=\"通用工具库组件\"> 通用工具库组件</h2>\n<ul>\n<li><a href=\"https://www.axios-http.cn/docs/intro\" target=\"_blank\" rel=\"noopener noreferrer\">Axios</a></li>\n<li><a href=\"https://ricostacruz.com/nprogress/\" target=\"_blank\" rel=\"noopener noreferrer\">Nprogress</a></li>\n<li><a href=\"http://momentjs.cn/docs/\" target=\"_blank\" rel=\"noopener noreferrer\">Moment.js</a></li>\n<li><a href=\"https://www.lodashjs.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Lodash</a></li>\n</ul>\n<h2 id=\"图标库\"> 图标库</h2>\n<ul>\n<li><a href=\"https://pictogrammers.github.io/@mdi/font/5.9.55/\" target=\"_blank\" rel=\"noopener noreferrer\">@mdi/font</a></li>\n</ul>\n",
      "date_published": "2021-10-27T16:13:57.000Z",
      "date_modified": "2021-10-28T15:24:29.000Z",
      "authors": [
        {
          "name": "码匠君"
        }
      ],
      "tags": []
    },
    {
      "title": "环境部署",
      "url": "https://herodotus.cn/guide/deployment/",
      "id": "https://herodotus.cn/guide/deployment/",
      "content_html": "<h1 id=\"环境部署\"> 环境部署</h1>\n<h2 id=\"准备工作\"> 准备工作</h2>\n<h3 id=\"后端运行所需的基础设施\"> 后端运行所需的基础设施</h3>\n<table>\n<thead>\n<tr>\n<th>设施</th>\n<th>当前版本</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Nacos</td>\n<td>2.0.3</td>\n<td>分布式版本使用的Nacos作为配置中心和服务发现中心，所以需要安装Nacos。不管本地运行还是Docker,K8S环境都需要。</td>\n</tr>\n<tr>\n<td>Redis</td>\n<td>3.2.100+</td>\n<td>运行的必须组件，分布式版本,单体版本；本地运行还是还是Docker,K8S环境都需要</td>\n</tr>\n<tr>\n<td>Kafka</td>\n<td>2.6.0+</td>\n<td>运行的必须组件，分布式版本,单体版本；本地运行还是还是Docker,K8S环境都需要。（虽然本系统使用的是spring cloud bus同时兼容RabbitMQ和Kafka，由于使用Debezium来支持工作流,ElasticSearch数据同步，所以如果没有特殊的使用需求还是建议使用Kafka）</td>\n</tr>\n<tr>\n<td>PostgreSQL 数据库</td>\n<td>建议使用最新版，其它版本也可以运行</td>\n<td>个人多年项目经验，感觉PostgreSQL更好用和顺手，所以默认数据为PostgreSQL。基础代码都是使用spring data jpa（Mybatis Plus也支持），所以其它数据库也支持，修改一下配置就行</td>\n</tr>\n<tr>\n<td>MySQL 数据库</td>\n<td>5.6.5+</td>\n<td>Nacos 运行需要依赖数据库，长久运行需要依赖于MySQL（目前Nacos不支持其它数据库，虽说Nacos RoadMap有多数据库支持，不知道什么时候开发完成）。本地运行为了省事，也可以用Nacos的内置数据库，这样减少本地运行资源占用</td>\n</tr>\n<tr>\n<td>Sentinel Dashboard</td>\n<td>1.8.0</td>\n<td>本地调试运行可以不需要</td>\n</tr>\n<tr>\n<td>Skywalking</td>\n<td>8.7.0</td>\n<td>本地运行可以不需要</td>\n</tr>\n<tr>\n<td>ELK</td>\n<td>7.0.0 +</td>\n<td>日志中心中心所需基础环境，本地运行可以不需要，需要在配置关闭日志收集</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><strong>(1) 后端本地运行所需标准最小环境</strong></li>\n</ul>\n<div><pre><code>Nacos &gt;= 1.1.0 (推荐使用最新版Nacos)\nRedis &gt;= 3.0.0\nKafka &gt;= 2.6.0 (目前Kafka运行还需要依赖Zookeeper)\nPostgreSQL &gt;= 10\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><ul>\n<li><strong>(2) 开发环境</strong></li>\n</ul>\n<div><pre><code>IDEA 或 Eclipse （推荐IDEA）\nJDK &gt;= 1.8 (推荐1.8版本)\nMaven &gt;= 1.3\nGit 使用最新版\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><ul>\n<li><strong>(3) 环境配置</strong></li>\n</ul>\n<p>参见：<a href=\"./../knowledge/dev-environment.html\">本地开发环境搭建</a></p>\n<h3 id=\"前端运行所需的基础设施\"> 前端运行所需的基础设施</h3>\n<table>\n<thead>\n<tr>\n<th>设施</th>\n<th>当前版本</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Nodejs</td>\n<td>14.17.0 +</td>\n<td>运行前端Vue工程必须依赖，如果不需要运行前端可以忽略</td>\n</tr>\n<tr>\n<td>Yarn</td>\n<td>1.22.10</td>\n<td>前端包管理工具，如果习惯使用Yarn，用Npm或其它工具也都可以</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><strong>(1) 前端端本地运行所需标准最小环境</strong></li>\n</ul>\n<div><pre><code>Nodejs&gt;= 10\nYarn&gt;= 1.22.10 （Yarn2 目前会有很多问题，劣势太多不建议使用）\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><ul>\n<li><strong>(2) 开发环境</strong></li>\n</ul>\n<div><pre><code>Visual Studio Code （Vscode）或其它 （推荐Vscode）\n</code></pre>\n<div><span>1</span><br></div></div><ul>\n<li><strong>(3) 环境配置</strong></li>\n</ul>\n<p>参见：<a href=\"./../knowledge/dev-environment.html\">本地开发环境搭建</a></p>\n<h2 id=\"后端运行\"> 后端运行</h2>\n<div><p>说明</p>\n<p>开展以下各项工作以前，请确保数据库应用,Redis,Nacos,Kafka,ELK 套件已经正确安装和运行。</p>\n</div>\n<h3 id=\"_1-检出代码创建工程\"> [1]检出代码创建工程</h3>\n<h4 id=\"方式一\"> 方式一</h4>\n<ul>\n<li>\n<p>前往<a href=\"https://gitee.com/herodotus/eurynome-cloud\" target=\"_blank\" rel=\"noopener noreferrer\">Gitee下载页面</a>下载解压到工作目录</p>\n</li>\n<li>\n<p>打开IDE导入工程</p>\n</li>\n<li>\n<p><code>Eclipse</code>，菜单 <code>File -&gt; Import</code>，然后选择 <code>Maven -&gt; Existing Maven Projects</code>，点击 <code>Next</code> 按钮，选择工作目录，然后点击 <code>Finish</code> 按钮，即可成功导入。</p>\n</li>\n<li>\n<p><code>IDEA</code>，菜单 <code>File -&gt; Open</code>，然后选择已解压工程所在的目录，点击 <code>OK</code> 即可。</p>\n</li>\n</ul>\n<blockquote>\n<p>IDE会自动加载相关的依赖包，具体要依据网络以及个人本地Maven缓存情况而定。配置 Maven 本地仓库，参见：<a href=\"./../knowledge/dev-environment.html\">本地开发环境配置</a></p>\n</blockquote>\n<h4 id=\"方式二\"> 方式二</h4>\n<p><code>IDEA</code> 菜单 <code>File -&gt; New -&gt; Project From Version Control...</code>, 在弹出框中输入本工程Git地址：<a href=\"https://gitee.com/herodotus/eurynome-cloud.git\" target=\"_blank\" rel=\"noopener noreferrer\">https://gitee.com/herodotus/eurynome-cloud.git</a>，然后设置放置目录，点击 <strong>OK</strong> 即可</p>\n<h3 id=\"_2-创建数据库\"> [2]创建数据库</h3>\n<p>进入<code>PostgreSQL</code> 的<code>SQL Shell(psql)</code> (在Windows的菜单中可以找到)，使用超级管理员账号和密码登录进入数据库，执行以下脚本：</p>\n<div><pre><code>CREATE <span>USER</span> herodotus WITH PASSWORD <span>'herodotus'</span><span>;</span>\nCREATE DATABASE herodotus OWNER herodotus<span>;</span>\nGRANT ALL PRIVILEGES ON DATABASE herodotus TO herodotus<span>;</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><div><p>警告</p>\n<p>要分步,一条一条地执行，不要全部复制，一把全部执行。一定要注意每个语句结尾要以“;”结束。</p>\n</div>\n<div><p>说明</p>\n<ul>\n<li>这里不管是用户名,用户密码还是数据库名均使用herodotus是为了方便，请根据自己实际情况修改。</li>\n<li>这里没有进行分库（即：所有的服务使用同一个数据库），如不满足需求，请在整体部署完成可以正常运行后，再结合自己的实际情况修改。</li>\n<li>以上是均是以 <code>PostgreSQL</code> 作为默认数据库进行说明，如果要使用其它数据库，具体安装和建库步骤请自行探索。</li>\n</ul>\n</div>\n<div><p>提示</p>\n<p>系统默认使用 <code>PostgreSQL</code> 数据库，如果想要使用其它数据库，建议详细全面阅读本章节，对整体部署过程有了详细了解之后，再来了解如何切换数据库。参阅：<a href=\"./change-database.html\">更换数据库</a></p>\n</div>\n<div><p>提示</p>\n<p><code>Linux</code> 环境下在命令行中，以管理员账号登录 <code>PostgreSQL</code>数据库</p>\n</div>\n<h3 id=\"_3-创建或导入nacos配置\"> [3]创建或导入Nacos配置</h3>\n<div><p>说明</p>\n<p>再进行以下操作之前，请确保对Nacos中 Namespace,Group等基础概念和具体操作有所了解。<a href=\"https://nacos.io/zh-cn/docs/concepts.html\" target=\"_blank\" rel=\"noopener noreferrer\">【官方文档】</a></p>\n</div>\n<h4 id=\"方式一-手动创建nacos配置信息\"> 方式一：手动创建Nacos配置信息</h4>\n<p>工程的 <code>${project_home}/platform/eurynome-cloud-management/resources/configs</code> 目录下，放置着所有需要导入到 <code>Nacos</code> 中的默认配置。开始其它工作之前，需要先在Nacos中创建所有配置</p>\n<ol>\n<li>\n<p>访问 <code>Nacos</code> 后台管理，<a href=\"http://localhost:8848/nacos\" target=\"_blank\" rel=\"noopener noreferrer\">默认本机地址</a>, 使用默认账号<code>nacos/nacos</code>登录。</p>\n</li>\n<li>\n<p>在 <code>Nacos</code> 后台中，在 <code>配置管理 --&gt; 配置列表</code> 功能中，点击<strong>添加</strong>按钮，手动添加所有配置文件，操作如下图所示：</p>\n</li>\n</ol>\n<p><img src=\"/images/nacos/config-create.png\" alt=\"创建Nacos配置\" /></p>\n<div><p>注意</p>\n<ul>\n<li>创建配置之前，请提前规划配置放置的命名空间（Namespace）。默认是放到 Nacos <code>public</code>命名空间中，如果不符合您的需求，可以在新建命名空间之后，再进行配置的创建。</li>\n<li><code>${project_home}/platform/eurynome-cloud-management/resources/configs</code> 目录下，还有一级目录。这级目录的名称，是配置文件对应 <code>Nacos</code> 中的 <code>Group</code> 名称。所以在 <code>Nacos</code> 中新建配置时，一定要注意 <code>Group</code> 的创建和匹配。切勿全部新建到 <code>DEFAULT</code> 组下，这样会导致无法正常运行。</li>\n</ul>\n</div>\n<div><p>提示</p>\n<p>本项目所有<code>Nacos</code>配置，均是采用<code>yaml</code>格式。如需使用其它格式请自行修改</p>\n</div>\n<h4 id=\"方式二-批量导入nacos配置\"> 方式二：批量导入Nacos配置</h4>\n<p>手动方式创建Nacos配置，比较繁琐和容易出错。为了使用提升使用的便捷性，在工程 <code>${project_home}/platform/eurynome-cloud-management/resources/imports</code> 目录下提供可以直接导入的配置包。可以方便的完成导入配置,创建<code>Group</code>等操作。</p>\n<ol>\n<li>\n<p>访问 <code>Nacos</code> 后台管理，<a href=\"http://localhost:8848/nacos\" target=\"_blank\" rel=\"noopener noreferrer\">默认本机地址</a>, 使用默认账号<code>nacos/nacos</code>登录。</p>\n</li>\n<li>\n<p>在 <code>Nacos</code> 后台中，在 <code>配置管理 --&gt; 配置列表</code> 功能中，点击<strong>导入配置</strong>按钮，选择配置导入包即可，完成配置文件导入和Group的创建，操作如下图所示：</p>\n</li>\n</ol>\n<p><img src=\"/images/nacos/config-import.png\" alt=\"导入Nacos配置\" /></p>\n<div><p>注意</p>\n<ul>\n<li>创建配置之前，请提前规划配置放置的命名空间（Namespace）。默认是放到 Nacos <code>public</code>命名空间中，如果不符合您的需求，可以在新建命名空间之后，再进行配置的创建。</li>\n</ul>\n</div>\n<h3 id=\"_4-修改nacos配置\"> [4]修改Nacos配置</h3>\n<p>上一步所导入的配置信息均是使用默认的,本地化的配置，需要根据自己搭建的基础设施环境，对相关的配置进行修改。</p>\n<ol>\n<li>\n<p>访问 <code>Nacos</code> 后台管理，<a href=\"http://localhost:8848/nacos\" target=\"_blank\" rel=\"noopener noreferrer\">默认本机地址</a>, 使用默认账号<code>nacos/nacos</code>登录。</p>\n</li>\n<li>\n<p>找到对应的配置文件进行修改。常用的设置在 <code>eurynome-cloud-environment.yaml</code> 中即可修改完成，如果不满足您实际需求，可再到其它的配置文件中详细修改。</p>\n</li>\n</ol>\n<div><p>说明</p>\n<p>为了方便使用，<strong>Eurynome Cloud</strong> 所有的配置采用**“共享式,统一化多环境配置模式”**设计，大多数配置在对应 <code>多环境</code> 的 <code>eurynome-cloud-environment.yaml</code> 配置中就可以完成修改。例如，您当前使用的是 <code>development</code> 环境，那么在Nacos后台管理中，找到 Group 是 <code>development</code> 的 <code>eurynome-cloud-environment.yaml</code> 配置修改。</p>\n<p><strong>Eurynome Cloud</strong> 多环境配置设计及使用，参阅：<a href=\"./profile-design.html\">多环境配置</a></p>\n</div>\n<h3 id=\"_5-修改pom-xml配置\"> [5]修改pom.xml配置</h3>\n<p>在工程根目录下，找到 <code>pom.xml</code>, 修改对应 <code>profile</code> 中参数。由于使用的多环境，所以在该文件中，需要找到应环境的配置，修改该环境下的对应的配置信息。主要结构如下所示：</p>\n<div><pre><code><span>&lt;!-- 开发 --></span>\n<span><span><span>&lt;</span>profile</span><span>></span></span>\n    <span><span><span>&lt;</span>id</span><span>></span></span>development<span><span><span>&lt;/</span>id</span><span>></span></span>\n    <span><span><span>&lt;</span>activation</span><span>></span></span>\n        <span><span><span>&lt;</span>activeByDefault</span><span>></span></span>true<span><span><span>&lt;/</span>activeByDefault</span><span>></span></span>\n    <span><span><span>&lt;/</span>activation</span><span>></span></span>\n    <span><span><span>&lt;</span>properties</span><span>></span></span>\n        <span><span><span>&lt;</span>profile.name</span><span>></span></span>development<span><span><span>&lt;/</span>profile.name</span><span>></span></span>\n        <span><span><span>&lt;</span>database.type</span><span>></span></span>postgresql<span><span><span>&lt;/</span>database.type</span><span>></span></span>\n        <span><span><span>&lt;</span>skip.build.source.package</span><span>></span></span>false<span><span><span>&lt;/</span>skip.build.source.package</span><span>></span></span>\n        <span><span><span>&lt;</span>skip.copy.docker.resource</span><span>></span></span>false<span><span><span>&lt;/</span>skip.copy.docker.resource</span><span>></span></span>\n        <span><span><span>&lt;</span>skip.build.git.commit.info</span><span>></span></span>false<span><span><span>&lt;/</span>skip.build.git.commit.info</span><span>></span></span>\n        <span><span><span>&lt;</span>config.server-addr</span><span>></span></span>127.0.0.1:8848<span><span><span>&lt;/</span>config.server-addr</span><span>></span></span>\n        <span><span><span>&lt;</span>config.namespace</span><span>></span></span><span><span><span>&lt;/</span>config.namespace</span><span>></span></span>\n        <span><span><span>&lt;</span>discovery.server-addr</span><span>></span></span>127.0.0.1:8848<span><span><span>&lt;/</span>discovery.server-addr</span><span>></span></span>\n        <span><span><span>&lt;</span>sentinel.server-addr</span><span>></span></span>127.0.0.1:8858<span><span><span>&lt;/</span>sentinel.server-addr</span><span>></span></span>\n    <span><span><span>&lt;/</span>properties</span><span>></span></span>\n<span><span><span>&lt;/</span>profile</span><span>></span></span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br></div></div><p>必须要修改的参数涉及以下几项：</p>\n<ul>\n<li><strong>config.server-addr</strong>：配置中心地址，即Nacos服务端地址</li>\n<li><strong>config.namespace</strong>：Nacos 命名空间ID。如果要使用的是默认的命名空间，该参数不设置任何值。</li>\n<li><strong>discovery.server-addr</strong>：服务发现地址，即Nacos服务端地址</li>\n<li><strong>sentinel.server-addr</strong>：Sentinel Dashborad 地址</li>\n</ul>\n<p>详细参数说明，参阅：<a href=\"./profile-design.html\">多环境配置</a></p>\n<h3 id=\"_6-编译代码\"> [6]编译代码</h3>\n<h4 id=\"编译方式一\"> 编译方式一</h4>\n<p>用命令行进入到工程代码所在根据目录，通过执行下面命令进行编译</p>\n<div><pre><code>mvn <span>install</span>\n\n或 \n\nmvn package\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><div><p>提示</p>\n<p>推荐使用<code>install</code>命令，进行编译。使用该命令编译完成之后，会在<code>Maven</code>本地缓存中，生成响应的包，这样<code>eurynome-cloud-athena</code>功能就可以直接使用。</p>\n</div>\n<div><p>注意</p>\n<p>在第一次编译的时候，因为在本地缓存缺少相关的包，所以在执行 <code>mvn clean</code> 操作时会提示错误。因此，在第一次编译时只使用 <code>mvn package</code> 或 <code>mvn install</code>。第一次编译完成之后，就可以使用 <code>mvn clean package</code> 或 <code>mvn clean install</code> 命令进行编译。IDE界面操作也是同理。</p>\n</div>\n<h4 id=\"编译方式二\"> 编译方式二</h4>\n<p>在IDE工程中，利用IDE提供的界面操作进行编译。</p>\n<p>以<code>IDEA</code>为例，在右侧<code>Maven Panel</code>中，选择<code>eurynome-cloud(root)</code>节点，点击Lifecycle节点下的<code>install</code> 或者 <code>package</code> 进行编译。参考下图：</p>\n<p><img src=\"/images/idea/lifecycle.png\" alt=\"输入图片说明\" /></p>\n<h3 id=\"_7-数据库创建和数据初始化\"> [7]数据库创建和数据初始化</h3>\n<p>具体操作方法，参阅：<a href=\"./data-initialization.html\">数据初始化</a></p>\n<h3 id=\"_8-运行服务模块\"> [8]运行服务模块</h3>\n<div><p>说明</p>\n<p>各个服务的启动顺序并没有严格的要求，启动的先后顺序并不影响实际的使用，但是部分核心代码逻辑以及组件存在“时机性”问题，启动顺序的不同会略有时机差异性。</p>\n<p>如果您对时机性没有要求，那么请忽略启动顺序问题，随意启动。</p>\n<p>如果您对时机性有较高要求，那么请详细阅读各个服务对应的备注说明。</p>\n</div>\n<ul>\n<li>ManagementApplication （监控中心服务 可选。）</li>\n</ul>\n<div><p>提示</p>\n<p>本质上 <code>ManagementApplication</code> 服务先启动还是后启动，并不影响平台的实际使用。仅有的影响是</p>\n<ul>\n<li>先启动<code>ManagementApplication</code>服务，然后再启动其它服务，<code>Spring Boot Admin</code>会马上收到服务的运行监控信息，进行及时的展示；</li>\n<li>如果后启动<code>ManagementApplication</code>服务，其它在<code>ManagementApplication</code>之前运行服务的监控信息会间隔一段时间才会展现。</li>\n</ul>\n<blockquote>\n<p>如果要使用该服务中的<code>Spring Boot Admin</code>监控，建议最先启动该服务。</p>\n</blockquote>\n</div>\n<ul>\n<li>UpmsApplication （用户中心服务 必须）</li>\n<li>GatewayApplication （服务网关服务 必须）</li>\n<li>UaaApplication （统一认证服务 必须）</li>\n<li>BpmnApplication （分布式工作流 可选）</li>\n</ul>\n<h3 id=\"_9-运行elk-可选\"> [9]运行ELK（可选）</h3>\n<p>完整运行本套微服务架构，需要搭建 <code>ELK</code> 套件，作为日志中心以及 <code>Skywalking</code> 链路追踪的数据存储介质。</p>\n<p>目前已有基础功能尚未涉及到搜索，只有日志中心和链路追踪功能涉及到 <code>Elasticsearch</code>。如果本地开发不要相关功能，就不需要安装和运行<code>ELK</code>套件。</p>\n<div><p>提示</p>\n<p>如果本地不想使用 <code>ELK</code>，那么需要关闭微服务的日志收集功能。</p>\n<p>修改你所使用 <code>多环境</code> 对应的 <code>eurynome-cloud-environment.yaml</code> 配置中的 <code>herodotus.environment.logstash-server-addr</code> 属性的值，将其值设置成 <code>false</code> ，即可关闭日志收集功能，就解除服务对 <code>ELK</code> 的依赖</p>\n</div>\n<h3 id=\"_10-运行skywalking-可选\"> [10]运行Skywalking（可选）</h3>\n<p>完整运行本套微服务架构，需要搭建 <code>ELK</code> 套件，作为日志中心以及<code>Skywalking</code>链路追踪的数据存储介质。正式环境运行建议使用 <code>Docker</code> 或 <code>K8S</code> 的方式运行 <code>Skywalking</code>，并以 <code>Docker</code> 的形式运行服务。</p>\n<p>如果仅是在本地运行调试服务与 <code>Skywalking</code> 的联动，可以在IDE中增加参数后，再运行服务即可。</p>\n<p>以IDEA为例，点开 <code>Edit Configurations...</code>，在对应服务的 <code>VM Options</code> 输入框中添加如下参数即可调试 <code>Skywalking</code></p>\n<div><pre><code>-javaagent:D:/Workspaces/Java/herodotus-cloud/configurations/docker/context/agent/skywalking-agent-es7-8.6.0.jar<span>=</span>agent.service_name<span>=</span>herodotus-cloud-upms-ability,collector.backend_service<span>=</span><span>192.168</span>.101.10:11800\n</code></pre>\n<div><span>1</span><br></div></div><p>操作界面如下图所示，IDEA版本不同配置方式会有差异</p>\n<p><img src=\"/images/idea/local-skywalking.jpeg\" alt=\"输入图片说明\" /></p>\n<h3 id=\"_11-以docker方式部署-可选\"> [11]以Docker方式部署（可选）</h3>\n<p>参见：<a href=\"./../microservices/container-deployment.html\">容器化部署</a></p>\n<h3 id=\"_12-部署验证\"> [12]部署验证</h3>\n<p>以上步骤完成之后，工程后端整体搭建部署完成。可以通过运行前端界面进行操作或者用 <code>Postman</code> 调用接口的方式进行验证。</p>\n<p>如果界面操作正常，或者接口调用正常，则说明工程已经正确部署。更多验证，参阅：<a href=\"./../microservices/oauth2-authorization.html\">OAuth2授权标准</a></p>\n<h2 id=\"前端运行\"> 前端运行</h2>\n<h3 id=\"_1-检出代码\"> [1]检出代码</h3>\n<p>在合适位置上，使用Git检出前端工程代码。<a href=\"https://gitee.com/herodotus/eurynome-cloud-ui\" target=\"_blank\" rel=\"noopener noreferrer\">项目地址</a></p>\n<h3 id=\"_2-修改配置\"> [2]修改配置</h3>\n<p>在前端工程 <code>${project_home}/packages/@herodotus/ui</code> 录下，找到 <code>.env.development</code> 或者 <code>.env.production</code> 文件。修改其中的参数</p>\n<div><p>参数说明</p>\n<ul>\n<li><strong>NODE_ENV</strong>：当前多环境名称</li>\n<li><strong>VUE_APP_SYSTEM_NAME</strong>：界面显示的系统名称</li>\n<li><strong>VUE_APP_GATEWAY</strong>：服务网关访问地址</li>\n<li><strong>VUE_APP_PROJECT</strong>：地址切换名称。通过该参数以动态修改域名以外的地址，以实现单体版等使用同一套操作界面。<code>eurynome</code>指定是微服务版，其它任意值指定是单体版</li>\n<li><strong>VUE_APP_OAUTH_CLIENT_ID</strong>：OAuth2 密码模式 Client Id。</li>\n<li><strong>VUE_APP_OAUTH_CLIENT_SECRET</strong>：OAuth2 密码模式 Client 密码</li>\n<li><strong>VUE_APP_OAUTH_GRANT_TYPE</strong>：OAuth2 授权模式</li>\n<li><strong>VUE_APP_SECRET_KEY</strong>：前端关键信息 AES 加密秘钥</li>\n</ul>\n</div>\n<div><p>注意</p>\n<p><code>VUE_APP_SECRET_KEY</code> 秘钥，并不是本系统前后端数据加密传输使用的秘钥，只是对前端临时存储的关键信息加密的秘钥。</p>\n<p>本系统前后端数据加密传输，是基于自主设计的自定义数据传输 Session，实现 AES 加密秘钥的动态生成,加密传输,一人一钥机制。每次使用系统都会动态重新生成，采用 RSA 前后端加密传输，临时存储至前端。缓存时间与 <code>OAuth 2 Token</code> 设置时间相同，正常退出系统后，会清除前端临时存储数据。</p>\n<blockquote>\n<p>并没有绝对安全的加密措施，前后端数据加密传输也仅仅是相对提升安全性。毕竟不管如何处理，前端都要存储一定的关键信息，而且前端是最容易破解的。正式环境使用还是要配合 <code>Https</code> 以及其它安全防护措施。</p>\n</blockquote>\n</div>\n<h3 id=\"_3-前端运行命令\"> [3]前端运行命令</h3>\n<div><pre><code>// 进入目录\n<span>cd</span> eurynome-cloud-ui\n\n// 安装依赖\n<span>yarn</span> <span>install</span>\n\n// 如果要使用 <span><span>`</span>.env.development<span>`</span></span> 中的配置值，使用下面命令\n<span>yarn</span> e:ui dev\n\n// 如果要使用 <span><span>`</span>.env.production<span>`</span></span> 中的配置值，使用下面命令\n\n<span>yarn</span> e:ui prod\n\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><h3 id=\"_4-运行验证\"> [4]运行验证</h3>\n<p>打开浏览器，输入：<a href=\"http://localhost:3000\" target=\"_blank\" rel=\"noopener noreferrer\">http://localhost:3000</a> 默认账户/密码 system/123456</p>\n<p>若能正确展示登录页面，并能成功登录，菜单及页面展示正常，则表明环境搭建成功</p>\n",
      "image": "https://herodotus.cn/images/nacos/config-create.png",
      "date_published": "2021-10-27T16:13:57.000Z",
      "date_modified": "2021-10-28T15:24:29.000Z",
      "authors": [
        {
          "name": "码匠君"
        }
      ],
      "tags": []
    },
    {
      "title": "前端问题",
      "url": "https://herodotus.cn/guide/frontend-notices/",
      "id": "https://herodotus.cn/guide/frontend-notices/",
      "content_html": "<h1 id=\"前端问题\"> 前端问题</h1>\n<h2 id=\"暂时不要升级的依赖包\"> 暂时不要升级的依赖包</h2>\n<table>\n<thead>\n<tr>\n<th>依赖包</th>\n<th>当前使用版本</th>\n<th>最新版本</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>remark-footnotes</td>\n<td>2.0.0</td>\n<td>= 3.0.0</td>\n<td>目前不要升级该包，该包是为了解决 Nuxt 启动 Warning 问题</td>\n</tr>\n<tr>\n<td>rollup-plugin-vue</td>\n<td>5.1.9</td>\n<td>&gt; 6.0.0</td>\n<td>目前不要升级该包，等工程变更为 Vue3 在进行升级</td>\n</tr>\n<tr>\n<td>sass</td>\n<td>4.44.2</td>\n<td>&gt; 5.9.0</td>\n<td>目前不要升级该包，会出现很多样式除法过期的提示，需要等到Vuetify大版本升级后再考虑</td>\n</tr>\n<tr>\n<td>sass-loader</td>\n<td>10.1.1</td>\n<td>= 12.1.0</td>\n<td>目前不要升级该包，最新版本很多包还有没有适配</td>\n</tr>\n<tr>\n<td>webpack</td>\n<td>4.46.0</td>\n<td>&gt; 5.40.0</td>\n<td>目前不要升级该包，compression-webpack-plugin会抛错误</td>\n</tr>\n<tr>\n<td>css-loader</td>\n<td>5.2.7</td>\n<td>&gt; 6.3.0</td>\n<td>目前不要升级该包，编译时会抛错误</td>\n</tr>\n<tr>\n<td>typescript</td>\n<td>4.2.3</td>\n<td>&gt; 4.3.0</td>\n<td>目前不要升级该包，升级后系统无法正确运行</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"问题一-升级依赖包时出错\"> 问题一：升级依赖包时出错</h2>\n<p>使用<strong>yarn upgrade-interactive --latest</strong>命令升级依赖包的时候，特别是@hecate/form-service 中，有依赖包可以升级时（目测是由于使用了 Nuxt），经常会出现下面的错误。</p>\n<div><pre><code>Invariant Violation: expected workspace package to exist for &quot;autoprefixer&quot;\n    at invariant (D:\\LocalCaches\\yarn\\global\\node_modules\\yarn\\lib\\cli.js:2314:15)\n    at _loop2 (D:\\LocalCaches\\yarn\\global\\node_modules\\yarn\\lib\\cli.js:94537:9)\n    at PackageHoister.init (D:\\LocalCaches\\yarn\\global\\node_modules\\yarn\\lib\\cli.js:94596:19)\n    at PackageLinker.getFlatHoistedTree (D:\\LocalCaches\\yarn\\global\\node_modules\\yarn\\lib\\cli.js:48744:20)\n    at PackageLinker.&lt;anonymous&gt; (D:\\LocalCaches\\yarn\\global\\node_modules\\yarn\\lib\\cli.js:48755:27)\n    at Generator.next (&lt;anonymous&gt;)\n    at step (D:\\LocalCaches\\yarn\\global\\node_modules\\yarn\\lib\\cli.js:310:30)\n    at D:\\LocalCaches\\yarn\\global\\node_modules\\yarn\\lib\\cli.js:328:14\n    at new Promise (&lt;anonymous&gt;)\n    at new F (D:\\LocalCaches\\yarn\\global\\node_modules\\yarn\\lib\\cli.js:5301:28)\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><blockquote>\n<p>这个问题是 yarn 本身的 Bug，虽然 yarn 已经升级到了 1.22.10，但是一会好一会不好的。</p>\n</blockquote>\n<h3 id=\"_1-解决办法一\"> （1）解决办法一</h3>\n<p>在工程中将 yarn 的版本，降到 1.19.XX。这种方法，只对本工程有效，这样其它工程仍旧可以使用最新版的 yarn，避免了全局安装低版本 yarn 的问题</p>\n<div><pre><code>yarn policies set-version 1.19.XX\n\n// .yarn 目录生成后，执行\nyarn install\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><blockquote>\n<p>这个命令会在工程中生成一个.yarn 目录以及一个.yarnrc 文件，并在其中指定 yarn 版本。</p>\n</blockquote>\n<h3 id=\"_2-解决办法二\"> （2）解决办法二</h3>\n<p>这种办法土一点，但是可以不用去理会 yarn 的不管问题。</p>\n<div><pre><code>// 1,先查询看看那些包可以升级\nyarn upgrade-interactive --latest\n\n// 2,到指定的包的package.json中，手工修改版本号\n\n// 3,清除组件包的依赖\nlerna clean\n\n// 4,重新关联依赖\nlerna bootstrap\n\n或\n\nyarn install\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><h2 id=\"问题二-运行命令是出现禁止脚本运行的错误\"> 问题二：运行命令是出现禁止脚本运行的错误</h2>\n<p>解决方法：打开 PowerShell（在小娜里搜就行），输入：</p>\n<div><pre><code>set-executionpolicy remotesigned\n</code></pre>\n<div><span>1</span><br></div></div><p>之后选择 Y，问题就解决了。</p>\n",
      "date_published": "2021-10-27T16:13:57.000Z",
      "date_modified": "2021-10-28T15:24:29.000Z",
      "authors": [
        {
          "name": "码匠君"
        }
      ],
      "tags": []
    },
    {
      "title": "快速了解",
      "url": "https://herodotus.cn/guide/get-started/",
      "id": "https://herodotus.cn/guide/get-started/",
      "content_html": "<h1 id=\"快速了解\"> 快速了解</h1>\n<h2 id=\"项目概览\"> 项目概览</h2>\n<p><strong>Eurynome Cloud</strong> 是一款基于 <code>Spring Boot</code>,<code>Spring Cloud</code>,<code>Spring Cloud Alibaba</code>,<code>Vue</code>,<code>Vuetify</code> 的前后端分离微服务架构和服务能力开发平台。同时还提供与微服务版本技术体系一致的单体版架构，无须搭建复杂的微服务基础设施，即可快速搭建基于 <code>OAuth2</code> 的,前后端分离的服务应用。</p>\n<ul>\n<li><strong>Eurynome Cloud 在线文档</strong>：<a href=\"https://herodotus.cn\" target=\"_blank\" rel=\"noopener noreferrer\">https://herodotus.cn</a></li>\n<li><strong>Eurynome Cloud 源码下载</strong>：<a href=\"https://gitee.com/herodotus/eurynome-cloud\" target=\"_blank\" rel=\"noopener noreferrer\">https://gitee.com/herodotus/eurynome-cloud</a></li>\n<li><strong>Eurynome Cloud 在线提问</strong>：<a href=\"https://gitee.com/herodotus/eurynome-cloud/issues\" target=\"_blank\" rel=\"noopener noreferrer\">https://gitee.com/herodotus/eurynome-cloud/issues</a></li>\n<li><strong>Eurynome Cloud 博客</strong>：<a href=\"https://my.oschina.net/pointerv\" target=\"_blank\" rel=\"noopener noreferrer\">【开源中国】</a>，<a href=\"https://blog.csdn.net/Pointer_v\" target=\"_blank\" rel=\"noopener noreferrer\">【CSDN】</a></li>\n<li>QQ 群号： <a href=\"https://jq.qq.com/?_wv=1027&amp;k=bIerJVy8\" target=\"_blank\" rel=\"noopener noreferrer\">922565573</a></li>\n</ul>\n<h2 id=\"主要特性\"> 主要特性</h2>\n<ul>\n<li>面向互联网和企业级应用开发（支持手机验证码,小程序,第三方应用登录,支持证照审核,文本图片音频视频内容审核,企业人事管理等诸多功能）</li>\n<li>Maven多模块依赖，高度模块化和可配置化，方便模块升级,增减模块。</li>\n<li>适配多种数据库类型，同时支持 <code>Spring Data JPA</code> 和 <code>Mybatis Plus</code></li>\n<li>支持动态方法级权限，无须配置 <code>@PreAuthorize</code> 注解,使用 <code>antMatchers</code> 方法控制权限。</li>\n<li>完善的XSS防范及脚本过滤和SQL注入防控机制，便捷的,灵活的防刷机制,杜绝外部恶意攻击</li>\n<li>多种消息队列支持，基于消息总线适配 <code>RabbitMQ</code> 和 <code>Kafka</code></li>\n<li>自动化权限数据收集,数据表结构默认数据自动初始化,<code>Nacos</code> 配置自动导入。</li>\n<li>自研多级数据缓存，完美融合 <code>Spring Data JPA</code> &amp; <code>Hibernate</code> 二级查询缓存。</li>\n<li>共享式,统一性多环境配置，统一化配置设定，简化配置参数修改数量，降低修改配置出错率，提升平台维护便捷性。</li>\n</ul>\n<h2 id=\"技术选型\"> 技术选型</h2>\n<p><strong>1,系统环境</strong></p>\n<ul>\n<li>Java EE 8</li>\n<li>Servlet 3.0</li>\n<li>Apache Maven 3.0</li>\n</ul>\n<p><strong>2,主框架</strong></p>\n<ul>\n<li>Spring Boot 2.5.X</li>\n<li>Spring Cloud 2020.0.3</li>\n<li>Spring Cloud Alibaba 2021.1</li>\n<li>Spring Security &amp; OAuth 2.0</li>\n</ul>\n<p><strong>3,持久层</strong></p>\n<ul>\n<li>Apache Mybatis &amp; Mybatis Plus</li>\n<li>Spring Boot Data JPA</li>\n<li>Spring Boot Validation</li>\n<li>Jetcache,Caffeine,Redis lettuce</li>\n</ul>\n<h2 id=\"内置功能\"> 内置功能</h2>\n<ul>\n<li><strong>用户管理</strong>：用户是系统操作者，该功能主要完成系统用户配置。包含第三方登录用户信息的管理。</li>\n<li><strong>角色管理</strong>：创建用户角色，为角色权限分配,设置角色接口权限划分。</li>\n<li><strong>权限管理</strong>：动态设定接口表达式权限，替代在代码中使用 <code>@PreAuthorize</code> 注解,<code>antMatchers</code> 方法等传统权限控制手段。</li>\n<li><strong>终端管理</strong>：<code>OAuth2</code> 终端信息管理，设置终端认证类型,Token有效时间,权限范围等信息。</li>\n<li><strong>应用管理</strong>：结合 <code>OAuth2</code> 机制，创建应用信息，申请APP_KEY。</li>\n<li><strong>范围管理</strong>：创建终端权限范围,设置范围对应权限。</li>\n<li><strong>机构管理</strong>：配置系统组织机构，支持树形结构展示。</li>\n<li><strong>部门管理</strong>：配置机构下属部门信息，支持树形机构展示。</li>\n<li><strong>人员管理</strong>：配置机构人员信息，为人员分配和创建用户信息。</li>\n<li><strong>归属管理</strong>：配置机构,部门和人员的归属关系，支持人员信息唯一，绑定标准机构,党团,工会等多种机构类型。避免针对不同机构类型为统一人员创建重复信息。此种结构设定，与<code>Camunda</code>工作流人员体系一一对应。</li>\n<li><strong>系统接口</strong>：根据业务代码自动生成相关的api接口文档。</li>\n<li><strong>服务监控</strong>：监视当前系统CPU,内存,磁盘,堆栈等相关信息。</li>\n<li><strong>工作流编辑器</strong>：基于<code>BPMN 2.0</code>标准的在线工作流模型编辑器，支持<code>SVG</code>,<code>XML</code>格式导入,导出。</li>\n</ul>\n",
      "date_published": "2021-10-27T16:13:57.000Z",
      "date_modified": "2021-10-28T15:24:29.000Z",
      "authors": [
        {
          "name": "码匠君"
        }
      ],
      "tags": []
    },
    {
      "title": "注意事项",
      "url": "https://herodotus.cn/guide/notices/",
      "id": "https://herodotus.cn/guide/notices/",
      "content_html": "<h1 id=\"注意事项\"> 注意事项</h1>\n<h2 id=\"前言\"> 前言</h2>\n<p>本章节主要介绍，升级至不同版本所需要注意的事项，以减少版本差异带来的系统运行,配置部署问题。</p>\n<div><p>警告</p>\n<p>当你更新代码后，发现版本号有变化，需要重新编译工程代码，进行重新部署后再使用。</p>\n</div>\n<h2 id=\"v2-5-5-0-版本注意事项\"> v2.5.5.0 版本注意事项</h2>\n<p>v2.5.5.0 版本以前，<strong>Eurynome Cloud</strong> 数据库初始化主要采用业务表自动创建和OAuth2部分表手工创建的方式。为了让数据库初始化工作更加便捷，v2.5.5.0 版本将原有需要手工创建的OAuth2数据表，全部改造为自动创建。</p>\n<p>OAuth2中，涉及数据库操作部分的代码，完全采用纯<code>JDBC</code>,使用原生SQL的方式实现。原生SQL的方式导致SQL语句中各个数据库字段的名称，一定要与实际数据库表字段对应，而且大小写敏感。OAuth2 所有业务表中，90%的字段都是使用小写字母定义，剩余的字段中会存在大小写混合的情况。而使用<code>Spring Data JPA</code>的自动建表机制，会统一使用小写字母进行建表，这样就会导致OAuth2部分业务失效。</p>\n<h3 id=\"_1-一定要修改nacos配置后再运行服务\"> [1]一定要修改Nacos配置后再运行服务</h3>\n<p>如果您现在使用的系统，主要是为了研究和学习，没有实际应用的数据。那么建议在工程 <code>${project_home}/platform/eurynome-cloud-management/resources/imports</code> 目录下找到最新版本的Nacos配置，重新导入Nacos的配置，这样就不会出现上述问题。</p>\n<p>如果已经在使用本系统，建议以最小化的方式修改Nacos配置后再使用系统。</p>\n<p>在Nacos中，找到<code>eurynome-cloud-database.yaml</code>，修改配置<code>spring.jpa.hibernate.naming.physical-strategy</code>。</p>\n<p><strong>修改前</strong></p>\n<div><pre><code><span>spring</span><span>:</span>\n  <span>jpa</span><span>:</span>\n    <span>hibernate</span><span>:</span>\n      <span>naming</span><span>:</span>\n        <span>physical-strategy</span><span>:</span> org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p><strong>修改后</strong></p>\n<div><pre><code><span>spring</span><span>:</span>\n  <span>jpa</span><span>:</span>\n    <span>hibernate</span><span>:</span>\n      <span>naming</span><span>:</span>\n        <span>physical-strategy</span><span>:</span> cn.herodotus.eurynome.data.jpa.hibernate.HerodotusPhysicalNamingStrategy\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div>",
      "date_published": "2021-10-27T16:13:57.000Z",
      "date_modified": "2021-10-28T15:24:29.000Z",
      "authors": [
        {
          "name": "码匠君"
        }
      ],
      "tags": []
    },
    {
      "title": "多环境配置",
      "url": "https://herodotus.cn/guide/profile-design/",
      "id": "https://herodotus.cn/guide/profile-design/",
      "content_html": "<h1 id=\"多环境配置\"> 多环境配置</h1>\n<h2 id=\"什么是多环境配置\"> 什么是多环境配置？</h2>\n<p>在实际项目开发过程中，我们往往需要区分开发，测试，联调,预发布，生产等不同的应用环境。这些应用环境用途不同，对应环境的配置项,稳定性,数据质量,保障性,可接触人群等要求也不同，比如Swagger一般上在生产时是关闭的；不同环境数据库地址,端口号等都是不尽相同的。要是没有多环境的自由切换，部署起来是很繁琐也容易出错的。</p>\n<p>使用多环境配置，可以针对不同的应用环境，提前配置好对应的环境配置信息。在使用时，仅需要修改具体的环境名称，就可以把对应环境配置信息,系统参数等相关内容全部切换。不仅使用便捷，还极大地降低了手工修改参数的出错率。</p>\n<h2 id=\"maven-多环境配置\"> Maven 多环境配置</h2>\n<p>使用<code>Maven</code>可以通过在<code>pom.xml</code>中增加<code>&lt;profiles&gt;</code>配置进行多环境的配置。参见以下示例：</p>\n<div><pre><code><span><span><span>&lt;</span>profiles</span><span>></span></span>\n    <span><span><span>&lt;</span>profile</span><span>></span></span>\n        <span><span><span>&lt;</span>id</span><span>></span></span>development<span><span><span>&lt;/</span>id</span><span>></span></span>\n        <span><span><span>&lt;</span>activation</span><span>></span></span>\n            <span><span><span>&lt;</span>activeByDefault</span><span>></span></span>true<span><span><span>&lt;/</span>activeByDefault</span><span>></span></span>\n        <span><span><span>&lt;/</span>activation</span><span>></span></span>\n        <span><span><span>&lt;</span>properties</span><span>></span></span>\n            ...\n        <span><span><span>&lt;/</span>properties</span><span>></span></span>\n    <span><span><span>&lt;/</span>profile</span><span>></span></span>\n    <span><span><span>&lt;</span>profile</span><span>></span></span>\n        <span><span><span>&lt;</span>id</span><span>></span></span>produtction<span><span><span>&lt;/</span>id</span><span>></span></span>\n        <span><span><span>&lt;</span>properties</span><span>></span></span>\n            ...\n        <span><span><span>&lt;/</span>properties</span><span>></span></span>\n    <span><span><span>&lt;/</span>profile</span><span>></span></span>\n    <span><span><span>&lt;</span>profile</span><span>></span></span>\n        <span><span><span>&lt;</span>id</span><span>></span></span>testing<span><span><span>&lt;/</span>id</span><span>></span></span>\n        <span><span><span>&lt;</span>properties</span><span>></span></span>\n            ...\n        <span><span><span>&lt;/</span>properties</span><span>></span></span>\n    <span><span><span>&lt;/</span>profile</span><span>></span></span>\n<span><span><span>&lt;/</span>profiles</span><span>></span></span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br></div></div><p>通过下面配置就可以指定当前默认的环境是哪个</p>\n<div><pre><code><span><span><span>&lt;</span>activation</span><span>></span></span>\n    <span><span><span>&lt;</span>activeByDefault</span><span>></span></span>true<span><span><span>&lt;/</span>activeByDefault</span><span>></span></span>\n<span><span><span>&lt;/</span>activation</span><span>></span></span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>在开发和使用过程中，必须要配置一个默认的环境。配置完成之后，在IDE中也会提供可操作性界面进行操作。下图即为IDEA的界面示例：</p>\n<p><img src=\"/images/idea/profiles.png\" alt=\"profiles\" /></p>\n<h2 id=\"spring-boot-多环境配置\"> Spring Boot 多环境配置</h2>\n<h3 id=\"spring-boot-环境设置机制\"> Spring Boot 环境设置机制</h3>\n<p><code>spring.profiles.active</code> 属性可以为我们指定当前设置的环境，以此来选择我们的配置文件。例如我们有配置文件</p>\n<ul>\n<li>application.yml</li>\n<li>application-dev.yml</li>\n<li>application-test.yml</li>\n<li>application-prod.yml</li>\n</ul>\n<p>当执行 <code>java -jar xxx.jar --spring.profiles.actvie=test</code> 此时，系统将启用 <code>application.yml</code> 和 <code>application-test.yml</code> 配置文件。</p>\n<p>当执行 <code>java -jar xxx.jar --spring.profiles.actvie=prod</code> 此时，系统将启用 <code>application.yml</code> 和 <code>application-prod.yml</code> 配置文件。</p>\n<p>正是这种配置参数可以决定我们使用哪种配置文件，如果我们把不同环境的配置写在对应的配置文件中，我们就可以实现多环境机制。</p>\n<h3 id=\"配置多环境\"> 配置多环境</h3>\n<p>正如上一点所述，我们配置不同的配置文件</p>\n<ul>\n<li>application.yml</li>\n<li>application-dev.yml（开发环境）</li>\n<li>application-test.yml（测试环境）</li>\n<li>application-uat.yml（预发布环境）</li>\n<li>application-prod.yml（生产环境）</li>\n</ul>\n<h3 id=\"指定环境\"> 指定环境</h3>\n<ul>\n<li>在 cmd 命令中指定</li>\n</ul>\n<div><pre><code>java -jar xxx.jar --spring.profiles.actvie<span>=</span>dev \n</code></pre>\n<div><span>1</span><br></div></div><ul>\n<li>在 <code>application.yml</code> 中指定</li>\n</ul>\n<div><pre><code><span>spring</span><span>:</span>\n  <span>profiles</span><span>:</span>\n    <span>active</span><span>:</span> dev\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><ul>\n<li>在IDEA 编辑器中指定</li>\n</ul>\n<p>在运行按钮（绿色三角形按钮）旁边选择 <code>Edit Configurations...</code>，在弹出的对话框中 <code>Active profiles</code> 输入 <code>dev</code> 或其他即可。</p>\n<div><p>注意</p>\n<p>这种方法只有在本地调试的时候才生效。</p>\n</div>\n<h3 id=\"单一文件写法\"> 单一文件写法</h3>\n<div><pre><code><span>spring</span><span>:</span>\n  <span>application</span><span>:</span>\n    <span>name</span><span>:</span>  @artifactId@\n  <span>profiles</span><span>:</span>\n    <span>active</span><span>:</span> develpment\n<span>...</span>\n\n<span>---</span>\n<span># 开发环境配置</span>\n<span>spring</span><span>:</span>\n  <span>config</span><span>:</span>\n    <span>activate</span><span>:</span>\n      <span>on-profile</span><span>:</span> develpment\n\n<span>---</span>\n<span># 生产环境配置</span>\n<span>spring</span><span>:</span>\n  <span>config</span><span>:</span>\n    <span>activate</span><span>:</span>\n      <span>on-profile</span><span>:</span> production\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br></div></div><h2 id=\"nacos-多环境配置\"> Nacos 多环境配置</h2>\n<p>本身没有提供统一的多环境管理。在Nacos中，本身有多个不同管理级别的概念，包括：Data ID,Group,Namespace。只要利用好这些层级概念的关系，就可以根据自己的需要来实现多环境的管理。</p>\n<h3 id=\"data-id\"> Data Id</h3>\n<ol>\n<li><code>Data Id</code>的默认值为<code>${spring.cloud.nacos.config.prefix}-${spring.profile.active}.${spring.cloud.nacos.config.file-extension}</code></li>\n<li><code>spring.cloud.nacos.config.prefix</code>的默认值为<code>${spring.application.name}</code></li>\n<li><code>spring.cloud.nacos.config.file-extension</code>的默认值为<code>properties</code></li>\n<li>当<code>spring.profiles.active</code>未配置时，则匹配<code>${spring.application.name}.properties</code></li>\n<li>若设置了<code>spring.profiles.active</code>而<code>Nacos</code>中存在<code>${spring.application.name}.properties</code>时，若还存在</li>\n<li><code>${spring.application.name}-${spring.profiles.active}.properties</code>，则默认匹配后者，若不存在，则会自动匹配前者\n由于<code>Nacos</code>建议且默认用<code>spring.application.name</code>作为<code>Data Id</code>的前缀，若要在不同服务中共享项目统一配置，则可以通过配置<code>spring.cloud.nacos.config.shared-dataids</code>或<code>spring.cloud.nacos.config.refreshable-dataids</code>来添加共享配置，前者不支持自动刷新，后者支持</li>\n</ol>\n<h3 id=\"group\"> Group</h3>\n<p><code>Group</code>是一个很灵活的配置项，并没有固定的规定，可以用作多环境,多模块,多版本之间区分配置</p>\n<h3 id=\"namespace\"> Namespace</h3>\n<p>使用命名空间来区分不同环境的配置，因为使用<code>profiles</code>或<code>group</code>会是不同环境的配置展示到一个页面，而<code>Nacos</code>控制台对不同的<code>Namespace</code>做了<code>Tab</code>栏分组展示</p>\n<p><img src=\"/images/nacos/namespaces-tab.png\" alt=\"Namespaces Tab\" /></p>\n<p>创建方式如下图所示</p>\n<p><img src=\"/images/nacos/namespaces-create.png\" alt=\"Namespaces Create\" /></p>\n<div><p>警告</p>\n<p>配置Namespace的时候不是通过名称，而是通过命名空间的ID(上图所示)，可通过如下配置来设置服务使用的命名空间</p>\n</div>\n<div><pre><code><span><span><span>&lt;</span>profile</span><span>></span></span>\n    <span><span><span>&lt;</span>id</span><span>></span></span>docker<span><span><span>&lt;/</span>id</span><span>></span></span>\n    <span><span><span>&lt;</span>properties</span><span>></span></span>\n        <span>&lt;!--当前环境--></span>\n        <span><span><span>&lt;</span>profile.name</span><span>></span></span>docker<span><span><span>&lt;/</span>profile.name</span><span>></span></span>\n        <span>&lt;!--数据库类型--></span>\n        <span><span><span>&lt;</span>database.type</span><span>></span></span>postgresql<span><span><span>&lt;/</span>database.type</span><span>></span></span>\n        <span>&lt;!--代码构建控制--></span>\n        <span>&lt;!--跳过构建源代码包--></span>\n        <span><span><span>&lt;</span>skip.build.source.package</span><span>></span></span>false<span><span><span>&lt;/</span>skip.build.source.package</span><span>></span></span>\n        <span>&lt;!--不copy代码包到docker构建目录--></span>\n        <span><span><span>&lt;</span>skip.copy.docker.resource</span><span>></span></span>false<span><span><span>&lt;/</span>skip.copy.docker.resource</span><span>></span></span>\n        <span>&lt;!--不执行git commit 构建--></span>\n        <span><span><span>&lt;</span>skip.build.git.commit.info</span><span>></span></span>false<span><span><span>&lt;/</span>skip.build.git.commit.info</span><span>></span></span>\n        <span>&lt;!--Nacos配置中心地址--></span>\n        <span><span><span>&lt;</span>config.server-addr</span><span>></span></span>192.168.101.10:8848<span><span><span>&lt;/</span>config.server-addr</span><span>></span></span>\n        <span>&lt;!--Nacos配置中心命名空间,用于支持多环境.这里必须使用ID，不能使用名称,默认为空--></span>\n        <span><span><span>&lt;</span>config.namespace</span><span>></span></span><span><span><span>&lt;/</span>config.namespace</span><span>></span></span>\n        <span>&lt;!--Nacos服务发现地址--></span>\n        <span><span><span>&lt;</span>discovery.server-addr</span><span>></span></span>192.168.101.10:8848<span><span><span>&lt;/</span>discovery.server-addr</span><span>></span></span>\n        <span><span><span>&lt;</span>sentinel.server-addr</span><span>></span></span>192.168.101.10:8858<span><span><span>&lt;/</span>sentinel.server-addr</span><span>></span></span>\n    <span><span><span>&lt;/</span>properties</span><span>></span></span>\n<span><span><span>&lt;/</span>profile</span><span>></span></span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br></div></div><h2 id=\"docker和k8s-多环境配置\"> Docker和K8S 多环境配置</h2>\n<p><code>Docker</code>和<code>K8S</code>的多环境，因为不同使用者使用的方式不同，<strong>Eurynome Cloud</strong> 并没有过多涉及。<strong>Eurynome Cloud</strong> 中，也简单定义了自己<code>Docker</code>多环境，涉及<code>production</code>和<code>development</code>两个环境，主要区别是<code>production</code>环境docker打包会包含<code>Skywalking Agent</code>，而<code>development</code>环境docker打包只会包含应用，通过执行不同的<code>docker-compose</code>文件进行区分仅此而已。如果不使用<code>Skywalking</code>，使用<code>development</code>环境打包docker即可。</p>\n<h2 id=\"eurynome-cloud-的多环境配置\"> Eurynome Cloud 的多环境配置</h2>\n<p>微服务架构涉及多方面内容，<strong>Eurynome Cloud</strong>的为解决多环境，综合使用<code>Maven</code>,<code>Spring Boot</code>以及<code>Nacos</code>多环境的特点，以支持微服务的多环境切换和多种数据库的配置支持。</p>\n<h3 id=\"eurynome-cloud-中的maven多环境配置\"> Eurynome Cloud 中的Maven多环境配置</h3>\n<p><strong>Eurynome Cloud</strong> Maven 多环境配置，在工程根目录下的<code>pom.xml</code>中进行配置。这里的环境配置主要解决以下问题：</p>\n<ol>\n<li><strong>传递参数</strong>：传递<code>&lt;profile.name&gt;</code>和<code>&lt;database.type&gt;</code>两个参数。</li>\n</ol>\n<ul>\n<li><code>&lt;profile.name&gt;</code>的值传递至<code>bootstrap.yml</code>中，这样就可以联动使用<code>Spring Boot</code>和<code>Nacos</code>的多环境配置；</li>\n<li><code>&lt;database.type&gt;</code>参数，传递至<code>bootstrap.yml</code>中，用于指定具体使用的数据库配置</li>\n</ul>\n<ol start=\"2\">\n<li><strong>Dashboard</strong>：通过<code>&lt;skip.build.source.package&gt;</code>,<code>&lt;skip.copy.docker.resource&gt;</code>和<code>&lt;skip.build.git.commit.info&gt;</code>三个参数进行打包控制。</li>\n</ol>\n<ul>\n<li><code>&lt;skip.build.source.package&gt;</code> 控制是否构建源代码包：构建源代码包便于调试<code>eurynome-cloud-athena</code>的调试。</li>\n<li><code>&lt;skip.copy.docker.resource&gt;</code> 控制是否拷贝服务jar包：编译完成后，将可执行额外操作，将服务jar包拷贝到统一的docker build context下，使用统一配置build docker，这样就不必每一个服务都编写<code>Dockerfile</code></li>\n<li><code>&lt;skip.build.git.commit.info&gt;</code> 控制是否生成Git信息：是否将Git commit等相关信息在编译打包时，写入到jar包中。写入Git commit等相关信息，可以便于在运维过程中快速区分不同jar对应的提交信息,编译,开发者等相关信息。</li>\n</ul>\n<ol start=\"3\">\n<li><strong><code>Nacos</code> 和 <code>Sentinel Dashboard</code>地址指定</strong>：</li>\n</ol>\n<p>指定不同环境下<code>Nacos</code>配置中心,服务发现和<code>Sentinel Dashboard</code>的地址，<code>Nacos</code>配置中心,服务发现地址无法写在<code>Nacos</code>的配置中，所以在此处进行设置。</p>\n<h3 id=\"eurynome-cloud-中的spring-boot和nacos多环境配置\"> Eurynome Cloud 中的Spring Boot和Nacos多环境配置</h3>\n<ul>\n<li>通过<code>Spring Boot</code>的<code>profiles</code>机制，实现<code>Spring Boot</code>与<code>Nacos</code>的联动。</li>\n<li>利用<code>Nacos</code>的<code>Group</code>信息，实现<code>Nacos</code>配置的多环境。<code>${project_home}/platform/eurynome-cloud-management/resources/configs</code>目录下，还有一级目录。这级目录的名称，是对应<code>Nacos</code>中的<code>Group</code>。所以在向<code>Nacos</code>导入配置时，一定要注意<code>Group</code>的创建和匹配。切勿全部导入到<code>DEFAULT</code>组下，这样会导致无法正常运行。</li>\n</ul>\n",
      "image": "https://herodotus.cn/images/idea/profiles.png",
      "date_published": "2021-10-27T16:13:57.000Z",
      "date_modified": "2021-10-28T15:24:29.000Z",
      "authors": [
        {
          "name": "码匠君"
        }
      ],
      "tags": []
    },
    {
      "title": "项目介绍",
      "url": "https://herodotus.cn/guide/project-introduction/",
      "id": "https://herodotus.cn/guide/project-introduction/",
      "content_html": "<h1 id=\"项目介绍\"> 项目介绍</h1>\n<h2 id=\"工程结构\"> 工程结构</h2>\n<h3 id=\"后端工程结构\"> 后端工程结构</h3>\n<div><pre><code>eurynome-cloud\n├── configurations -- 配置文件脚本和统一Docker build上下文目录\n├── dependencies -- 工程Maven顶级依赖，统一控制版本和依赖\n├── documents -- 工程相关文档（会逐步清理，统一采用Gitee Wiki）\n├── packages -- 基础通用依赖包\n├    ├── eurynome-cloud-assistant -- Spring相关公共辅助工具,注解相关工具代码组件\n├    ├── eurynome-cloud-data -- 数据持久化,数据缓存以及Redis等数据处理相关代码组件\n├    ├── eurynome-cloud-kernel -- 微服务接入平台必备组件\n├    ├── eurynome-cloud-oauth -- OAuth2通用代码\n├    ├── eurynome-cloud-oauth-starter -- 自定义OAuth2 Starter，Athena单体版核心Starter\n├    ├── eurynome-cloud-rest -- Rest相关代码组件\n├    ├── eurynome-cloud-sercurity -- Security通用代码\n├    ├── eurynome-cloud-starter -- 微服务核心Starter\n├    └── eurynome-cloud-websocket -- WebSocket核心代码包\n├── platform -- 平台核心服务\n├    ├── eurynome-cloud-gateway -- 服务网关\n├    ├── eurynome-cloud-management -- Spring Boot Admin 监控服务\n├    └── eurynome-cloud-uaa -- 统一认证模块\n├── services -- 平台业务服务\n├    ├── eurynome-cloud-upms-api -- 通用用户权限api \n├    ├── eurynome-cloud-upms-logic -- 通用用户权限service\n├    ├── eurynome-cloud-upms-rest -- 通用用户权限rest 接口\n├    ├── eurynome-cloud-upms-ability -- 通用用户权限服务\n├    ├── eurynome-cloud-upms-rest -- 工作流基础代码包\n└──  └── eurynome-cloud-bpmn-ability -- 工作流服务 \n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br></div></div><h3 id=\"前端工程结构\"> 前端工程结构</h3>\n<div><pre><code>eurynome-cloud-ui\n├── .vscode -- Vscode配置，方便统一开发环境便于管理。目前只有Typescript SDK版本指定。\n├── dependencies -- 工程Maven顶级依赖，统一控制版本和依赖\n├── documents -- 工程相关文档（已统一采用在线文档）\n├    └── readme -- 工程Readme.md使用静态资源\n├── packages -- 基础通用依赖包\n├    ├── @hecate/h-bpmn-moddle -- 工作流编辑器组件\n├    ├── @hecate/h-button -- 基于Vuetify封装的按钮组件\n├    ├── @hecate/h-table -- 基于Vuetify封装的Table组件\n├    ├── @hecate/plugins -- 第三方插件通用配置\n├    ├── @hecate/utils -- 通用工具代码包\n├    └── @herodotus/ui -- 前端工程\n├── scripts -- rollup 通用编译脚本\n├── .editorconfig -- 编辑器统一设置\n├── .eslintignore -- Eslint忽略文件\n├── .eslintrc.js -- Eslint配置\n├── .gitignore -- Git忽略文件\n├── .prettierignore -- Prettier忽略文件\n├── .prettierrc -- Prettier配置\n├── babel.config.js -- Babel配置\n├── lerna.json -- Lerna配置\n├── postcss.config.js -- Postcss配置\n├── tsconfig.json -- Typescript统一配置\n├── .editorconfig -- 编辑器统一设置\n└── yarn.lock -- Yarn 依赖包锁定 \n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br></div></div><h2 id=\"核心技术\"> 核心技术</h2>\n<h3 id=\"后端核心技术\"> 后端核心技术</h3>\n<h4 id=\"_1-spring相关核心技术及版本\"> （1）Spring相关核心技术及版本</h4>\n<table>\n<thead>\n<tr>\n<th>组件</th>\n<th>版本</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>Spring Boot</code></td>\n<td>2.5.6</td>\n</tr>\n<tr>\n<td><code>Spring Cloud</code></td>\n<td>2020.0.4</td>\n</tr>\n<tr>\n<td><code>Spring Cloud Alibaba</code></td>\n<td>2021.1</td>\n</tr>\n<tr>\n<td><code>Spring Boot Admin</code></td>\n<td>2.5.2</td>\n</tr>\n<tr>\n<td><code>Nacos</code></td>\n<td>2.0.3</td>\n</tr>\n<tr>\n<td><code>Sentinel</code></td>\n<td>1.8.0</td>\n</tr>\n<tr>\n<td><code>Seata</code></td>\n<td>1.3.0</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"_2-涉及的相关的技术\"> （2）涉及的相关的技术</h4>\n<ul>\n<li>持久层框架： <code>Spring Data Jpa</code> &amp; <code>Mybatis Plus</code></li>\n<li>API网关：<code>Spring Cloud Gateway</code></li>\n<li>服务注册&amp;发现和配置中心: <code>Alibaba Nacos</code></li>\n<li>服务消费：<code>Spring Cloud OpenFeign</code> &amp; <code>RestTemplate</code> &amp; <code>OkHttps</code></li>\n<li>负载均衡：<code>Spring Cloud Loadbalancer</code></li>\n<li>服务熔断&amp;降级&amp;限流：<code>Alibaba Sentinel</code></li>\n<li>服务监控：<code>Spring Boot Admin</code></li>\n<li>消息队列：使用 <code>Spring Cloud</code> 消息总线 <code>Spring Cloud Bus</code> 默认 <code>Kafka</code> 适配<code>RabbitMQ</code></li>\n<li>链路跟踪：<code>Skywalking</code></li>\n<li>分布式事务：<code>Seata</code></li>\n<li>数据缓存：<code>JetCache</code> + <code>Redis</code> + <code>Caffeine</code>, 自定义多级缓存</li>\n<li>数据库： <code>Postgresql</code>，<code>MySQL</code>，<code>Oracle</code> ...</li>\n<li>JSON序列化：<code>Jackson</code> &amp; <code>FastJson</code></li>\n<li>文件服务：阿里云OSS/<code>Minio</code></li>\n<li>数据调试：<code>p6spy</code></li>\n<li>在线文档：<code>Springdoc</code> + <code>Swagger 3</code> + <code>OpenAPI</code></li>\n<li>日志中心：<code>ELK</code></li>\n<li>日志收集：<code>Logstash Logback Encoder</code></li>\n<li>数据同步：<code>Debezimu</code></li>\n<li>外部集成：<code>JustAuth</code>， <code>WxJava</code>，多种短信API</li>\n<li>工作流引擎：<code>Camunda</code></li>\n</ul>\n<h3 id=\"前端核心技术\"> 前端核心技术</h3>\n<ul>\n<li>Vue2</li>\n<li>Vuex</li>\n<li>Vue-router</li>\n<li>Vue-cli</li>\n<li>Axios</li>\n<li>Vuetify</li>\n<li>Bpmn.js</li>\n<li>Localforage</li>\n<li>Rollup</li>\n<li>Lerna</li>\n<li>Typescript</li>\n</ul>\n<h2 id=\"版本关系\"> 版本关系</h2>\n<h3 id=\"组件版本关系\"> 组件版本关系</h3>\n<table>\n<thead>\n<tr>\n<th>Spring Cloud Alibaba Version</th>\n<th>Sentinel Version</th>\n<th>Nacos Version</th>\n<th>RocketMQ Version</th>\n<th>Dubbo Version</th>\n<th>Seata Version</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>2.2.6.RELEASE</td>\n<td>1.8.1</td>\n<td>1.4.2</td>\n<td>4.4.0</td>\n<td>2.7.8</td>\n<td>1.3.0</td>\n</tr>\n<tr>\n<td>2021.1 or 2.2.5.RELEASE or 2.1.4.RELEASE or 2.0.4.RELEASE</td>\n<td>1.8.0</td>\n<td>1.4.1</td>\n<td>4.4.0</td>\n<td>2.7.8</td>\n<td>1.3.0</td>\n</tr>\n<tr>\n<td>2.2.3.RELEASE or 2.1.3.RELEASE or 2.0.3.RELEASE</td>\n<td>1.8.0</td>\n<td>1.3.3</td>\n<td>4.4.0</td>\n<td>2.7.8</td>\n<td>1.3.0</td>\n</tr>\n<tr>\n<td>2.2.1.RELEASE or 2.1.2.RELEASE or 2.0.2.RELEASE</td>\n<td>1.7.1</td>\n<td>1.2.1</td>\n<td>4.4.0</td>\n<td>2.7.6</td>\n<td>1.2.0</td>\n</tr>\n<tr>\n<td>2.2.0.RELEASE</td>\n<td>1.7.1</td>\n<td>1.1.4</td>\n<td>4.4.0</td>\n<td>2.7.4.1</td>\n<td>1.0.0</td>\n</tr>\n<tr>\n<td>2.1.1.RELEASE or 2.0.1.RELEASE or 1.5.1.RELEASE</td>\n<td>1.7.0</td>\n<td>1.1.4</td>\n<td>4.4.0</td>\n<td>2.7.3</td>\n<td>0.9.0</td>\n</tr>\n<tr>\n<td>2.1.0.RELEASE or 2.0.0.RELEASE or 1.5.0.RELEASE</td>\n<td>1.6.3</td>\n<td>1.1.1</td>\n<td>4.4.0</td>\n<td>2.7.3</td>\n<td>0.7.1</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"毕业版本关系-推荐使用\"> 毕业版本关系(推荐使用)</h3>\n<table>\n<thead>\n<tr>\n<th>Spring Cloud Version</th>\n<th>Spring Cloud Alibaba Version</th>\n<th>Spring Boot Version</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Spring Cloud 2020.0.1</td>\n<td>2021.1</td>\n<td>2.4.2</td>\n</tr>\n<tr>\n<td>Spring Cloud Hoxton.SR9</td>\n<td>2.2.6.RELEASE</td>\n<td>2.3.2.RELEASE</td>\n</tr>\n<tr>\n<td>Spring Cloud Greenwich.SR6</td>\n<td>2.1.4.RELEASE</td>\n<td>2.1.13.RELEASE</td>\n</tr>\n<tr>\n<td>Spring Cloud Hoxton.SR3</td>\n<td>2.2.1.RELEASE</td>\n<td>2.2.5.RELEASE</td>\n</tr>\n<tr>\n<td>Spring Cloud Hoxton.RELEASE</td>\n<td>2.2.0.RELEASE</td>\n<td>2.2.X.RELEASE</td>\n</tr>\n<tr>\n<td>Spring Cloud Greenwich</td>\n<td>2.1.2.RELEASE</td>\n<td>2.1.X.RELEASE</td>\n</tr>\n<tr>\n<td>Spring Cloud Finchley</td>\n<td>2.0.4.RELEASE(停止维护，建议升级)</td>\n<td>2.0.X.RELEASE</td>\n</tr>\n<tr>\n<td>Spring Cloud Edgware</td>\n<td>1.5.1.RELEASE(停止维护，建议升级)</td>\n<td>1.5.X.RELEASE</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"功能介绍\"> 功能介绍</h2>\n<h3 id=\"_1-统一安全认证中心\"> [1]统一安全认证中心</h3>\n<ul>\n<li><strong>OAuth2 安全认证</strong>：</li>\n</ul>\n<p>支持 <code>OAuth2</code> 授权码模式,隐式授权码模式（简单模式）,密码模式和客户端模式四种登录模式</p>\n<ul>\n<li><strong>JWT Token令牌</strong>：</li>\n</ul>\n<p>采用JWT对OAuth2 Token进行加密</p>\n<ul>\n<li><strong>自定义OAuth2页面</strong>：</li>\n</ul>\n<p>自定义<code>OAuth2</code> login,confirm,error页面，提升系统使用用户体验。可结合自身需求进行修改。</p>\n<ul>\n<li><strong>OAuth2 登录验证码</strong>：</li>\n</ul>\n<p><code>OAuth2</code>登录增加验证码保护，支持gif,中文,算数等类型，可通过配置进行修改以及是否显示验证码控制</p>\n<ul>\n<li><strong>OAuth2登录数据加密传输</strong>：</li>\n</ul>\n<p>基于AES对 <code>OAuth2</code> 登录数据进行动态加密传输，可通过配置对表单参数名进行动态配置，提升系统安全性</p>\n<ul>\n<li><strong>平台权限管理</strong>：</li>\n</ul>\n<p>基于RBAC模型，以角色和接口为核心，使用统一逻辑实现<code>@PreAuthorize</code>注解权限与<code>URL</code>权限的全面整合及动态可配置化。统一平台接口白名单，IP地址白名单，以及Scope绑定URL的管理。无须配置Security权限注解，支持URL粒度的鉴权和用户权限的动态配置。 完美支持单体式架构,UPMS自身应用需求,分布式架构以及分布式各服务多实例等各种应用场景。</p>\n<ul>\n<li><strong>User,Client数据策略访问</strong>：</li>\n</ul>\n<p>支持<code>OAuth2</code> <code>UserDetails</code>,<code>ClientDetails</code>数据直连数据库和<code>Feign</code>两种数据获取策略模式，<code>OAuth2</code>直连数据库性能更优，<code>Feign</code>访问数据服务独立可动态扩展。可通过配置动态修改具体采用哪种策略。</p>\n<ul>\n<li><strong>手机短信验证码注册和登录</strong>：</li>\n</ul>\n<p>支持通过手机验证码登录认证，与平台为统一体系，统一返回<code>OAuth2</code> Token，支持服务接口鉴权</p>\n<ul>\n<li><strong>第三方系统社交注册和登录</strong>：</li>\n</ul>\n<p>基于 <code>JustAuth</code> 实现第三方系统社交登录认证，，与平台为统一体系，统一返回 <code>OAuth2</code> Token，支持服务接口鉴权，。所有 <code>JustAuth</code> 支持的第三方系统均支持。</p>\n<ul>\n<li><strong>微信小程序注册和登录</strong>：</li>\n</ul>\n<p>支持微信小程序登录认证，与平台为统一体系，统一返回 <code>OAuth2</code> Token，支持服务接口鉴权。</p>\n<ul>\n<li><strong>其它注册和登录</strong>：</li>\n</ul>\n<p>采用策略模式对外部登录和注册进行支持，目前未支持的登录，可参考标准，动态扩展，即可支持。</p>\n<h3 id=\"_2-统一服务访问网关\"> [2]统一服务访问网关</h3>\n<ul>\n<li><strong>网关动态路由</strong>：</li>\n</ul>\n<p>基于<code>Gateway</code>和<code>Nacos</code>实现服务网关动态路由，无须增加任何配置，即可支持服务的发现与路由</p>\n<ul>\n<li>\n<p><strong>网关服务鉴权</strong>：\n服务网关集成部分权限认证功能，提升系统安全性，降低平台压力</p>\n</li>\n<li>\n<p><strong>网关服务限流</strong>：</p>\n</li>\n</ul>\n<p>基于Sentinel实现服务的限流，支持基于Gateway Filter的自定义限流</p>\n<ul>\n<li>\n<p><strong>动态文档聚合</strong>：\n网关动态<code>Swagger</code>文档聚合，使用<code>Swagger 3.0</code>，支持<code>Knife4j</code>增强。不同环境访问控制</p>\n</li>\n<li>\n<p><strong>统一跨域处理</strong>：</p>\n</li>\n</ul>\n<p>基于<code>Gateway</code>实现统一跨域处理</p>\n<ul>\n<li><strong>统一错误处理</strong>：</li>\n</ul>\n<p>平台统一错误处理，支持自定义错误码体系</p>\n<ul>\n<li><strong>自定义动态路由</strong>：</li>\n</ul>\n<p>支持基于DB的动态路由管理与路由规则配置</p>\n<h3 id=\"_3-微服务架构支撑\"> [3]微服务架构支撑</h3>\n<ul>\n<li><strong>服务注册发现</strong>：</li>\n</ul>\n<p>基于<code>Nacos</code>实现服务的注册与发现。</p>\n<ul>\n<li><strong>服务负载均衡</strong>：</li>\n</ul>\n<p><code>Spring Cloud Netflix</code> 停止维护，使用 <code>Spring Cloud Loadbalancer</code> 全面替换<code>Ribbon</code>。</p>\n<ul>\n<li><strong>服务熔断降级</strong>：</li>\n</ul>\n<p>整合<code>OpenFeign</code>和<code>Sentinel</code>，从熔断降级,系统负载保护,热点防护等多个维度来保障微服务的稳定性</p>\n<ul>\n<li><strong>统一配置中心</strong>：</li>\n</ul>\n<p>基于 <code>Nacos</code> 搭建的统一配置中心，支持配置文件自动导入和关键信息加密，可根据文件夹名称自动分组配置。</p>\n<ul>\n<li><strong>统一日志中心</strong>：</li>\n</ul>\n<p>采用TCP直连的方式采集和发送日志，集成 <code>Skywalking</code> <code>TraceID</code> 实现日志聚合及ELK日志分析。通过 <code>@EnableXXX</code> 注解开启或关闭日志采集功能。</p>\n<ul>\n<li><strong>分布任务调度</strong>：</li>\n</ul>\n<p>极简集成 <code>xxl-job</code>，支持分布式任务调度功能</p>\n<ul>\n<li><strong>分布事务处理</strong>：</li>\n</ul>\n<p>集成 <code>Seata</code>，支持分布式事务，无代码侵入，灵活便捷</p>\n<ul>\n<li><strong>分布对象存储</strong>：</li>\n</ul>\n<p>支持 <code>Minio</code> 分布式对象存储。同时，集成阿里云OSS，可通过 <code>@EnableXXX</code> 注解开启或关闭功能。</p>\n<ul>\n<li><strong>分布式工作流</strong>：</li>\n</ul>\n<p>以 <code>Camunda</code> 引擎为基础定义分布式工作流引擎，提供自研人事信息管理以及人事管理体系与工作流用户体系的实时集成</p>\n<h3 id=\"_4-微服务运行监控\"> [4]微服务运行监控</h3>\n<ul>\n<li><strong>服务调用链监控</strong>：</li>\n</ul>\n<p>集成 <code>Skywalking</code> 进行服务调用链的监控，调用链监控深度可延伸至<code>Undertow</code>,数据库,<code>Redis</code></p>\n<ul>\n<li><strong>应用吞吐量监控</strong>：</li>\n</ul>\n<p>集成 <code>Skywalking</code> 进行应用吞吐量监控</p>\n<ul>\n<li><strong>熔断,降级监控</strong>：</li>\n</ul>\n<p>集成 <code>Sentinel</code> 进行服务的熔断,降级监控</p>\n<ul>\n<li><strong>微服务状态监控</strong>：</li>\n</ul>\n<p>集成 <code>Spring Boot Admin</code> 进行服务运行状态的监控</p>\n<h3 id=\"_5-数据自动化处理\"> [5]数据自动化处理</h3>\n<ul>\n<li><strong>数据模型初始化</strong>：</li>\n</ul>\n<p><code>RBAC</code>,<code>OAuth2</code> 部分核心表,<code>Camunda</code> 数据表，在初始部署过程中为自动化创建</p>\n<ul>\n<li><strong>核心应用数据初始化</strong>：</li>\n</ul>\n<p><code>RBAC</code>,<code>OAuth2</code> 等核心数据，在初始部署过程中为自动化导入</p>\n<ul>\n<li><strong>URL权限数据动态汇总</strong>：</li>\n</ul>\n<p>自动扫描URL接口作为权限汇总存入系统，根据URL相关信息生成唯一ID，多次导入数据不会重复。可通过配置动态开启或修改扫描内容</p>\n<ul>\n<li><strong>Yml配置自动导入</strong>：</li>\n</ul>\n<p>服务所需使用的配置文件，可自动根据文件夹进行分组并导入到 <code>Nacos</code> 中。</p>\n<h3 id=\"_6-服务开发支撑\"> [6]服务开发支撑</h3>\n<ul>\n<li><strong>通用CRUD封装</strong>：</li>\n</ul>\n<p>各种类型的代码生成器较多，结合实际应用使用效果来看，代码生成器在实际开发中使用频率低于理想预期。因此，没有考虑提供代码生成器，而是对常规的CRUD进行了多层次的封装，使定制化服务的开发更加便捷。</p>\n<ul>\n<li><strong>自研两级缓存封装</strong>：</li>\n</ul>\n<p>自研基于 <code>Caffeine</code> 和 <code>Redis</code> 分布式两级缓存,完美支持JPA Hibernate二级缓存,完美支持各类查询数据缓存以及JPA <code>@ManyToMany</code>, <code>@ManyToOne</code>等关联查询。实现基于<code>Caffeine</code> 的 <code>Hibernate</code> 二级缓存，可与自研两级缓存快速切换，仅使用本地缓存创建Key繁琐和分页数据无法更新的问题。自定义 Mybatis Plus 二级缓存，支持<code>Caffeine</code> 的 <code>Hibernate</code> 二级缓存</p>\n<ul>\n<li><strong>多类型数据库支持</strong>：</li>\n</ul>\n<p>默认采用 <code>PostgreSQL</code> 数据库，支持 <code>MySQL</code>,<code>Oracle</code>,<code>H2</code>等多种关系型数据库，无须修改代码可动态切换。数据层同时支持 <code>Spring Data Jpa</code> 和 <code>Mybatis Plus</code></p>\n<ul>\n<li><strong>多消息队列支持</strong>：</li>\n</ul>\n<p>适配 <code>RabbitMQ</code> 和 <code>Kafka</code>，默认使用 <code>Kafka</code>，支持消息总线(<code>Spring Cloud Bus</code>)</p>\n<ul>\n<li><strong>多种服务调用方式</strong>：</li>\n</ul>\n<p>默认采用 <code>OpenFeign</code> 进行服务间调用，支持 <code>RestTemplate</code> 和 <code>OkHttps</code></p>\n<ul>\n<li><strong>共享式多环境切换</strong>：</li>\n</ul>\n<p>共享式,统一化多环境配置模式，Yml,Docker均采用此方式配置，避免类似的服务配置,Dockerfile配置导出复制和修改的问题</p>\n<ul>\n<li><strong>多团队开发管理</strong>：</li>\n</ul>\n<p>支持多团队开发，可针对各个团队开发服务，进行单独的授权配置。</p>\n<ul>\n<li><strong>注解模型模块模式</strong>：</li>\n</ul>\n<p>除必要依赖逻辑以及强注入顺序要求的模块采用 <code>Spring SPI</code>（spring.factories）机制外，其它功能模块均采用 <code>@EnableXXX</code> 注解编程模型，可选择性进行控制是否开启对应模块，减少不必要的依赖注入和启动。</p>\n<ul>\n<li><strong>代码打包记录查询</strong>：</li>\n</ul>\n<p>对代码编译信息进行记录，可查询代码版本以及编译时间等相关信息，方便运维人员更好的掌握代码信息。</p>\n<ul>\n<li><strong>人事信息管理</strong>：</li>\n</ul>\n<p>除已有的用户体系外，集成单位,部门,人员等人事管理功能，满足大多数人事管理场景，并与 <code>Camunda</code> 工作流用户体系无缝整合，实现数据实时同步。</p>\n<h3 id=\"_7-信息发送集成\"> [7]信息发送集成</h3>\n<ul>\n<li><strong>微信小程序订阅消息</strong>：</li>\n</ul>\n<p>支持微信小程序订阅消息发送。提供订阅消息模版工厂，可根据自身业务需求，编写少量代码既可以拓展支持新订阅消息模版。</p>\n<ul>\n<li><strong>极光消息推送集成</strong>：</li>\n</ul>\n<p>集成极光消息推送，对极光后台API进行封装，封装度高,调用方便，可快速与自定义业务需求整合，通过 <code>@EnableXXX</code> 注解开启或关闭。</p>\n<ul>\n<li><strong>环信消息集成</strong>：</li>\n</ul>\n<p>集成环信IM和消息推送，使用更加便捷，可在应用中根据自定义需求快速整合和拓展IM，发送手机推送消息。通过 <code>@EnableXXX</code> 注解开启或关闭。</p>\n<ul>\n<li><strong>多通道SMS集成</strong>：</li>\n</ul>\n<p>集成阿里,百度,中国移动,华为,京东,极光,网易,七牛,腾讯,又拍,云片等平台短信发送通道。可通过配置动态选择具体使用通道。支持多模版定义以及模版参数顺序控制</p>\n<h3 id=\"_8-内容审核集成\"> [8]内容审核集成</h3>\n<ul>\n<li><strong>阿里云内容审核</strong>：</li>\n</ul>\n<p>集成阿里云内容审核，支持文本,图片,音频,视频,网页内容审核，支持同步审核,异步审核,异步 <code>Callback</code> 方式审核通过 <code>@EnableXXX</code> 注解开启或关闭。</p>\n<ul>\n<li><strong>微信小程序内容审核</strong>：</li>\n</ul>\n<p>集成微信小程序内容审核，支持文本,图片,音频内容审核，支持同步,异步审核。通过 <code>@EnableXXX</code> 注解开启或关闭。</p>\n<ul>\n<li><strong>百度证照识别</strong>：</li>\n</ul>\n<p>集成百度证照审核，支持营业执照,身份证 <code>OCR</code> 识别。通过 <code>@EnableXXX</code> 注解开启或关闭。</p>\n<ul>\n<li><strong>天眼查企业信息查询</strong>：</li>\n</ul>\n<p>集成天眼查企业信息查询。通过 <code>@EnableXXX</code> 注解开启或关闭。</p>\n",
      "date_published": "2021-10-27T16:13:57.000Z",
      "date_modified": "2021-10-28T15:24:29.000Z",
      "authors": [
        {
          "name": "码匠君"
        }
      ],
      "tags": []
    },
    {
      "title": "指南",
      "url": "https://herodotus.cn/guide/",
      "id": "https://herodotus.cn/guide/",
      "content_html": "<h1 id=\"指南\"> 指南</h1>\n<h1 align=\"center\">Eurynome Cloud 微服务架构</h1>\n<hr>\n<div>\n    <a href=\"https://www.oracle.com/java/technologies/javase-downloads.html\" target=\"_blank\"><img src=\"https://img.shields.io/badge/JDK-1.8%2B-green\" alt=\"JDK 1.8+\"></a>\n    <a href=\"https://spring.io/projects/spring-boot\" target=\"_blank\"><img src=\"https://img.shields.io/badge/Spring%20Boot-2.5.6-blue\" alt=\"Spring Boot 2.5.6\"></a>\n    <a href=\"https://spring.io/projects/spring-cloud\" target=\"_blank\"><img src=\"https://img.shields.io/badge/Spring%20Cloud-2020.0.4-blue\" alt=\"Spring Cloud 2020.0.4\"></a>\n    <a href=\"https://github.com/alibaba/spring-cloud-alibaba\" target=\"_blank\"><img src=\"https://img.shields.io/badge/Spring%20Cloud%20Alibaba-2021.1-blue\" alt=\"Spring Cloud Alibaba 2021.1\"></a>\n    <a href=\"https://nacos.io/zh-cn/index.html\" target=\"_blank\"><img src=\"https://img.shields.io/badge/Nacos-2.0.3-brightgreen\" alt=\"Nacos 2.0.3\"></a>\n    <a href=\"./LICENSE\"><img src=\"https://img.shields.io/badge/License-Apache--2.0-blue\" alt=\"License Apache 2.0\"></a>\n    <a href=\"https://blog.csdn.net/Pointer_v\" target=\"_blank\"><img src=\"https://img.shields.io/badge/Author-%E7%A0%81%E5%8C%A0%E5%90%9B-orange\" alt=\"码匠君\"></a>\n    \n    <a href=\"https://gitee.com/herodotus/eurynome-cloud\"><img src=\"https://gitee.com/herodotus/eurynome-cloud/badge/star.svg?theme=dark\" alt=\"Gitee star\"></a>\n    <a href=\"https://gitee.com/herodotus/eurynome-cloud\"><img src=\"https://gitee.com/herodotus/eurynome-cloud/badge/fork.svg?theme=dark\" alt=\"Gitee fork\"></a>\n</div>\n<div><p>提示</p>\n<p>有幸负责过一个“中台”项目，彻底告别了单体应用。随着微服务以及相关架构使用和研究深入，发现很多方面都不能满足需求。研究过很多优秀的开源项目，感觉都不太适合自己。所以就想自己做一套属于自己的微服务架构，因此就有了<strong>Eurynome-Cloud</strong></p>\n</div>\n<p><strong>Eurynome Cloud</strong> 是一款企业级微服务架构和服务能力开发平台。基于 <code>Spring Boot 2.5.6</code>,<code>Spring Cloud 2020.0.4</code>,<code>Spring Cloud Alibaba 2021.1</code>,<code>Nacos 2.0.3</code> 等最新版本开发。遵循 <code>Spring Boot</code> 编程思想，高度模块化和可配置化。具备服务发现,配置,熔断,限流,降级,监控,多级缓存,分布式事务,工作流等功能，代码简洁，架构清晰，非常适合学习和企业作为基础框架使用</p>\n<h2 id=\"平台定位\"> 平台定位</h2>\n<ul>\n<li>构建成熟的,完善的,全面的，基于 OAuth2 的,前后端分离的微服务架构解决方案。</li>\n<li>面向企业级应用和互联网应用设计开发，既兼顾传统项目的微服务化，又满足互联网应用开发建设,快速迭代的使用需求。</li>\n<li>平台架构使用微服务领域及周边相关的各类新兴技术或主流技术进行建设，是帮助快速跨越架构技术选型,研究探索阶段的利器。</li>\n<li>代码简洁规范,结构合理清晰，是新技术开发应用的典型的,综合性案例，助力开发人员对新兴技术的学习和掌握。</li>\n</ul>\n<h2 id=\"总体架构\"> 总体架构</h2>\n<p><img src=\"/images/main/architecture.jpg\" alt=\"架构图\" /></p>\n<h2 id=\"功能演示\"> 功能演示</h2>\n<div><p>提示</p>\n<p>演示平台有特点的功能，正在逐步添加。</p>\n</div>\n<h3 id=\"_1-基于url的方法级动态权限配置\"> [1]基于URL的方法级动态权限配置</h3>\n<p><img src=\"/images/main/oauth2expression.gif\" alt=\"架构图\" /></p>\n<h3 id=\"_2-服务调用链监控\"> [2]服务调用链监控</h3>\n<p><img src=\"/images/main/skywalking.gif\" alt=\"架构图\" /></p>\n<h2 id=\"版本号说明\"> 版本号说明</h2>\n<p>本系统版本号，分为四段。</p>\n<ul>\n<li>第一段和第二段，与 <code>Spring Boot</code> 版本对应，根据采用的 <code>Spring Boot</code> 版本变更。例如，当前采用 Spring Boot 2.4.6 版本，那么就以2.4.X.X开头</li>\n<li>第三段，表示系统功能的变化</li>\n<li>第四段，表示系统功能维护及优化情况</li>\n</ul>\n<h2 id=\"交流反馈\"> 交流反馈</h2>\n<ul>\n<li>有问题欢迎提交<a href=\"https://gitee.com/herodotus/eurynome-cloud/issues\" target=\"_blank\" rel=\"noopener noreferrer\">ISSUS</a> ，请写清楚问题的具体原因，重现步骤和环境(上下文)。Gitee评论中有字数限制，稍微复杂的内容不太便于回复。</li>\n<li>邮箱：herodotus@aliyun.com</li>\n<li>QQ群：<a href=\"https://jq.qq.com/?_wv=1027&amp;k=bIerJVy8\" target=\"_blank\" rel=\"noopener noreferrer\">922565573</a></li>\n</ul>\n",
      "image": "https://herodotus.cn/images/main/architecture.jpg",
      "date_published": "2021-10-27T06:18:58.000Z",
      "date_modified": "2021-10-28T15:24:29.000Z",
      "authors": [
        {
          "name": "码匠君"
        }
      ],
      "tags": []
    },
    {
      "title": "为什么默认使用PostgreSQL数据库？",
      "url": "https://herodotus.cn/knowledge/postgresql/",
      "id": "https://herodotus.cn/knowledge/postgresql/",
      "content_html": "<h1 id=\"为什么默认使用postgresql数据库\"> 为什么默认使用PostgreSQL数据库？</h1>\n<h2 id=\"postgresql-vs-mysql\"> PostgreSQL VS MySQL</h2>\n<p><img src=\"/images/database/my-sql-vs-postgre-sql-compressed.jpg\" alt=\"PostgreSQL VS MySQL\" /></p>\n<p>MySQL的背后是一个成熟的商业公司，而PostgreSQL的背后是一个庞大的志愿开发组。这使得MySQL的开发过程更为慎重，而PostgreSQL的反应更为迅速。这样的两种背景直接导致了各自固有的优点和缺点。</p>\n<h3 id=\"mysql\"> MySQL</h3>\n<p>MySQL声称自己是最流行的开源数据库。LAMP中的M指的就是MySQL。构建在LAMP上的应用都会使用MySQL，如WordPress,Drupal等大多数php开源程序。MySQL最初是由MySQL AB开发的，然后在2008年以10亿美金的价格卖给了Sun公司，Sun公司又在2010年被Oracle收购。Oracle支持MySQL的多个版本：Standard,Enterprise,Classic,Cluster,Embedded与Community。其中有一些是免费下载的，另外一些则是收费的。其核心代码基于GPL许可，由于MySQL被控制在Oracle，社区担心会对MySQL的开源会有影响，所以开发了一些分支，比如： MariaDB和Percona。</p>\n<h3 id=\"postgresql\"> PostgreSQL</h3>\n<p>PostgreSQL标榜自己是世界上最先进的开源数据库。PostgreSQL的一些粉丝说它能与Oracle相媲美，而且没有那么昂贵的价格和傲慢的客服。最初是1985年在加利福尼亚大学伯克利分校开发的，作为Ingres数据库的后继。PostgreSQL是完全由社区驱动的开源项目。它提供了单个完整功能的版本，而不像MySQL那样提供了多个不同的社区版,商业版与企业版。PostgreSQL基于自由的BSD/MIT许可，组织可以使用,复制,修改和重新分发代码，只需要提供一个版权声明即可。</p>\n<h2 id=\"postgresql相对于mysql的优势\"> PostgreSQL相对于MySQL的优势</h2>\n<h3 id=\"_1-不仅仅是关系型数据库\"> [1],不仅仅是关系型数据库</h3>\n<p>除了存储正常的数据类型外，还支持存储：</p>\n<ul>\n<li>array，不管是一位数组还是多为数组均支持</li>\n<li>json(hStore)和jsonb，相比使用text存储接送要高效很多</li>\n<li>json和jsonb之间的区别</li>\n</ul>\n<p>jsonb和json在更高的层面上看起来几乎是一样的，但在存储实现上是不同的。</p>\n<ul>\n<li>json存储完的文本，json列会每次都解析存储的值，它不支持索引，但你可以为查询创建表达式索引。</li>\n<li>jsonb存储的二进制格式，避免了重新解析数据结构。它支持索引，这意味着你可以不使用指定的索引就能查询任何路径。</li>\n</ul>\n<p>当我们比较写入数据速度时，由于数据存储的方式的原因，jsonb会比json稍微的慢一点。json列会每次都解析存储的值，这意味着键的顺序要和输入的时候一样。但jsonb不同，以二进制格式存储且不保证键的顺序。因此，如果你有软件需要依赖键的顺序，jsonb可能不是你的应用的最佳选择。使用jsonb的优势还在于你可以轻易的整合关系型数据和非关系型数据， PostgreSQL对于mongodb这类的基于文档的数据库是个不小的威胁，毕竟如果一个表中只有一列数据的类型是半结构化的，没有必要为了迁就它而整个表的设计采用schemaless的结构。</p>\n<h3 id=\"_2-支持地理信息处理扩展\"> [2],支持地理信息处理扩展</h3>\n<p>PostGIS 为PostgreSQL提供了存储空间地理数据的支持，使PostgreSQL成为了一个空间数据库，能够进行空间数据管理,数量测量与几何拓扑分析。在功能上，和MYSQL对比，PostGIS具有下列优势：</p>\n<p>O2O业务场景中的LBS业务使用PostgreSQL + PostGIS有无法比拟的优势。</p>\n<h3 id=\"_3-可以快速构建rest-api\"> [3],可以快速构建REST API</h3>\n<p>PostgREST 可以方便的为任何 PostgreSQL 数据库提供完全的 RESTful API 服务。</p>\n<h3 id=\"_4-支持树状结构\"> [4],支持树状结构</h3>\n<p>支持R-trees这样可扩展的索引类型，可以更方便地处理一些特殊数据。MySQL 处理树状的设计会很复杂, 而且需要写很多代码, 而 PostgreSQL 可以高效处理树结构。</p>\n<h3 id=\"_5-有极其强悍的-sql-编程能力\"> [5],有极其强悍的 SQL 编程能力</h3>\n<p>支持递归，有非常丰富的统计函数和统计语法支持。</p>\n<p>MySQL：支持 CREATE PROCEDURE 和 CREATE FUNCTION 语句。存储过程可以用 SQL 和 C++ 编写。用户定义函数可以用 SQL,C 和 C++ 编写。\nPostgreSQL：没有单独的存储过程，都是通过函数实现的。用户定义函数可以用 PL/pgSQL(专用的过程语言),PL/Tcl,PL/Perl,PL/Python ,SQL 和 C 编写。</p>\n<h3 id=\"_6-外部数据源支持\"> [6],外部数据源支持</h3>\n<p>可以把 70 种外部数据源 (包括 Mysql, Oracle, CSV, hadoop …) 当成自己数据库中的表来查询。Postgres有一个针对这一难题的解决方案：一个名为“外部数据封装器(Foreign Data Wrapper，FDW)”的特性。该特性最初由PostgreSQL社区领袖Dave Page四年前根据SQL标准SQL/MED(SQL Management of External Data)开发。FDW提供了一个SQL接口，用于访问远程数据存储中的远程大数据对象，使DBA可以整合来自不相关数据源的数据，将它们存入Postgres数据库中的一个公共模型。这样，DBA就可以访问和操作其它系统管理的数据，就像在本地Postgres表中一样。例如，使用FDW for MongoDB，数据库管理员可以查询来自文档数据库的数据，并使用SQL将它与来自本地Postgres表的数据相关联。借助这种方法，用户可以将数据作为行,列或JSON文档进行查看,排序和分组。他们甚至可以直接从Postgres向源文档数据库写入(插入,更细或删除)数据，就像一个一体的无缝部署。也可以对Hadoop集群或MySQL部署做同样的事。FDW使Postgres可以充当企业的中央联合数据库或“Hub”。</p>\n<h3 id=\"_7-没有字符串长度限制\"> [7],没有字符串长度限制</h3>\n<p>一般关系型数据库的字符串有限定长度8k左右，无限长 TEXT 类型的功能受限，只能作为外部大数据访问。而PostgreSQL的 TEXT 类型可以直接访问，SQL语法内置正则表达式，可以索引，还可以全文检索，或使用xml xpath。MySQL 的各种text字段有不同的限制，要手动区分 small text, middle text, large text… PostgreSQL 没有这个限制，text 能支持各种大小。</p>\n<h3 id=\"_8-支持图结构数据存储\"> [8],支持图结构数据存储</h3>\n<p>没有具体使用过，具体可以自己搜索下。<a href=\"https://mp.weixin.qq.com/s/cjor82wgDu5gzDvTYpLDWw\" target=\"_blank\" rel=\"noopener noreferrer\">参考链接</a></p>\n<h3 id=\"_9-支持窗口函数\"> [9],支持窗口函数</h3>\n<p>窗口函数提供跨行相关的当前查询行集执行计算的能力。仅当调用跟着OVER子句的聚集函数，作为窗口函数;否则它们作为常规的聚合函数。窗口也是一种分组，但和 group by 的分组不同。窗口，可以提供分组之外，还可以执行对每个窗口进行计算。可以想象成是group by 后，然后对每个分组进行计算，而不像Group by ，只是单纯地分组。MySQL 不支持 OVER 子句, 而PostgreSQL支持。OVER 子句能简单的解决 “每组取 top 5” 的这类问题。MySQL支持的SQL语法(ANSI SQL标准)的很小一部分。不支持递归查询,通用表表达式(Oracle的with 语句)或者窗口函数(分析函数)。</p>\n<h3 id=\"_10-对索引的支持更强\"> [10],对索引的支持更强</h3>\n<p>PostgreSQL 的可以使用函数和条件索引，这使得PostgreSQL数据库的调优非常灵活，mysql就没有这个功能，条件索引在web应用中很重要。对于索引类型：</p>\n<p>MySQL：取决于存储引擎。MyISAM：BTREE，InnoDB：BTREE。\nPostgreSQL：支持 B-树,哈希,R-树和 Gist 索引。\nInnoDB的表和索引都是按相同的方式存储。也就是说表都是索引组织表。这一般要求主键不能太长而且插入时的主键最好是按顺序递增，否则对性能有很大影响。PostgreSQL不存在这个问题。</p>\n<p>索引类型方面，MySQL取决于存储引擎。MyISAM：BTREE，InnoDB：B+TREE。PostgreSQL支持 B-树,哈希,R-树和 Gist 索引。</p>\n<h3 id=\"_11-集群支持更好\"> [11],集群支持更好</h3>\n<p>Mysql Cluster可能与你的想象有较大差异。开源的cluster软件较少。复制(Replication)功能是异步的并且有很大的局限性。例如，它是单线程的(single-threaded)，因此一个处理能力更强的Slave的恢复速度也很难跟上处理能力相对较慢的Master。</p>\n<p>PostgreSQL有丰富的开源cluster软件支持。plproxy 可以支持语句级的镜像或分片，slony 可以进行字段级的同步设置，standby 可以构建WAL文件级或流式的读写分离集群，同步频率和集群策略调整方便，操作非常简单。</p>\n<p>另外，PostgreSQL的主备复制属于物理复制，相对于MySQL基于binlog的逻辑复制，数据的一致性更加可靠，复制性能更高，对主机性能的影响也更小。对于WEB应用来说，复制的特性很重要，mysql到现在也是异步复制，pgsql可以做到同步，异步，半同步复制。还有mysql的同步是基于binlog复制，类似oracle golden gate,是基于stream的复制，做到同步很困难，这种方式更加适合异地复制，pgsql的复制基于wal，可以做到同步复制。同时，pgsql还提供stream复制。</p>\n<h3 id=\"_12-事务隔离做的更好\"> [12],事务隔离做的更好</h3>\n<p>MySQL 的事务隔离级别 repeatable read 并不能阻止常见的并发更新, 得加锁才可以, 但悲观锁会影响性能, 手动实现乐观锁又复杂. 而 PostgreSQL 的列里有隐藏的乐观锁 version 字段, 默认的 repeatable read 级别就能保证并发更新的正确性, 并且又有乐观锁的性能。</p>\n<h3 id=\"_13-对于字符支持更好一些\"> [13],对于字符支持更好一些</h3>\n<p>MySQL 里需要 utf8mb4 才能显示 emoji 的坑, PostgreSQL 没这个坑。</p>\n<h3 id=\"_14-对表连接支持较完整\"> [14],对表连接支持较完整</h3>\n<p>对表连接支持较完整，MySQL只有一种表连接类型:嵌套循环连接(nested-loop),不支持排序-合并连接(sort-merge join)与散列连接(hash join)。PostgreSQL都支持。</p>\n<h3 id=\"_15-存储方式支持更大的数据量\"> [15],存储方式支持更大的数据量</h3>\n<p>PostgreSQL主表采用堆表存放，MySQL采用索引组织表，能够支持比MySQL更大的数据量。</p>\n<h3 id=\"_16-时间精度更高\"> [16],时间精度更高</h3>\n<p>MySQL对于时间,日期,间隔等时间类型没有秒以下级别的存储类型，而PostgreSQL可以精确到秒以下。</p>\n<h3 id=\"_17-优化器的功能较完整\"> [17],优化器的功能较完整</h3>\n<p>MySQL对复杂查询的处理较弱，查询优化器不够成熟，explain看执行计划的结果简单。性能优化工具与度量信息不足。</p>\n<p>PostgreSQL很强大的查询优化器，支持很复杂的查询处理。explain返回丰富的信息。提供了一些性能视图，可以方便的看到发生在一个表和索引上的select,delete,update,insert统计信息，也可以看到cache命中率。网上有一个开源的pgstatspack工具。</p>\n<h3 id=\"_18-序列支持更好\"> [18],序列支持更好</h3>\n<p>MySQL 不支持多个表从同一个序列中取 id, 而 PostgreSQL 可以。</p>\n<h3 id=\"_19-对子查询支持更好\"> [19],对子查询支持更好</h3>\n<p>对子查询的支持。虽然在很多情况下在SQL语句中使用子查询效率低下，而且绝大多数情况下可以使用带条件的多表连接来替代子查询，但是子查询的存在在很多时候仍然不可避免。而且使用子查询的SQL语句与使用带条件的多表连接相比具有更高的程序可读性。几乎任何数据库的子查询 (subquery) 性能都比 MySQL 好。</p>\n<h3 id=\"_20-增加列更加简单\"> [20],增加列更加简单</h3>\n<p>MySQL表增加列，基本上是重建表和索引，会花很长时间。PostgreSQL表增加列，只是在数据字典中增加表定义，不会重建表.</p>\n<h2 id=\"mysql相对于postgresql的优势\"> MySQL相对于PostgreSQL的优势</h2>\n<h3 id=\"_1-mysql比postgresql更流行\"> [1],MySQL比PostgreSQL更流行</h3>\n<p>流行对于一个商业软件来说，也是一个很重要的指标，流行意味着更多的用户，意味着经受了更多的考验，意味着更好的商业支持,意味着更多,更完善的文档资料。易用，很容易安装。第三方工具，包括可视化工具，让用户能够很容易入门。</p>\n<h3 id=\"_2-回滚实现更优\"> [2],回滚实现更优</h3>\n<p>innodb的基于回滚段实现的MVCC机制，相对PG新老数据一起存放的基于XID的MVCC机制，是占优的。新老数据一起存放，需要定时触发VACUUM，会带来多余的IO和数据库对象加锁开销，引起数据库整体的并发能力下降。而且VACUUM清理不及时，还可能会引发数据膨胀。</p>\n<h3 id=\"_3-在windows上运行更可靠\"> [3],在Windows上运行更可靠</h3>\n<p>与PostgreSQL相比，MySQL更适宜在Windows环境下运行。MySQL作为一个本地的Windows应用程序运行(在 NT/Win2000/WinXP下，是一个服务)，而PostgreSQL是运行在Cygwin模拟环境下。PostgreSQL在Windows下运行没有MySQL稳定，应该是可以想象的。</p>\n<h3 id=\"_4-线程模式相比进程模式的优势\"> [4],线程模式相比进程模式的优势</h3>\n<p>MySQL使用了线程，而PostgreSQL使用的是进程。在不同线程之间的环境转换和访问公用的存储区域显然要比在不同的进程之间要快得多。</p>\n<p>进程模式对多CPU利用率比较高。进程模式共享数据需要用到共享内存，而线程模式数据本身就是在进程空间内都是共享的，不同线程访问只需要控制好线程之间的同步。\n线程模式对资源消耗比较少。所以MySQL能支持远比PostgreSQL多的更多的连接。但PostgreSQL中有优秀的连接池软件软件，如pgbouncer和pgpool，所以通过连接池也可以支持很多的连接。</p>\n<h3 id=\"_5-权限设置上更加完善\"> [5],权限设置上更加完善</h3>\n<p>MySQL在权限系统上比PostgreSQL某些方面更为完善。PostgreSQL只支持对于每一个用户在一个数据库上或一个数据表上的 INSERT,SELECT和UPDATE/DELETE的授权，而MySQL允许你定义一整套的不同的数据级,表级和列级的权限。对于列级的权限， PostgreSQL可以通过建立视图，并确定视图的权限来弥补。MySQL还允许你指定基于主机的权限，这对于目前的PostgreSQL是无法实现的，但是在很多时候，这是有用的。</p>\n<h3 id=\"_6-存储引擎插件化机制\"> [6],存储引擎插件化机制</h3>\n<p>MySQL的存储引擎插件化机制，使得它的应用场景更加广泛，比如除了innodb适合事务处理场景外，myisam适合静态数据的查询场景。</p>\n<h3 id=\"_7-适应24-7运行\"> [7],适应24/7运行</h3>\n<p>MySQL可以适应24/7运行。在绝大多数情况下，你不需要为MySQL运行任何清除程序。PostgreSQL目前仍不完全适应24/7运行，这是因为你必须每隔一段时间运行一次VACUUM。</p>\n<h3 id=\"_8-更加试用于简单的场景\"> [8],更加试用于简单的场景</h3>\n<p>PostgreSQL只支持堆表，不支持索引组织表，Innodb只支持索引组织表。</p>\n<ul>\n<li>索引组织表的优势：表内的数据就是按索引的方式组织，数据是有序的，如果数据都是按主键来访问，那么访问数据比较快。而堆表，按主键访问数据时，是需要先按主键索引找到数据的物理位置。</li>\n<li>索引组织表的劣势：索引组织表中上再加其它的索引时，其它的索引记录的数据位置不再是物理位置，而是主键值，所以对于索引组织表来说，主键的值不能太大，否则占用的空间比较大。</li>\n</ul>\n<p>对于索引组织表来说，如果每次在中间插入数据，可能会导致索引分裂，索引分裂会大大降低插入的性能。所以对于使用innodb来说，我们一般最好让主键是一个无意义的序列，这样插入每次都发生在最后，以避免这个问题。\n由于索引组织表是按一个索引树，一般它访问数据块必须按数据块之间的关系进行访问，而不是按物理块的访问数据的，所以当做全表扫描时要比堆表慢很多，这可能在OLTP中不明显，但在数据仓库的应用中可能是一个问题。</p>\n<h2 id=\"总结\"> 总结</h2>\n<p>MySQL从一开始就没有打算做所有事情，因而它在功能方面有一定的局限性，并不能满足一些先进应用程序的要求。MySQL对某些功能(例如引用,事务,审计等)的实现方式使得它与其他的关系型数据库相比缺少了一些可靠性。对于简单繁重的读取操作，使用PostgreSQL可能有点小题大做，同时性能也比MySQL这样的同类产品要差。除非你需要绝对的数据完整性，ACID遵从性或者设计复杂，否则PostgreSQL对于简单的场景而言有点多余。</p>\n<p>如何你确定只在MySQL和PostgreSQL中进行选择，以下规则总是有效的：</p>\n<ul>\n<li>如果你的操作系统是Windows，你应该使用MySQL。</li>\n<li>当绝对需要可靠性和数据完整性的时候，PostgreSQL是更好的选择。</li>\n<li>如果需要数据库执行定制程序，那么可扩展的PostgreSQL是更好的选择。</li>\n<li>你的应用处理的是地理数据，由于R-TREES的存在，你应该使用PostgreSQL。</li>\n<li>如果你对数据库并不了十分了解，甚至不知道事务,存储过程等究竟是什么，你应该使用MySQL。</li>\n</ul>\n",
      "image": "https://herodotus.cn/images/database/my-sql-vs-postgre-sql-compressed.jpg",
      "date_published": "2021-10-27T16:13:57.000Z",
      "date_modified": "2021-10-28T15:24:29.000Z",
      "authors": [
        {
          "name": "码匠君"
        }
      ],
      "tags": []
    },
    {
      "title": "本地开发环境搭建",
      "url": "https://herodotus.cn/knowledge/dev-environment/",
      "id": "https://herodotus.cn/knowledge/dev-environment/",
      "content_html": "<h1 id=\"本地开发环境搭建\"> 本地开发环境搭建</h1>\n<h2 id=\"java-开发环境\"> Java 开发环境</h2>\n<h3 id=\"_1-jdk-安装及配置\"> [1],JDK 安装及配置</h3>\n<h4 id=\"_1-下载-jdk\"> （1）下载 JDK</h4>\n<p>下载 <code>Java SE Development Kit</code> (JDK) <a href=\"https://www.oracle.com/java/technologies/downloads/#java8\" target=\"_blank\" rel=\"noopener noreferrer\">下载地址</a>。</p>\n<div><p>说明</p>\n<p>建议下载 <code>JDK 8</code>, 更高的版本逻辑上是向下兼容的，但是本系统还没有进行过验证。</p>\n</div>\n<h4 id=\"_2-安装-jdk\"> （2）安装 JDK</h4>\n<p>点击安装下载后的<code>JDK</code>安装文件，全部点击下一步即可。</p>\n<div><p>说明</p>\n<p>建议全部点击下一步安装，不要修改安装目录等内容，全部默认安装。一方面，在没有搞清楚 JDK 和 JRE 区别时，不建议修改安装目录，这经常会导致装错或者漏装；另一方面，个人觉得装在默认目录挺好，方便定位查找，重装系统也一并清除了。</p>\n<blockquote>\n<p>只是个人建议，请结合自己的实际情况和考虑安装。</p>\n</blockquote>\n</div>\n<h4 id=\"_3-配置jdk环境变量-windows\"> （3）配置JDK环境变量（Windows）</h4>\n<p>右键点击 Windows 左下角的 Windows 图标，选择 <code>系统—&gt;高级系统设置—&gt;环境变量</code>。</p>\n<ol>\n<li>在 <code>系统变量</code> 栏中，点击<code>新建</code>，弹出 <code>编辑系统变量</code> 对话框。</li>\n</ol>\n<ul>\n<li>在 <code>变量名(N)</code> 中，输入变量名称 <code>JAVA_HOME</code></li>\n<li>在 <code>变量值(V)</code> 中，输入JDK 所在目录 <code>C:\\Program Files\\Java\\jdk1.8.0_301</code></li>\n</ul>\n<div><p>注意</p>\n<p>JDK 安装完成之后，会在 <code>C:\\Program Files\\Java</code> 目录中生成两个目录, 以 <code>Java SE Development Kit 8u301</code> 为例，生成的目录就是：<code>jdk1.8.0_301</code> 和 <code>jre1.8.0_301</code>。</p>\n<p>在 <code>变量值(V)</code> 中，我们要配置的是 <code>jdk1.8.0_301</code> 目录地址，而不是 <code>jre1.8.0_301</code></p>\n</div>\n<p>点击 <code>编辑系统变量</code> 对话框中的【确定】按钮，保存配置。</p>\n<ol start=\"2\">\n<li>还是在 <code>系统变量</code> 栏中，找到 <code>Path</code> 变量，点击<code>编辑</code>， 弹出 <code>编辑环境变量</code> 对话框</li>\n</ol>\n<p>在 <code>编辑环境变量</code> 对话框中，添加 <code>%JAVA_HOME%\\bin</code></p>\n<div><p>说明</p>\n<p><code>%JAVA_HOME%</code> 的意思，即使引用上一步中，定义的变量 <code>JAVA_HOME</code> 的 变量值。</p>\n</div>\n<p>点击 <code>编辑环境变量</code> 对话框中的【确定】按钮，保存配置。</p>\n<h4 id=\"_4-验证jdk安装\"> （4）验证JDK安装</h4>\n<div><p>说明</p>\n<p>至此，JDK环境变量已经配置完成。以上这些配置已经可以完全满足JAVA开发的正常需要，除非特别的应用需求，比如说本地运行自定义的,需要独立运行的纯Java程序外，不再需要像网上说的，还要配置什么 <code>.</code> , <code>classpath</code>, <code>tools.jar</code> 之类的东西。</p>\n</div>\n<p>新打开一个命令提示符（CMD），输入以下命令：</p>\n<div><pre><code>java -version\n</code></pre>\n<div><span>1</span><br></div></div><p>如果可以正确显示版本信息，说明安装成功，如下图所示。</p>\n<p><img src=\"/images/environment/jdk-validation.png\" alt=\"jdk-validation\" /></p>\n<div><p>注意</p>\n<p>CMD 自身有 Session 机制，每次打开是以当前的环境变量配置作为依据运行。环境变量配置完成之后，如果使用之前的 CMD 窗口，新的环境变量配置将不会生效。所以一定要注意，重新开一个 CMD 窗口进行安装验证。</p>\n</div>\n<h3 id=\"_2-maven-安装及配置\"> [2],Maven 安装及配置</h3>\n<h4 id=\"_1-下载maven\"> （1）下载Maven</h4>\n<p>下载 <code>Apache Maven</code> <a href=\"http://maven.apache.org/download.cgi\" target=\"_blank\" rel=\"noopener noreferrer\">下载地址</a>。</p>\n<h4 id=\"_2-解压缩-maven\"> （2）解压缩 Maven</h4>\n<p>将下载好的 <code>apache-maven-XXXX-bin.zip</code>, 解压到你想要放置的任何位置。</p>\n<div><p>说明</p>\n<p>Maven 是 Java 开发常用的工具，建议最好找一个相对固定的位置放置，一方面，不需要频繁修改和更换版本；另一方面，主要是好找，方便反复使用。</p>\n</div>\n<h4 id=\"_3-配置maven环境变量-windows\"> （3）配置Maven环境变量（Windows）</h4>\n<p>右键点击 Windows 左下角的 Windows 图标，选择 <code>系统—&gt;高级系统设置—&gt;环境变量</code>。</p>\n<ol>\n<li>在 <code>系统变量</code> 栏中，点击<code>新建</code>，弹出 <code>编辑系统变量</code> 对话框。</li>\n</ol>\n<ul>\n<li>在 <code>变量名(N)</code> 中，输入变量名称 <code>MAVEN_HOME</code></li>\n<li>在 <code>变量值(V)</code> 中，输入 Maven 所在目录，这里以 <code>D:\\Environment\\apache-maven-3.8.2</code> 为例，请根据实际情况进行修改。</li>\n</ul>\n<p>点击 <code>编辑系统变量</code> 对话框中的【确定】按钮，保存配置。</p>\n<ol start=\"2\">\n<li>还是在 <code>系统变量</code> 栏中，找到 <code>Path</code> 变量，点击<code>编辑</code>， 弹出 <code>编辑环境变量</code> 对话框</li>\n</ol>\n<p>在 <code>编辑环境变量</code> 对话框中，添加 <code>%MAVEN_HOME%\\bin</code></p>\n<div><p>说明</p>\n<p><code>%MAVEN_HOME%</code> 的意思，即使引用上一步中，定义的变量 <code>MAVEN_HOME</code> 的 变量值。</p>\n</div>\n<p>点击 <code>编辑环境变量</code> 对话框中的【确定】按钮，保存配置。</p>\n<h4 id=\"_4-验证maven安装\"> （4）验证Maven安装</h4>\n<p>新打开一个命令提示符（CMD），输入以下命令：</p>\n<p>如果可以正确显示版本信息，说明安装成功，如下图所示。</p>\n<p><img src=\"/images/environment/maven-validation.png\" alt=\"maven-validation\" /></p>\n<div><p>注意</p>\n<p>CMD 自身有 Session 机制，每次打开是以当前的环境变量配置作为依据运行。环境变量配置完成之后，如果使用之前的 CMD 窗口，新的环境变量配置将不会生效。所以一定要注意，重新开一个 CMD 窗口进行安装验证。</p>\n</div>\n<h4 id=\"_5-创建本地仓库目录\"> （5）创建本地仓库目录</h4>\n<p>建议找一个相对固定的位置，创建任意名称的文件夹，作为本地仓库存储 Maven 下载的依赖。</p>\n<div><p>说明</p>\n<p>使用 Maven 时，Maven 会从中央库，将 <code>pom.xml</code> 中依赖的组件，下载至本地供开发和编译使用。默认情况下，Maven 会将下载的依赖组件，放置到系统盘中的 <code>.m2</code> 目录下。这不仅会慢慢撑大系统盘空间的使用，如果重装系统，相关的组件又需要重新下载。</p>\n<p>指定一个文件夹，作为本地 Maven 存储仓库，可以减少依赖组件的反复下载，起到重复使用的作用。</p>\n</div>\n<p>这里以 <code>maven-repository</code> 为例，放在与 <code>apache-maven-3.8.2</code> 平级的目录下。只是示例，请根据实际情况修改。</p>\n<h4 id=\"_6-修改-maven-配置\"> （6）修改 Maven 配置</h4>\n<p>在 Maven 安装目录下，找到 <code>settings.xml</code> 文件，具体路径为 <code>${maven_home}/conf/settings.xml</code>。</p>\n<p>用任意编辑器打开 <code>settings.xml</code> 文件中，找到被注释掉的 <code>&lt;localRepository&gt;</code> 节点，在其下方添加以下配置：</p>\n<div><pre><code><span><span><span>&lt;</span>localRepository</span><span>></span></span>D:/Environment/maven-repository<span><span><span>&lt;/</span>localRepository</span><span>></span></span>\n</code></pre>\n<div><span>1</span><br></div></div><div><p>说明</p>\n<p>这里的路径，就是上一步中创建的本地 Maven 存储仓库文件夹所在的路径。</p>\n<blockquote>\n<p>注意：路径的格式，斜杠的方向。不同的操作系统，会略有不同。</p>\n</blockquote>\n</div>\n<p>在 <code>settings.xml</code> 文件中，找到 <code>&lt;mirrors&gt;</code> 节点，在其内部添加以下配置：</p>\n<div><pre><code><span><span><span>&lt;</span>mirror</span><span>></span></span>\n    <span><span><span>&lt;</span>id</span><span>></span></span>aliyunmaven<span><span><span>&lt;/</span>id</span><span>></span></span>\n    <span><span><span>&lt;</span>mirrorOf</span><span>></span></span>*<span><span><span>&lt;/</span>mirrorOf</span><span>></span></span>\n    <span><span><span>&lt;</span>name</span><span>></span></span>阿里云公共仓库<span><span><span>&lt;/</span>name</span><span>></span></span>\n    <span><span><span>&lt;</span>url</span><span>></span></span>https://maven.aliyun.com/repository/public<span><span><span>&lt;/</span>url</span><span>></span></span>\n<span><span><span>&lt;/</span>mirror</span><span>></span></span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><div><p>说明</p>\n<p>Maven 默认是从中央仓库进行依赖的下载，具体地址为 <code>https://repo.maven.apache.org/maven2</code>。因为涉及到国外网络，下载速度比较慢。通过上面的配置，将 Maven 仓库修改为阿里公共仓库，依赖下载速度会快很多。</p>\n<blockquote>\n<p>阿里公共仓库会同步中央库的内容，可以放心使用，不用担心内容不全的问题。当然，可以根据你自身的情况添加其它的仓库。</p>\n</blockquote>\n</div>\n<h3 id=\"_3-git-安装\"> [3],Git 安装</h3>\n<p>下载 <code>Git</code> <a href=\"https://git-scm.com/download/win\" target=\"_blank\" rel=\"noopener noreferrer\">下载地址</a>。</p>\n<p>全部使用默认设置，一路 <code>Next</code> 安装即可</p>\n<h3 id=\"_4-idea-安装及配置\"> [4],Idea 安装及配置</h3>\n<h4 id=\"_1-下载-idea\"> （1）下载 Idea</h4>\n<p>下载 <code>Idea</code> <a href=\"https://www.jetbrains.com/idea/\" target=\"_blank\" rel=\"noopener noreferrer\">下载地址</a>。</p>\n<p>全部使用默认设置，一路 <code>Next</code> 安装即可</p>\n<blockquote>\n<p>具体怎么激活，请自行百度</p>\n</blockquote>\n<div><p>这里为什么将 Idea 安装放在第四部分说明？</p>\n<p>主要原因是，JDK,Maven 和 Git 均已安装配置好之后，再来安装 Idea，Idea 就会自动读取 <code>JAVA_HOME</code>, <code>MAVEN_HOME</code> 以及 Git的安装路径等信息，并进行自动配置。就无须再手动配置这些信息，使用起来比较方便。</p>\n<p>如果没有按照，上面所说的顺序，已经提前安装好了Idea。可以在JDK,Maven 和 Git 均已安装配置好之后，重新启动 Idea，<code>JAVA_HOME</code>, <code>MAVEN_HOME</code> 以及 Git的安装路径等信息也会被读取并进行设置。</p>\n</div>\n<h4 id=\"_2-在-idea-中修改-maven-配置\"> （2）在 Idea 中修改 Maven 配置</h4>\n<p>打开 Idea，点击 <code>File -&gt; Settings... -&gt; Maven</code>，打开 Maven 配置面板，如下图所示：</p>\n<p><img src=\"/images/idea/maven-config-01.png\" alt=\"maven-config-01\" /></p>\n<p>在 Maven 配置面板中，修改 Maven 的配置。</p>\n<ol>\n<li>设置 <code>Maven home path</code></li>\n</ol>\n<p>在 Maven 配置面板中，设置 <code>Maven home path</code> 的值，如果 Maven 的环境变量配置正确，那么在 <code>Maven home path</code> 选择下拉框中，就可以找到当前环境变量中配置的  Maven 信息，这个值就是环境变量 <code>MAVEN_HOME</code> 中配置的值。如下图所示：</p>\n<p><img src=\"/images/idea/maven-config-02.png\" alt=\"maven-config-02\" /></p>\n<ol start=\"2\">\n<li>设置 <code>User setting files</code></li>\n</ol>\n<p>在 Maven 配置面板中，首先勾选 <code>User setting files</code> 设置后面的 <code>Override</code>，勾选之后 <code>User setting files</code> 的选择框就会变为激活的状态。</p>\n<p>点击 <code>User setting files</code> 设置中的 <code>文件夹</code> 按钮，选择 <code>${maven_home}/conf/settings.xml</code> 文件，具体如下图所示：</p>\n<p><img src=\"/images/idea/maven-config-03.png\" alt=\"maven-config-03\" /></p>\n<p>如果 <code>${maven_home}/conf/settings.xml</code> 文件已经正确配置，并且在 <code>User setting files</code> 设置中也选择正确的情况下，<code>Local repository</code> 配置就会自动显示出自定义本地仓库的路径，这个路径就是刚刚，在 <code>${maven_home}/conf/settings.xml</code> 中设置的 <code>&lt;localRepository&gt;</code> 的值，这就说明配置成功。如上图所示。</p>\n<div><p>注意</p>\n<p>当前截图使用的是 <code>Idea 2021.2.3</code> 版本，之前发现有些低版本Idea，不会自动读取 <code>${maven_home}/conf/settings.xml</code> 中配置的 <code>&lt;localRepository&gt;</code> 值。</p>\n<p>如果出现这种情况，勾选 <code>Local repository</code> 后面的 <code>Override</code>，激活 <code>Local repository</code> 设置的文件选择框，手动选择一下你所定义的本地仓库文件夹，即可解决。</p>\n</div>\n<h4 id=\"_3-在-idea-中修改-maven-的全局配置\"> （3）在 Idea 中修改 Maven 的全局配置</h4>\n<p>Idea 中很多设置否分为两种，一种设置只是针对当前工程，这种设置只是针对当前工程有效，打开新的工程或者重新检出当前工程就需要重新配置；一种设置是针对新工程，配置之后所有用 Idea 打开工程都会生效，就不需要重新设置。</p>\n<p>上一步中进行 Maven 设置，就是前一种设置，只对当前工程有效，打开新的工程或者重新检出当前工程就需要重新设置 Maven。</p>\n<p>可以通过下面的方式，进行 Maven 的 “全局” 配置。</p>\n<p>点击 <code>File -&gt; New Projects Setup -&gt; Settings For New Prjects...</code>，会跳出全局设置面板，如下图所示：</p>\n<p><img src=\"/images/idea/maven-config-04.png\" alt=\"maven-config-04\" /></p>\n<p>在这个面板中，找到 Maven 配置，重复进行上一步的操作即可。</p>\n<h3 id=\"_5-检出代码和编译\"> [5],检出代码和编译</h3>\n<p>在 <code>IDEA</code> 中，点击菜单 <code>File -&gt; New -&gt; Project From Version Control...</code>, 在弹出框中输入本工程Git地址：<a href=\"https://gitee.com/herodotus/eurynome-cloud.git\" target=\"_blank\" rel=\"noopener noreferrer\">https://gitee.com/herodotus/eurynome-cloud.git</a>，然后设置放置目录，点击 <strong>OK</strong> 即可。</p>\n<p>在这个过程中，Idea 会从 Git 中检出代码，并且检查 <code>pom.xml</code> 中的依赖，如果本地仓库中没有，就从配置的中央库中重新下载。</p>\n<blockquote>\n<p>检查上文中，自定义的本地 Maven 仓库，如果有依赖包更新，说明全部配置成功。</p>\n</blockquote>\n<div><p>说明</p>\n<ul>\n<li>\n<p>如果是初次搭建Java的开发环境，那么本地 Maven 仓库中内容是空的，就会需要一定时间下载所有的依赖库，具体所需时间根据网络情况的不同会有差异。</p>\n</li>\n<li>\n<p>如果是初次搭建Java的开发环境，由于下载的依赖包较多，Idea 解析不过来，会导致 Idea 右侧 Maven 面板中有些依赖标成红色。如果已经确定所有的依赖均已下载完成，可以编译一下代码，编译代码参见：<a href=\"./../documents-athena/环境部署.html\">环境部署</a>，如果可以编译成功，说明环境正常，下次启动 Idea 右侧 Maven 面板中被标成红色依赖就会消失</p>\n</li>\n</ul>\n</div>\n<div><p>提示</p>\n<p>如果本地Java开发环境，不是严格按照本文档顺序进行搭建的。特别是已经提前检出了代码，那么有可能不会自动出发 Idea Maven 的更新机制。</p>\n<p>可以根据第三步中的描述，修改完 Maven 的配置之后，点击下图中的刷新按钮，手动触发 Maven 的更新和下载。</p>\n<blockquote>\n<p>如果发现有编译错误，可以先检查一下 Maven 配置，确保配置没有问题后，尝试点击刷新按钮，多数情况下问题都可以解决。</p>\n</blockquote>\n<p>在IDEA中，打开 <code>Maven</code> 面板，点击刷新按钮。如下图所示：</p>\n<p><img src=\"/images/idea/refresh-maven.png\" alt=\"refresh-maven\" /></p>\n</div>\n<h2 id=\"node-开发环境\"> Node 开发环境</h2>\n<h3 id=\"_1-nodejs-安装\"> [1],Nodejs 安装</h3>\n<p>下载 Nodejs，<a href=\"https://nodejs.org/zh-cn/\" target=\"_blank\" rel=\"noopener noreferrer\">下载地址</a>，按照提示安装即可，记得选择将Nodejs增加到PATH一项，如果界面上没有，应该就是默认帮你搞定了，可以忽略。</p>\n<p>安装完成后，通过命令，验证是否安装成：</p>\n<div><pre><code>node -v\n\nnpm -v\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>如果正常显示版本号，即安装成功。</p>\n<h3 id=\"_2-nodejs-配置\"> [2],Nodejs 配置</h3>\n<p>Nodejs安装完成之后，默认会将Node.exe的路径，添加到系统的环境变量中，如果没有请手动添加。</p>\n<p>Nodejs 默认的缓存目录和全局安装目录都在系统盘，会占用大量的系统盘空间，所以建议修改，如果不想修改，请跳过此部分内容。</p>\n<h4 id=\"_1-配置prefix和cache目录\"> （1）配置prefix和cache目录</h4>\n<p><code>prefix</code> 就是 Nodejs 来全局安装的位置，<code>cache</code> 就是 Nodejs 依赖下载缓存的目录</p>\n<ul>\n<li>改变 npm prefix 全局安装位置</li>\n</ul>\n<div><pre><code><span>npm</span> config <span>set</span> prefix <span>\"你的磁盘路径\"</span>\n</code></pre>\n<div><span>1</span><br></div></div><p>假设你所指定的根目录地址为：<code>C:\\Program Files\\nodejs</code></p>\n<div><pre><code><span>npm</span> config <span>set</span> prefix “C:<span>\\</span>Program Files<span>\\</span>nodejs<span>\\</span>node_global”\n</code></pre>\n<div><span>1</span><br></div></div><ul>\n<li>改变 npm cache 缓存位置</li>\n</ul>\n<div><pre><code><span>npm</span> config <span>set</span> cache <span>\"你的磁盘路径\"</span>\n</code></pre>\n<div><span>1</span><br></div></div><p>假设你所指定的根目录地址为：<code>C:\\Program Files\\nodejs</code></p>\n<div><pre><code><span>npm</span> config <span>set</span> cache  “C:<span>\\</span>Program Files<span>\\</span>nodejs<span>\\</span>node_cache\n</code></pre>\n<div><span>1</span><br></div></div><h4 id=\"_2-配置环境变量\"> （2）配置环境变量</h4>\n<p>Nodejs 在安装过程中，会自动配置 Path 环境变量。但这个环境变量只是针对 <code>Node</code> 和 <code>Npm</code> 有效。对于一些全局安装的应用，例如 @vue/cli，如果不配置环境变量，它的相关命令是无法正常执行的。</p>\n<p>右键点击 Windows 左下角的 Windows 图标，选择 <code>系统—&gt;高级系统设置—&gt;环境变量</code>。</p>\n<ol>\n<li>在 <code>系统变量</code> 栏中，点击<code>新建</code>，弹出 <code>编辑系统变量</code> 对话框。</li>\n</ol>\n<ul>\n<li>在 <code>变量名(N)</code> 中，输入变量名称 <code>NODE_PATH</code></li>\n<li>在 <code>变量值(V)</code> 中，输入上一步中指定的 <code>prefix</code> 加上 <code>node_modules</code> 文件夹，如下所示，请根据实际情况修改</li>\n</ul>\n<div><pre><code>C:<span>\\</span>Program Files<span>\\</span>nodejs<span>\\</span>node_global<span>\\</span>node_modules\n</code></pre>\n<div><span>1</span><br></div></div><div><p>说明</p>\n<p>这个值就是上一步中，通过 <strong>“npm config set prefix”</strong> 设置的值。可以，用下面命令查看</p>\n<div><pre><code><span>npm</span> config get prefix\n</code></pre>\n<div><span>1</span><br></div></div><blockquote>\n<p>切记，一定要加上 <code>\\node_modules</code>。因为，有些全局应用是安装在 <code>C:\\Program Files\\nodejs\\node_global\\node_modules</code> 目录下</p>\n</blockquote>\n</div>\n<p>点击 <code>编辑系统变量</code> 对话框中的【确定】按钮，保存配置。</p>\n<ol start=\"2\">\n<li>在 <code>用户变量</code> 栏中， 找到 <code>Path</code> 变量，点击<code>编辑</code>， 弹出 <code>编辑环境变量</code> 对话框</li>\n</ol>\n<p>在 <code>编辑环境变量</code> 对话框中，添加 <code>C:\\Program Files\\nodejs\\node_global\\</code></p>\n<blockquote>\n<p>这个值就是上一步中，通过 <strong>“npm config set prefix”</strong> 设置的值。</p>\n</blockquote>\n<p>至此，Node 相关的环境变量配置完成。</p>\n<h4 id=\"_3-配置阿里源\"> （3）配置阿里源</h4>\n<p>将 Npm 的下载源，修改为阿里源，可以提升依赖包下载速度，执行一下命令设置。</p>\n<div><pre><code><span>npm</span> config <span>set</span> registry https://registry.npm.taobao.org\n</code></pre>\n<div><span>1</span><br></div></div><h3 id=\"_3-yarn-简介\"> [3],Yarn 简介</h3>\n<p><code>Yarn</code> 是 Facebook 发布的一款取代 <code>npm</code> 的包管理工具。</p>\n<p>Yarn的特点：</p>\n<ul>\n<li>速度超快。Yarn 缓存了每个下载过的包，所以再次使用时无需重复下载。 同时利用并行下载以最大化资源利用率，因此安装速度更快。</li>\n<li>超级安全。在执行代码之前，Yarn 会通过算法校验每个安装包的完整性。</li>\n<li>超级可靠。使用详细,简洁的锁文件格式和明确的安装算法，Yarn 能够保证在不同系统上无差异的工作。</li>\n</ul>\n<h3 id=\"_4-yarn-安装\"> [4],Yarn 安装</h3>\n<ul>\n<li>方式一：使用 <code>npm</code> 安装</li>\n</ul>\n<div><pre><code><span>npm</span> <span>install</span> -g <span>yarn</span>\n</code></pre>\n<div><span>1</span><br></div></div><ul>\n<li>方式二：使用安装文件安装</li>\n</ul>\n<p>即在官网中下载exe文件安装（Windows），其它系统根据实际情况安装。</p>\n<h3 id=\"_5-yarn-配置\"> [5],Yarn 配置</h3>\n<h4 id=\"_1-配置-yarn-prefix-和-cache目录\"> （1）配置 Yarn prefix 和 cache目录</h4>\n<p>使用 Yarn，那么下载依赖包时，将使用 Yarn 的全局 prefix 和 cache目录，同时将 Yarn 的全局安装应用与 Node 进行关联</p>\n<ul>\n<li>改变 Yarn 全局安装位置</li>\n</ul>\n<div><pre><code><span>yarn</span> config <span>set</span> global-folder <span>\"你的磁盘路径\"</span>\n</code></pre>\n<div><span>1</span><br></div></div><p>假设你所指定的根目录为：<code>C:\\Program Files\\yarn</code></p>\n<div><pre><code><span>yarn</span> config <span>set</span> global-folder <span>\"C:\\Program Files\\yarn\\global\"</span>\n</code></pre>\n<div><span>1</span><br></div></div><ul>\n<li>改变 yarn 缓存位置</li>\n</ul>\n<div><pre><code><span>yarn</span> config <span>set</span> cache-folder <span>\"你的磁盘路径\"</span>\n</code></pre>\n<div><span>1</span><br></div></div><p>假设你所指定的根目录为：<code>C:\\Program Files\\yarn</code></p>\n<div><pre><code><span>yarn</span> config <span>set</span> cache-folder <span>\"C:\\Program Files\\yarn<span title=\"\\c\">\\c</span>ache\"</span>\n</code></pre>\n<div><span>1</span><br></div></div><blockquote>\n<p>或者在你系统盘的用户目录找到 <code>.yarnrc</code> 的文件，打开它，直接进行编辑</p>\n</blockquote>\n<h4 id=\"_2-配置-yarn-环境变量\"> （2）配置 Yarn 环境变量</h4>\n<p>在我们使用<strong>全局安装</strong>包的时候，会在 <code>C:\\Program Files\\yarn\\global</code>（上面的示例路径，要根据自己的实际情况配置） 目录下生成 node_modules.bin 目录</p>\n<p>需要将 <code>C:\\Program Files\\yarn\\global\\node_modules\\.bin</code> 整个目录 添加到<strong>系统环境变量</strong>中去，否则通过 yarn 添加的全局包 在cmd 中是找不到的。</p>\n<p>右键点击 Windows 左下角的 Windows 图标，选择 <code>系统—&gt;高级系统设置—&gt;环境变量</code>。</p>\n<p>在 <code>系统变量</code> 栏中，找到 <code>Path</code> 变量，点击<code>编辑</code>， 弹出 <code>编辑环境变量</code> 对话框</p>\n<p>在 <code>编辑环境变量</code> 对话框中，添加 ``C:\\Program Files\\yarn\\global\\node_modules.bin`</p>\n<p>点击 <code>编辑环境变量</code> 对话框中的【确定】按钮，保存配置。</p>\n<div><p>提示</p>\n<p>可以通过下面的命令，检查当前 yarn 的 bin 目录的位置</p>\n<div><pre><code><span>yarn</span> global bin\n</code></pre>\n<div><span>1</span><br></div></div></div>\n<h4 id=\"_3-yarn-配置阿里源量\"> （3）Yarn 配置阿里源量</h4>\n<ol>\n<li>查看一下当前源</li>\n</ol>\n<div><pre><code><span>yarn</span> config get registry\n</code></pre>\n<div><span>1</span><br></div></div><ol start=\"2\">\n<li>切换为淘宝源</li>\n</ol>\n<div><pre><code><span>yarn</span> config <span>set</span> registry https://registry.npm.taobao.org\n\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div>",
      "image": "https://herodotus.cn/images/environment/jdk-validation.png",
      "date_published": "2021-10-27T16:13:57.000Z",
      "date_modified": "2021-10-28T15:24:29.000Z",
      "authors": [
        {
          "name": "码匠君"
        }
      ],
      "tags": []
    },
    {
      "title": "了解基础知识",
      "url": "https://herodotus.cn/knowledge/",
      "id": "https://herodotus.cn/knowledge/",
      "content_html": "<h1 id=\"了解基础知识\"> 了解基础知识</h1>\n<div><p>说明</p>\n<p>一部分朋友使用 <strong>Eurynome Cloud</strong> 是本着学习的目的，以期掌握更多的IT技术技能。因此，开辟了本栏目。</p>\n<p>本栏目会逐步增加 <strong>Eurynome Cloud</strong> 所涉及各类技术的基础知识，希望可以帮助使用者更好的了解 <strong>Eurynome Cloud</strong> 所使用的技术，让使用者可以更快速的开展系统的使用和开发。</p>\n<p>很多技术内容单独拿出来都是一个很大的课题，而且市面上也会有较多的书籍供了解和学习。本栏目内容定位是收集整理一些相关技术的入门知识，起到抛砖引玉的作用。</p>\n</div>\n",
      "date_published": "2021-10-27T16:13:57.000Z",
      "date_modified": "2021-10-28T15:24:29.000Z",
      "authors": [
        {
          "name": "码匠君"
        }
      ],
      "tags": []
    },
    {
      "title": "Spring Data JPA",
      "url": "https://herodotus.cn/knowledge/spring-data-jpa/",
      "id": "https://herodotus.cn/knowledge/spring-data-jpa/",
      "content_html": "<h1 id=\"spring-data-jpa\"> Spring Data JPA</h1>\n<h2 id=\"jpa\"> JPA</h2>\n<p><code>JPA</code>(<code>Java Persistence API</code>)意即Java持久化API，是Sun官方在JDK5.0后提出的Java持久化规范（JSR 338，这些接口所在包为<code>javax.persistence</code>，详细内容可参考<a href=\"https://github.com/javaee/jpa-spec\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/javaee/jpa-spec</a>）</p>\n<p>JPA的出现主要是为了简化持久层开发以及整合<code>ORM</code>技术，结束 <code>Hibernate</code>,<code>TopLink</code>,<code>JDO</code>等<code>ORM</code>框架各自为营的局面。<code>JPA</code>是在吸收现有<code>ORM</code>框架的基础上发展而来，易于使用，伸缩性强。总的来说，JPA包括以下3方面的技术：</p>\n<ul>\n<li><strong>ORM映射元数据：</strong> 支持XML和注解两种元数据的形式，元数据描述对象和表之间的映射关系</li>\n<li><strong>API：</strong>  操作实体对象来执行CRUD操作</li>\n<li><strong>查询语言：</strong>  通过面向对象而非面向数据库的查询语言（JPQL）查询数据，避免程序的SQL语句紧密耦合</li>\n</ul>\n<p><img src=\"/images/jpa/architecture.png\" alt=\"JPA架构\" /></p>\n<h3 id=\"spring-data-jpa-2\"> Spring Data Jpa</h3>\n<p>Spring官方的解释<a href=\"https://spring.io/projects/spring-data-jpa#overview\" target=\"_blank\" rel=\"noopener noreferrer\">https://spring.io/projects/spring-data-jpa#overview</a></p>\n<p><img src=\"/images/jpa/spring-data-jpa.png\" alt=\"Spring Data Jpa官方解释\" /></p>\n<p><code>Spring Data JPA</code> 是 <code>Spring Data</code> 家族的一部分，可以轻松实现基于 <code>JPA</code> 的存储库。 此模块处理对基于 <code>JPA</code> 的数据访问层的增强支持。 它使构建使用数据访问技术的Spring驱动应用程序变得更加容易。</p>\n<p>在相当长的一段时间内，实现应用程序的数据访问层一直很麻烦。 必须编写太多样板代码来执行简单查询以及执行分页和审计。 <code>Spring Data JPA</code> 旨在通过减少实际需要的工作量来显著改善数据访问层的实现。 作为开发人员，您编写repository接口，包括自定义查找器方法，Spring将自动提供实现。</p>\n<p><img src=\"/images/jpa/spring-data.png\" alt=\"Spring Data生态\" /></p>\n<h3 id=\"jpa-hibernate-spring-data-jpa三者之间的关系\"> Jpa,Hibernate,Spring Data Jpa三者之间的关系</h3>\n<p>这个问题可参考<a href=\"https://stackoverflow.com/questions/16148188/spring-data-jpa-versus-jpa-whats-the-difference%E5%8F%8Ahttps://blog.csdn.net/u014421556/article/details/52635000\" target=\"_blank\" rel=\"noopener noreferrer\">https://stackoverflow.com/questions/16148188/spring-data-jpa-versus-jpa-whats-the-difference及https://blog.csdn.net/u014421556/article/details/52635000</a></p>\n<p>总的来说<code>JPA</code>是<code>ORM</code>规范，<code>Hibernate</code>,<code>TopLink</code> 等是 <code>JPA</code> 规范的具体实现，这样的好处是开发者可以面向 <code>JPA</code> 规范进行持久层的开发，而底层的实现则是可以切换的。<code>Spring Data Jpa</code> 则是在 <code>JPA</code> 之上添加另一层抽象（<code>Repository</code>层的实现），极大地简化持久层开发及 <code>ORM</code> 框架切换的成本。</p>\n<p><img src=\"/images/jpa/three-relationship.png\" alt=\"Jpa,Hibernate,Spring Data Jpa三者之间的关系\" /></p>\n<h3 id=\"spring-data-jpa的java配置方案\"> Spring Data Jpa的java配置方案</h3>\n<p>在 <code>Spring Boot</code> 没出来之前如果要采用 <code>Java Configuration</code> 来配置 <code>Spring Data Jpa</code> 你需要配置如下的Bean\n参考自Spring In Action及<a href=\"https://docs.spring.io/spring-data/jpa/docs/current/reference/html/#jpa.java-config\" target=\"_blank\" rel=\"noopener noreferrer\">Spring Data Jpa官方文档5.1.2. Annotation-based Configuration</a></p>\n<div><pre><code><span>import</span> <span>org<span>.</span>springframework<span>.</span>context<span>.</span>annotation<span>.</span></span><span>Bean</span><span>;</span>\n<span>import</span> <span>org<span>.</span>springframework<span>.</span>context<span>.</span>annotation<span>.</span></span><span>Configuration</span><span>;</span>\n<span>import</span> <span>org<span>.</span>springframework<span>.</span>data<span>.</span>jpa<span>.</span>repository<span>.</span>config<span>.</span></span><span>EnableJpaRepositories</span><span>;</span>\n<span>import</span> <span>org<span>.</span>springframework<span>.</span>orm<span>.</span>jpa<span>.</span></span><span>JpaTransactionManager</span><span>;</span>\n<span>import</span> <span>org<span>.</span>springframework<span>.</span>orm<span>.</span>jpa<span>.</span></span><span>JpaVendorAdapter</span><span>;</span>\n<span>import</span> <span>org<span>.</span>springframework<span>.</span>orm<span>.</span>jpa<span>.</span></span><span>LocalContainerEntityManagerFactoryBean</span><span>;</span>\n<span>import</span> <span>org<span>.</span>springframework<span>.</span>orm<span>.</span>jpa<span>.</span>vendor<span>.</span></span><span>Database</span><span>;</span>\n<span>import</span> <span>org<span>.</span>springframework<span>.</span>orm<span>.</span>jpa<span>.</span>vendor<span>.</span></span><span>HibernateJpaVendorAdapter</span><span>;</span>\n<span>import</span> <span>org<span>.</span>springframework<span>.</span>transaction<span>.</span></span><span>PlatformTransactionManager</span><span>;</span>\n<span>import</span> <span>org<span>.</span>springframework<span>.</span>transaction<span>.</span>annotation<span>.</span></span><span>EnableTransactionManagement</span><span>;</span>\n\n<span>import</span> <span>javax<span>.</span>persistence<span>.</span></span><span>EntityManagerFactory</span><span>;</span>\n<span>import</span> <span>javax<span>.</span>sql<span>.</span></span><span>DataSource</span><span>;</span>\n\n<span>/**\n * 注意：spring-data-jpa2.x版本需要spring版本为5.x\n * 否则会报Initialization of bean failed; nested exception is java.lang.AbstractMethodError错误\n * 参考：https://stackoverflow.com/questions/47558017/error-starting-a-spring-application-initialization-of-bean-failed-nested-excep\n * 搭配方案：spring4+spring-data-jpa1.x或spring5+spring-data-jpa2.x\n */</span>\n<span>@Configuration</span>\n<span>// 借助spring data实现自动化的jpa repository，只需编写接口无需编写实现类</span>\n<span>// 相当于xml配置的&lt;jpa:repositories base-package=\"com.example.repository\" /></span>\n<span>// repositoryImplementationPostfix默认就是Impl</span>\n<span>// entityManagerFactoryRef默认就是entityManagerFactory</span>\n<span>// transactionManagerRef默认就是transactionManager</span>\n<span>@EnableJpaRepositories</span><span>(</span>basePackages <span>=</span> <span>{</span><span>\"com.example.repository\"</span><span>}</span><span>,</span>\n        repositoryImplementationPostfix <span>=</span> <span>\"Impl\"</span><span>,</span>\n        entityManagerFactoryRef <span>=</span> <span>\"entityManagerFactory\"</span><span>,</span>\n        transactionManagerRef <span>=</span> <span>\"transactionManager\"</span><span>)</span>\n<span>@EnableTransactionManagement</span>    <span>// 启用事务管理器</span>\n<span>public</span> <span>class</span> <span>SpringDataJpaConfig</span> <span>{</span>\n\n    <span>// 配置jpa厂商适配器（参见spring实战p320）</span>\n    <span>@Bean</span>\n    <span>public</span> <span>JpaVendorAdapter</span> <span>jpaVendorAdapter</span><span>(</span><span>)</span> <span>{</span>\n        <span>HibernateJpaVendorAdapter</span> jpaVendorAdapter <span>=</span> <span>new</span> <span>HibernateJpaVendorAdapter</span><span>(</span><span>)</span><span>;</span>\n        <span>// 设置数据库类型（可使用org.springframework.orm.jpa.vendor包下的Database枚举类）</span>\n        jpaVendorAdapter<span>.</span><span>setDatabase</span><span>(</span><span>Database</span><span>.</span>MYSQL<span>)</span><span>;</span>\n        <span>// 设置打印sql语句</span>\n        jpaVendorAdapter<span>.</span><span>setShowSql</span><span>(</span><span>true</span><span>)</span><span>;</span>\n        <span>// 设置不生成ddl语句</span>\n        jpaVendorAdapter<span>.</span><span>setGenerateDdl</span><span>(</span><span>false</span><span>)</span><span>;</span>\n        <span>// 设置hibernate方言</span>\n        jpaVendorAdapter<span>.</span><span>setDatabasePlatform</span><span>(</span><span>\"org.hibernate.dialect.MySQL5Dialect\"</span><span>)</span><span>;</span>\n        <span>return</span> jpaVendorAdapter<span>;</span>\n    <span>}</span>\n\n    <span>// 配置实体管理器工厂</span>\n    <span>@Bean</span>\n    <span>public</span> <span>LocalContainerEntityManagerFactoryBean</span> <span>entityManagerFactory</span><span>(</span>\n            <span>DataSource</span> dataSource<span>,</span> <span>JpaVendorAdapter</span> jpaVendorAdapter<span>)</span> <span>{</span>\n        <span>LocalContainerEntityManagerFactoryBean</span> emfb <span>=</span> <span>new</span> <span>LocalContainerEntityManagerFactoryBean</span><span>(</span><span>)</span><span>;</span>\n        <span>// 注入数据源</span>\n        emfb<span>.</span><span>setDataSource</span><span>(</span>dataSource<span>)</span><span>;</span>\n        <span>// 注入jpa厂商适配器</span>\n        emfb<span>.</span><span>setJpaVendorAdapter</span><span>(</span>jpaVendorAdapter<span>)</span><span>;</span>\n        <span>// 设置扫描基本包</span>\n        emfb<span>.</span><span>setPackagesToScan</span><span>(</span><span>\"com.example.entity\"</span><span>)</span><span>;</span>\n        <span>return</span> emfb<span>;</span>\n    <span>}</span>\n\n    <span>// 配置jpa事务管理器</span>\n    <span>@Bean</span>\n    <span>public</span> <span>PlatformTransactionManager</span> <span>transactionManager</span><span>(</span><span>EntityManagerFactory</span> emf<span>)</span> <span>{</span>\n        <span>JpaTransactionManager</span> transactionManager <span>=</span> <span>new</span> <span>JpaTransactionManager</span><span>(</span><span>)</span><span>;</span>\n        <span>// 配置实体管理器工厂</span>\n        transactionManager<span>.</span><span>setEntityManagerFactory</span><span>(</span>emf<span>)</span><span>;</span>\n        <span>return</span> transactionManager<span>;</span>\n    <span>}</span>\n\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br><span>67</span><br><span>68</span><br><span>69</span><br><span>70</span><br><span>71</span><br><span>72</span><br></div></div><p>启用web支持还需要在 <code>Spring MVC</code> 配置类上添加 <code>@EnableSpringDataWebSupport</code> 注解</p>\n<div><pre><code><span>@Configuration</span>\n<span>@ComponentScan</span><span>(</span>basePackages <span>=</span> <span>{</span><span>\"cn.fulgens.controller\"</span><span>}</span><span>)</span>\n<span>@EnableWebMvc</span>   <span>// 启用spring mvc</span>\n<span>@EnableSpringDataWebSupport</span>     <span>// 启用springmvc对spring data的支持</span>\n<span>public</span> <span>class</span> <span>WebMvcConfig</span> <span>extends</span> <span>WebMvcConfigurerAdapter</span> <span>{</span>\n\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><h3 id=\"spring-boot整合spring-data-jpa\"> Spring Boot整合Spring Data Jpa</h3>\n<h4 id=\"导入依赖\"> 导入依赖</h4>\n<div><pre><code><span><span><span>&lt;</span>dependency</span><span>></span></span>\n    <span><span><span>&lt;</span>groupId</span><span>></span></span>org.springframework.boot<span><span><span>&lt;/</span>groupId</span><span>></span></span>\n    <span><span><span>&lt;</span>artifactId</span><span>></span></span>spring-boot-starter-web<span><span><span>&lt;/</span>artifactId</span><span>></span></span>\n<span><span><span>&lt;/</span>dependency</span><span>></span></span>\n<span><span><span>&lt;</span>dependency</span><span>></span></span>\n    <span><span><span>&lt;</span>groupId</span><span>></span></span>org.springframework.boot<span><span><span>&lt;/</span>groupId</span><span>></span></span>\n    <span><span><span>&lt;</span>artifactId</span><span>></span></span>spring-boot-starter-data-jpa<span><span><span>&lt;/</span>artifactId</span><span>></span></span>\n<span><span><span>&lt;/</span>dependency</span><span>></span></span>\n<span><span><span>&lt;</span>dependency</span><span>></span></span>\n    <span><span><span>&lt;</span>groupId</span><span>></span></span>mysql<span><span><span>&lt;/</span>groupId</span><span>></span></span>\n    <span><span><span>&lt;</span>artifactId</span><span>></span></span>mysql-connector-java<span><span><span>&lt;/</span>artifactId</span><span>></span></span>\n    <span><span><span>&lt;</span>scope</span><span>></span></span>runtime<span><span><span>&lt;/</span>scope</span><span>></span></span>\n<span><span><span>&lt;/</span>dependency</span><span>></span></span>\n<span><span><span>&lt;</span>dependency</span><span>></span></span>\n    <span><span><span>&lt;</span>groupId</span><span>></span></span>org.projectlombok<span><span><span>&lt;/</span>groupId</span><span>></span></span>\n    <span><span><span>&lt;</span>artifactId</span><span>></span></span>lombok<span><span><span>&lt;/</span>artifactId</span><span>></span></span>\n    <span><span><span>&lt;</span>optional</span><span>></span></span>true<span><span><span>&lt;/</span>optional</span><span>></span></span>\n<span><span><span>&lt;/</span>dependency</span><span>></span></span>\n<span><span><span>&lt;</span>dependency</span><span>></span></span>\n    <span><span><span>&lt;</span>groupId</span><span>></span></span>org.springframework.boot<span><span><span>&lt;/</span>groupId</span><span>></span></span>\n    <span><span><span>&lt;</span>artifactId</span><span>></span></span>spring-boot-devtools<span><span><span>&lt;/</span>artifactId</span><span>></span></span>\n    <span><span><span>&lt;</span>optional</span><span>></span></span>true<span><span><span>&lt;/</span>optional</span><span>></span></span>\n<span><span><span>&lt;/</span>dependency</span><span>></span></span>\n<span><span><span>&lt;</span>dependency</span><span>></span></span>\n    <span><span><span>&lt;</span>groupId</span><span>></span></span>org.springframework.boot<span><span><span>&lt;/</span>groupId</span><span>></span></span>\n    <span><span><span>&lt;</span>artifactId</span><span>></span></span>spring-boot-starter-test<span><span><span>&lt;/</span>artifactId</span><span>></span></span>\n    <span><span><span>&lt;</span>scope</span><span>></span></span>test<span><span><span>&lt;/</span>scope</span><span>></span></span>\n<span><span><span>&lt;/</span>dependency</span><span>></span></span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br></div></div><h4 id=\"相关配置\"> 相关配置</h4>\n<div><pre><code><span>server</span><span>:</span>\n  <span>port</span><span>:</span> <span>8080</span>\n  <span>servlet</span><span>:</span>\n    <span>context-path</span><span>:</span> /\n<span>spring</span><span>:</span>\n  <span>datasource</span><span>:</span>\n    <span>url</span><span>:</span> jdbc<span>:</span>mysql<span>:</span>//localhost<span>:</span>3306/test<span>?</span>useUnicode=true<span>&amp;characterEncoding=UTF-8&amp;zeroDateTimeBehavior=convertToNull&amp;allowMultiQueries=true&amp;useSSL=false</span>\n    <span>username</span><span>:</span> root\n    <span>password</span><span>:</span> mysql123\n  <span>jpa</span><span>:</span>\n    <span>database</span><span>:</span> MySQL\n    <span>database-platform</span><span>:</span> org.hibernate.dialect.MySQL5InnoDBDialect\n    <span>show-sql</span><span>:</span> <span>true</span>\n    <span>hibernate</span><span>:</span>\n      <span>ddl-auto</span><span>:</span> update\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div><div><p>ddl-auto</p>\n<ul>\n<li>create：每次运行程序时，都会重新创建表，故而数据会丢失</li>\n<li>create-drop：每次运行程序时会先创建表结构，然后待程序结束时清空表</li>\n<li>upadte：每次运行程序，没有表时会创建表，如果对象发生改变会更新表结构，原有数据不会清空，只会更新（推荐使用）</li>\n<li>validate：运行程序会校验数据与数据库的字段类型是否相同，字段不同会报错</li>\n<li>none: 禁用DDL处理</li>\n</ul>\n</div>\n<h2 id=\"spring-data-jpa的使用\"> Spring Data Jpa的使用</h2>\n<h3 id=\"spring-data-jpa-uml类图\"> Spring Data Jpa UML类图</h3>\n<p><img src=\"/images/jpa/spring-data-jpa-uml.png\" alt=\"Spring Data JPA UML\" /></p>\n<h3 id=\"简单的rest-crud示例\"> 简单的REST CRUD示例</h3>\n<p><strong>实体类</strong></p>\n<p><code>/src/main/java/com/example/springbootjpa/entity/User</code></p>\n<div><pre><code><span>package</span> <span>com<span>.</span>example<span>.</span>springbootjpa<span>.</span>entity</span><span>;</span>\n\n<span>import</span> <span>lombok<span>.</span></span><span>Data</span><span>;</span>\n<span>import</span> <span>org<span>.</span>hibernate<span>.</span>annotations<span>.</span></span><span>GenericGenerator</span><span>;</span>\n\n<span>import</span> <span>javax<span>.</span>persistence<span>.</span></span><span>*</span><span>;</span>\n\n<span>@Entity</span>\n<span>@Table</span><span>(</span>name <span>=</span> <span>\"tb_user\"</span><span>)</span>\n<span>@Data</span>\n<span>public</span> <span>class</span> <span>User</span> <span>{</span>\n\n    <span>@Id</span>\n    <span>@GenericGenerator</span><span>(</span>name <span>=</span> <span>\"idGenerator\"</span><span>,</span> strategy <span>=</span> <span>\"uuid\"</span><span>)</span>\n    <span>@GeneratedValue</span><span>(</span>generator <span>=</span> <span>\"idGenerator\"</span><span>)</span>\n    <span>private</span> <span>String</span> id<span>;</span>\n\n    <span>@Column</span><span>(</span>name <span>=</span> <span>\"username\"</span><span>,</span> unique <span>=</span> <span>true</span><span>,</span> nullable <span>=</span> <span>false</span><span>,</span> length <span>=</span> <span>64</span><span>)</span>\n    <span>private</span> <span>String</span> username<span>;</span>\n\n    <span>@Column</span><span>(</span>name <span>=</span> <span>\"password\"</span><span>,</span> nullable <span>=</span> <span>false</span><span>,</span> length <span>=</span> <span>64</span><span>)</span>\n    <span>private</span> <span>String</span> password<span>;</span>\n\n    <span>@Column</span><span>(</span>name <span>=</span> <span>\"email\"</span><span>,</span> length <span>=</span> <span>64</span><span>)</span>\n    <span>private</span> <span>String</span> email<span>;</span>\n\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br></div></div><div><p>主键采用UUID策略</p>\n<p><code>@GenericGenerator</code> 是 <code>Hibernate</code> 提供的主键生成策略注解，注意下面的 <code>@GeneratedValue</code>（JPA注解）使用<code>generator = &quot;idGenerator&quot;</code>引用了上面的<code>name = &quot;idGenerator&quot;</code>主键生成策略</p>\n</div>\n<p>一般简单的Demo示例中只会使用<code>@GeneratedValue(strategy = GenerationType.IDENTITY)</code>这种主键自增的策略，而实际数据库中表字段主键类型很少是<code>int</code>型的</p>\n<div><p>JPA自带的几种主键生成策略</p>\n<ul>\n<li>TABLE： 使用一个特定的数据库表格来保存主键</li>\n<li>SEQUENCE： 根据底层数据库的序列来生成主键，条件是数据库支持序列。这个值要与generator一起使用，generator 指定生成主键使用的生成器（可能是orcale中自己编写的序列）</li>\n<li>IDENTITY： 主键由数据库自动生成（主要是支持自动增长的数据库，如mysql）</li>\n<li>AUTO： 主键由程序控制，也是GenerationType的默认值</li>\n</ul>\n</div>\n<p><strong>Dao层</strong></p>\n<p><code>/src/main/java/com/example/springbootjpa/repository/UserRepository</code></p>\n<div><pre><code><span>package</span> <span>com<span>.</span>example<span>.</span>springbootjpa<span>.</span>repository</span><span>;</span>\n\n<span>import</span> <span>com<span>.</span>example<span>.</span>springbootjpa<span>.</span>entity<span>.</span></span><span>User</span><span>;</span>\n<span>import</span> <span>org<span>.</span>springframework<span>.</span>data<span>.</span>jpa<span>.</span>repository<span>.</span></span><span>JpaRepository</span><span>;</span>\n\n<span>public</span> <span>interface</span> <span>UserRepository</span> <span>extends</span> <span>JpaRepository</span><span><span>&lt;</span><span>User</span><span>,</span> <span>String</span><span>></span></span> <span>{</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p><strong>Controller层</strong></p>\n<blockquote>\n<p>这里简单起见省略Service层</p>\n</blockquote>\n<p><code>/src/main/java/com/example/springbootjpa/controller/UserController</code></p>\n<div><pre><code><span>package</span> <span>com<span>.</span>example<span>.</span>springbootjpa<span>.</span>controller</span><span>;</span>\n\n<span>import</span> <span>com<span>.</span>example<span>.</span>springbootjpa<span>.</span>entity<span>.</span></span><span>User</span><span>;</span>\n<span>import</span> <span>com<span>.</span>example<span>.</span>springbootjpa<span>.</span>repository<span>.</span></span><span>UserRepository</span><span>;</span>\n<span>import</span> <span>org<span>.</span>springframework<span>.</span>beans<span>.</span>factory<span>.</span>annotation<span>.</span></span><span>Autowired</span><span>;</span>\n<span>import</span> <span>org<span>.</span>springframework<span>.</span>data<span>.</span>domain<span>.</span></span><span>Page</span><span>;</span>\n<span>import</span> <span>org<span>.</span>springframework<span>.</span>data<span>.</span>domain<span>.</span></span><span>PageRequest</span><span>;</span>\n<span>import</span> <span>org<span>.</span>springframework<span>.</span>data<span>.</span>domain<span>.</span></span><span>Pageable</span><span>;</span>\n<span>import</span> <span>org<span>.</span>springframework<span>.</span>web<span>.</span>bind<span>.</span>annotation<span>.</span></span><span>*</span><span>;</span>\n\n<span>import</span> <span>java<span>.</span>util<span>.</span></span><span>HashMap</span><span>;</span>\n<span>import</span> <span>java<span>.</span>util<span>.</span></span><span>Optional</span><span>;</span>\n\n<span>@RestController</span>\n<span>@RequestMapping</span><span>(</span><span>\"/users\"</span><span>)</span>\n<span>public</span> <span>class</span> <span>UserController</span> <span>{</span>\n\n    <span>@Autowired</span>\n    <span>private</span> <span>UserRepository</span> userRepository<span>;</span>\n\n    <span>@PostMapping</span><span>(</span><span>)</span>\n    <span>public</span> <span>User</span> <span>saveUser</span><span>(</span><span>@RequestBody</span> <span>User</span> user<span>)</span> <span>{</span>\n        <span>return</span> userRepository<span>.</span><span>save</span><span>(</span>user<span>)</span><span>;</span>\n    <span>}</span>\n\n    <span>@DeleteMapping</span><span>(</span><span>\"/{id}\"</span><span>)</span>\n    <span>public</span> <span>void</span> <span>deleteUser</span><span>(</span><span>@PathVariable</span><span>(</span><span>\"id\"</span><span>)</span> <span>String</span> userId<span>)</span> <span>{</span>\n        userRepository<span>.</span><span>deleteById</span><span>(</span>userId<span>)</span><span>;</span>\n    <span>}</span>\n\n    <span>@PutMapping</span><span>(</span><span>\"/{id}\"</span><span>)</span>\n    <span>public</span> <span>User</span> <span>updateUser</span><span>(</span><span>@PathVariable</span><span>(</span><span>\"id\"</span><span>)</span> <span>String</span> userId<span>,</span> <span>@RequestBody</span> <span>User</span> user<span>)</span> <span>{</span>\n        user<span>.</span><span>setId</span><span>(</span>userId<span>)</span><span>;</span>\n        <span>return</span> userRepository<span>.</span><span>saveAndFlush</span><span>(</span>user<span>)</span><span>;</span>\n    <span>}</span>\n\n    <span>@GetMapping</span><span>(</span><span>\"/{id}\"</span><span>)</span>\n    <span>public</span> <span>User</span> <span>getUserInfo</span><span>(</span><span>@PathVariable</span><span>(</span><span>\"id\"</span><span>)</span> <span>String</span> userId<span>)</span> <span>{</span>\n        <span>Optional</span><span><span>&lt;</span><span>User</span><span>></span></span> optional <span>=</span> userRepository<span>.</span><span>findById</span><span>(</span>userId<span>)</span><span>;</span>\n        <span>return</span> optional<span>.</span><span>orElseGet</span><span>(</span><span>User</span><span>::</span><span>new</span><span>)</span><span>;</span>\n    <span>}</span>\n\n    <span>@GetMapping</span><span>(</span><span>\"/list\"</span><span>)</span>\n    <span>public</span> <span>Page</span><span><span>&lt;</span><span>User</span><span>></span></span> <span>pageQuery</span><span>(</span><span>@RequestParam</span><span>(</span>value <span>=</span> <span>\"pageNum\"</span><span>,</span> defaultValue <span>=</span> <span>\"1\"</span><span>)</span> <span>Integer</span> pageNum<span>,</span>\n                                <span>@RequestParam</span><span>(</span>value <span>=</span> <span>\"pageSize\"</span><span>,</span> defaultValue <span>=</span> <span>\"10\"</span><span>)</span> <span>Integer</span> pageSize<span>)</span> <span>{</span>\n        <span>return</span> userRepository<span>.</span><span>findAll</span><span>(</span><span>PageRequest</span><span>.</span><span>of</span><span>(</span>pageNum <span>-</span> <span>1</span><span>,</span> pageSize<span>)</span><span>)</span><span>;</span>\n    <span>}</span>\n\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br></div></div><h2 id=\"spring-data-jpa使用详解\"> Spring Data Jpa使用详解</h2>\n<h3 id=\"spring-data查询方法\"> Spring Data查询方法</h3>\n<p>使用Spring Data创建查询只需四步：</p>\n<ol>\n<li>声明一个接口继承自Repository或Repositoy的一个子接口，对于Spring Data Jpa通常是JpaRepository，如：</li>\n</ol>\n<div><pre><code><span>interface</span> <span>PersonRepository</span> <span>extends</span> <span>Repository</span><span><span>&lt;</span><span>Person</span><span>,</span> <span>Long</span><span>></span></span> <span>{</span> … <span>}</span>\n</code></pre>\n<div><span>1</span><br></div></div><ol start=\"2\">\n<li>在接口中声明查询方法，如：</li>\n</ol>\n<div><pre><code><span>interface</span> <span>PersonRepository</span> <span>extends</span> <span>Repository</span><span><span>&lt;</span><span>Person</span><span>,</span> <span>Long</span><span>></span></span> <span>{</span>\n  <span>List</span><span><span>&lt;</span><span>Person</span><span>></span></span> <span>findByLastname</span><span>(</span><span>String</span> lastname<span>)</span><span>;</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><ol start=\"3\">\n<li>使用 <a href=\"https://docs.spring.io/spring-data/jpa/docs/current/reference/html/#repositories.create-instances.java-config\" target=\"_blank\" rel=\"noopener noreferrer\">JavaConfig</a> 或 <a href=\"https://docs.spring.io/spring-data/jpa/docs/current/reference/html/#repositories.create-instances\" target=\"_blank\" rel=\"noopener noreferrer\">XML configuration</a>配置Spring，让 Spring 为声明的接口创建代理对象\n3.1 JavaConfig参见上文\n3.2 使用Xml配置，可以像下面这样使用jpa命名空间进行配置：</li>\n</ol>\n<div><pre><code><span>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span>\n<span><span><span>&lt;</span>beans</span> <span>xmlns</span><span><span>=</span><span>\"</span>http://www.springframework.org/schema/beans<span>\"</span></span>\n   <span><span>xmlns:</span>xsi</span><span><span>=</span><span>\"</span>http://www.w3.org/2001/XMLSchema-instance<span>\"</span></span>\n   <span><span>xmlns:</span>jpa</span><span><span>=</span><span>\"</span>http://www.springframework.org/schema/data/jpa<span>\"</span></span>\n   <span><span>xsi:</span>schemaLocation</span><span><span>=</span><span>\"</span>http://www.springframework.org/schema/beans\n     http://www.springframework.org/schema/beans/spring-beans.xsd\n     http://www.springframework.org/schema/data/jpa\n     http://www.springframework.org/schema/data/jpa/spring-jpa.xsd<span>\"</span></span><span>></span></span>\n\n   <span><span><span>&lt;</span><span>jpa:</span>repositories</span> <span>base-package</span><span><span>=</span><span>\"</span>com.acme.repositories<span>\"</span></span><span>/></span></span>\n\n<span><span><span>&lt;/</span>beans</span><span>></span></span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><blockquote>\n<p>对于不同的 <code>Spring Data</code> 子项目Spring提供了不同的xml命名空间，如对于 <code>Spring Data MongoDB</code> 可以将上面的jpa改为mongodb。当然，使用 <code>Spring Boot</code> 这一步基本可以省略，我们需要做的就是在<code>application.properties</code>或<code>application.yml</code>文件中配置几个属性即可</p>\n</blockquote>\n<ol start=\"4\">\n<li>注入Repository实例并使用，如：</li>\n</ol>\n<div><pre><code><span>class</span> <span>SomeClient</span> <span>{</span>\n\n  <span>private</span> <span>final</span> <span>PersonRepository</span> repository<span>;</span>\n\n  <span>SomeClient</span><span>(</span><span>PersonRepository</span> repository<span>)</span> <span>{</span>\n    <span>this</span><span>.</span>repository <span>=</span> repository<span>;</span>\n  <span>}</span>\n\n  <span>void</span> <span>doSomething</span><span>(</span><span>)</span> <span>{</span>\n    <span>List</span><span><span>&lt;</span><span>Person</span><span>></span></span> persons <span>=</span> repository<span>.</span><span>findByLastname</span><span>(</span><span>\"Matthews\"</span><span>)</span><span>;</span>\n  <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><h4 id=\"定义repository接口\"> 定义Repository接口</h4>\n<p><strong>选择性暴露CRUD方法</strong></p>\n<p>一种方法是定义一个<code>BaseRepository</code>接口继承<code>Repository</code>接口，并从<code>CrudRepository</code>中copy你想暴露的CRUD方法</p>\n<p><code>src/main/java/com/example/springbootjpa/repository/MyBaseRepository</code></p>\n<div><pre><code><span>package</span> <span>com<span>.</span>example<span>.</span>springbootjpa<span>.</span>repository</span><span>;</span>\n\n<span>import</span> <span>org<span>.</span>springframework<span>.</span>data<span>.</span>repository<span>.</span></span><span>NoRepositoryBean</span><span>;</span>\n<span>import</span> <span>org<span>.</span>springframework<span>.</span>data<span>.</span>repository<span>.</span></span><span>Repository</span><span>;</span>\n\n<span>import</span> <span>java<span>.</span>util<span>.</span></span><span>Optional</span><span>;</span>\n\n<span>/**\n * 自定义Repository，选择性暴露CRUD方法\n * @param &lt;T>\n * @param &lt;ID>\n */</span>\n<span>@NoRepositoryBean</span>\n<span>public</span> <span>interface</span> <span>MyBaseRepository</span><span><span>&lt;</span><span>T</span><span>,</span> ID<span>></span></span> <span>extends</span> <span>Repository</span><span><span>&lt;</span><span>T</span><span>,</span> ID<span>></span></span> <span>{</span>\n\n    <span>Optional</span><span><span>&lt;</span><span>T</span><span>></span></span> <span>findById</span><span>(</span><span>ID</span> id<span>)</span><span>;</span>\n\n    <span><span>&lt;</span><span>S</span> <span>extends</span> <span>T</span><span>></span></span> <span>S</span> <span>save</span><span>(</span><span>S</span> entity<span>)</span><span>;</span>\n\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br></div></div><blockquote>\n<p>注意：<code>MyBaseRepository</code>上面加了 <code>@NoRepositoryBean</code> 注解</p>\n</blockquote>\n<p><code>src/main/java/com/example/springbootjpa/repository/UserRepository2</code></p>\n<div><pre><code><span>package</span> <span>com<span>.</span>example<span>.</span>springbootjpa<span>.</span>repository</span><span>;</span>\n\n<span>import</span> <span>com<span>.</span>example<span>.</span>springbootjpa<span>.</span>entity<span>.</span></span><span>User</span><span>;</span>\n<span>import</span> <span>org<span>.</span>springframework<span>.</span>stereotype<span>.</span></span><span>Repository</span><span>;</span>\n\n<span>public</span> <span>interface</span> <span>UserRepository2</span> <span>extends</span> <span>MyBaseRepository</span><span><span>&lt;</span><span>User</span><span>,</span> <span>String</span><span>></span></span> <span>{</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><h4 id=\"repository方法的null值处理\"> Repository方法的Null值处理</h4>\n<p>从 <code>Spring Data2.0</code> 开始对于返回单个聚合实例的CRUD方法可以使用java8 Optional接口作为方法返回值来表明可能存在的缺省值，典型示例为 <code>CrudRepository</code> 的 <code>findById</code> 方法</p>\n<p>另外Spring也提供了几个注解来处理Null值</p>\n<ul>\n<li>@NonNullApi: 在包级别使用来声明参数和返回值不能为Null</li>\n<li>@NonNull: 在参数或返回值上使用，当它们不能为Null时（如果在包级别上使用了@NonNullApi注解则没有必要再使用@NonNull注解了）</li>\n<li>@Nullable: 在参数或返回值上使用，当它们可以为Null时</li>\n</ul>\n<h3 id=\"查询方法\"> 查询方法</h3>\n<h4 id=\"查询创建query-creation\"> 查询创建Query Creation</h4>\n<p><code>Spring Data Jpa</code> 通过解析方法名创建查询，框架在进行方法名解析时，会先把方法名多余的前缀<code>find…By</code>, <code>read…By</code>, <code>query…By</code>, <code>count…By</code>以及 <code>get…By</code> 截取掉，然后对剩下部分进行解析，第一个By会被用作分隔符来指示实际查询条件的开始。 我们可以在实体属性上定义条件，并将它们与And和Or连接起来，从而创建大量查询：</p>\n<div><pre><code><span>User</span> <span>findByUsername</span><span>(</span><span>String</span> username<span>)</span><span>;</span>\n\n<span>List</span><span><span>&lt;</span><span>User</span><span>></span></span> <span>findByUsernameIgnoreCase</span><span>(</span><span>String</span> username<span>)</span><span>;</span>\n\n<span>List</span><span><span>&lt;</span><span>User</span><span>></span></span> <span>findByUsernameLike</span><span>(</span><span>String</span> username<span>)</span><span>;</span>\n\n<span>User</span> <span>findByUsernameAndPassword</span><span>(</span><span>String</span> username<span>,</span> <span>String</span> password<span>)</span><span>;</span>\n\n<span>User</span> <span>findByEmail</span><span>(</span><span>String</span> email<span>)</span><span>;</span>\n\n<span>List</span><span><span>&lt;</span><span>User</span><span>></span></span> <span>findByEmailLike</span><span>(</span><span>String</span> email<span>)</span><span>;</span>\n\n<span>List</span><span><span>&lt;</span><span>User</span><span>></span></span> <span>findByIdIn</span><span>(</span><span>List</span><span><span>&lt;</span><span>String</span><span>></span></span> ids<span>)</span><span>;</span>\n\n<span>List</span><span><span>&lt;</span><span>User</span><span>></span></span> <span>findByIdInOrderByUsername</span><span>(</span><span>List</span><span><span>&lt;</span><span>String</span><span>></span></span> ids<span>)</span><span>;</span>\n\n<span>void</span> <span>deleteByIdIn</span><span>(</span><span>List</span><span><span>&lt;</span><span>String</span><span>></span></span> ids<span>)</span><span>;</span>\n\n<span>Long</span> <span>countByUsernameLike</span><span>(</span><span>String</span> username<span>)</span><span>;</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br></div></div><p>支持的关键字,示例及 <code>JPQL</code> 片段如下表所示：</p>\n<p>| Keyword | Sample | JPQL snippet |\n| ------- | ------ | ------------ ||\n| <code>Distinct</code>           | <code>findDistinctByLastnameAndFirstname</code>                      | <code>select distinct …​ where x.lastname = ?1 and x.firstname = ?2</code>  |\n| <code>And</code>              | <code>findByLastnameAndFirstname</code>                              | <code>… where x.lastname = ?1 and x.firstname = ?2</code>                   |\n| <code>Or</code>                 | <code>findByLastnameOrFirstname</code>                               | <code>… where x.lastname = ?1 or x.firstname = ?2</code>                    |\n| <code>Is, Equals</code>         | <code>findByFirstname</code>,<code>findByFirstnameIs</code>,<code>findByFirstnameEquals</code> | <code>… where x.firstname = ?</code>1                                       |\n| <code>Between</code>            | <code>findByStartDateBetween</code>                                  | <code>… where x.startDate between ?1 and ?2</code>                          |\n| <code>LessThan</code>           | <code>findByAgeLessThan</code>                                       | <code>… where x.age &lt; ?1</code>                                             |\n| <code>LessThanEqual</code>      | <code>findByAgeLessThanEqual</code>                                  | <code>… where x.age &lt;= ?1</code>                                            |\n| <code>GreaterThan</code>        | <code>findByAgeGreaterThan</code>                                    | <code>… where x.age &gt; ?1</code>                                             |\n| <code>GreaterThanEqual</code>   | <code>findByAgeGreaterThanEqual</code>                               | <code>… where x.age &gt;= ?1</code>                                           |\n| <code>After</code>              | <code>findByStartDateAfter</code>                                    | <code>… where x.startDate &gt; ?1</code>                                       |\n| <code>Before</code>             | <code>findByStartDateBefore</code>                                   | <code>… where x.startDate &lt; ?1</code>                                       |\n| <code>IsNull, Null</code>       | <code>findByAge(Is)Null</code>                                       | <code>… where x.age is null</code>                                          |\n| <code>IsNotNull, NotNull</code> | <code>findByAge(Is)NotNull</code>                                    | <code>… where x.age not null</code>                                         |\n| <code>Like</code>               | <code>findByFirstnameLike</code>                                     | <code>… where x.firstname like ?1</code>                                    |\n| <code>NotLike</code>            | <code>findByFirstnameNotLike</code>                                  | <code>… where x.firstname not like ?1</code>                                |\n| <code>StartingWith</code>       | <code>findByFirstnameStartingWith</code>                             |<code>… where x.firstname like ?1 (parameter bound with appended %)</code>  |\n| <code>EndingWith</code>         | <code>findByFirstnameEndingWith</code>                               | <code>… where x.firstname like ?1 (parameter bound with prepended %)</code> |\n| <code>Containing</code>         | <code>findByFirstnameContaining</code>                               | <code>… where x.firstname like ?1 (parameter bound wrapped in %)</code>     |\n| <code>OrderBy</code>           | <code>findByAgeOrderByLastnameDesc</code>                            | <code>… where x.age = ?1 order by x.lastname desc</code>                    |\n| <code>Not</code>                | <code>findByLastnameNot</code>                                       | <code>… where x.lastname &lt;&gt; ?1</code>                                       |\n| <code>In</code>                 | <code>findByAgeIn(Collection&lt;Age&gt; ages)</code>                       | <code>… where x.age in ?1</code>                                            |\n| <code>NotIn</code>              | <code>findByAgeNotIn(Collection&lt;Age&gt; ages)</code>                    | <code>… where x.age not in ?1</code>                                        |\n| <code>True</code>               | <code>findByActiveTrue()</code>                                     | <code>… where x.active = true</code>                                        |\n| <code>False</code>              | <code>findByActiveFalse()</code>                                     | <code>… where x.active = false</code>                                       |\n| <code>IgnoreCase</code>         | <code>findByFirstnameIgnoreCase</code>                               | <code>… where UPPER(x.firstname) = UPPER(?1)</code>                         |</p>\n<p>具体 <code>Spring Data Jpa</code> 对方法名的解析规则可参看<a href=\"https://docs.spring.io/spring-data/jpa/docs/2.5.4/reference/html/#reference\" target=\"_blank\" rel=\"noopener noreferrer\">官方文档</a></p>\n<h4 id=\"限制查询结果\"> 限制查询结果</h4>\n<p><code>Spring Data Jpa</code> 支持使用<code>first</code>,<code>top</code> 以及 <code>Distinct</code> 关键字来限制查询结果，如：</p>\n<div><pre><code><span>User</span> <span>findFirstByUsernameOrderByUsernameAsc</span><span>(</span><span>String</span> username<span>)</span><span>;</span>\n\n<span>List</span><span><span>&lt;</span><span>User</span><span>></span></span> <span>findTop10ByUsername</span><span>(</span><span>String</span> username<span>,</span> <span>Sort</span> sort<span>)</span><span>;</span>\n    \n<span>List</span><span><span>&lt;</span><span>User</span><span>></span></span> <span>findTop10ByUsername</span><span>(</span><span>String</span> username<span>,</span> <span>Pageable</span> pageable<span>)</span><span>;</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><h4 id=\"自定义查询using-query\"> 自定义查询Using @Query</h4>\n<p><code>@Query</code> 注解的使用非常简单，只需在声明的方法上面标注该注解，同时提供一个 <code>JPQL</code> 查询语句即可</p>\n<div><pre><code><span>@Query</span><span>(</span><span>\"select u from User u where u.email = ?1\"</span><span>)</span>\n<span>User</span> <span>getByEmail</span><span>(</span><span>String</span> eamil<span>)</span><span>;</span>\n\n<span>@Query</span><span>(</span><span>\"select u from User u where u.username = ?1 and u.password = ?2\"</span><span>)</span>\n<span>User</span> <span>getByUsernameAndPassword</span><span>(</span><span>String</span> username<span>,</span> <span>String</span> password<span>)</span><span>;</span>\n\n<span>@Query</span><span>(</span><span>\"select u from User u where u.username like %?1%\"</span><span>)</span>\n<span>List</span><span><span>&lt;</span><span>User</span><span>></span></span> <span>getByUsernameLike</span><span>(</span><span>String</span> username<span>)</span><span>;</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><h4 id=\"使用命名参数using-named-parameters\"> 使用命名参数Using Named Parameters</h4>\n<p>默认情况下，<code>Spring Data JPA</code> 使用基于位置的参数绑定，如前面所有示例中所述。 这使得查询方法在重构参数位置时容易出错。 要解决此问题，可以使用 <code>@Param</code> 注解为方法参数指定具体名称并在查询中绑定名称，如以下示例所示：</p>\n<div><pre><code><span>@Query</span><span>(</span><span>\"select u from User u where u.id = :id\"</span><span>)</span>\n<span>User</span> <span>getById</span><span>(</span><span>@Param</span><span>(</span><span>\"id\"</span><span>)</span> <span>String</span> userId<span>)</span><span>;</span>\n\n<span>@Query</span><span>(</span><span>\"select u from User u where u.username = :username or u.email = :email\"</span><span>)</span>\n<span>User</span> <span>getByUsernameOrEmail</span><span>(</span><span>@Param</span><span>(</span><span>\"username\"</span><span>)</span> <span>String</span> username<span>,</span> <span>@Param</span><span>(</span><span>\"email\"</span><span>)</span> <span>String</span> email<span>)</span><span>;</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><h4 id=\"using-spel-expressions\"> Using SpEL Expressions</h4>\n<p>从 <code>Spring Data JPA release 1.4</code> 开始，<code>Spring Data JPA</code> 支持名为 <code>entityName</code> 的变量。 它的用法是<code>select x from #{#entityName} x</code>。</p>\n<p><code>entityName</code>的解析方式如下：如果实体类在 <code>@Entity</code> 注解上设置了<code>name</code>属性，则使用它。否则，使用实体类的简单类名。为避免在 <code>@Query</code> 注解使用实际的实体类名，就可以使用<code>#{#entityName}</code>进行代替。如以上示例中，<code>@Query</code>注解的查询字符串里的User都可替换为<code>#{#entityName}</code></p>\n<div><pre><code><span>@Query</span><span>(</span><span>\"select u from #{#entityName} u where u.email = ?1\"</span><span>)</span>\n<span>User</span> <span>getByEmail</span><span>(</span><span>String</span> eamil<span>)</span><span>;</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><h4 id=\"原生查询native-queries\"> 原生查询Native Queries</h4>\n<p><code>@Query</code> 注解还支持通过将 <code>nativeQuery</code> 标志设置为<code>true</code>来执行原生查询，同样支持基于位置的参数绑定及命名参数，如：</p>\n<div><pre><code><span>@Query</span><span>(</span>value <span>=</span> <span>\"select * from tb_user u where u.email = ?1\"</span><span>,</span> nativeQuery <span>=</span> <span>true</span><span>)</span>\n<span>User</span> <span>queryByEmail</span><span>(</span><span>String</span> email<span>)</span><span>;</span>\n\n<span>@Query</span><span>(</span>value <span>=</span> <span>\"select * from tb_user u where u.email = :email\"</span><span>,</span> nativeQuery <span>=</span> <span>true</span><span>)</span>\n<span>User</span> <span>queryByEmail</span><span>(</span><span>@Param</span><span>(</span><span>\"email\"</span><span>)</span> <span>String</span> email<span>)</span><span>;</span>\n注意：<span>Spring</span> <span>Data</span> <span>Jpa</span>目前不支持对原生查询进行动态排序，但可以通过自己指定计数查询countQuery来使用原生查询进行分页<span>,</span>排序，如：\n\n<span>@Query</span><span>(</span>value <span>=</span> <span>\"select * from tb_user u where u.username like %?1%\"</span><span>,</span>\n            countQuery <span>=</span> <span>\"select count(1) from tb_user u where u.username = %?1%\"</span><span>,</span>\n            nativeQuery <span>=</span> <span>true</span><span>)</span>\n<span>Page</span><span><span>&lt;</span><span>User</span><span>></span></span> <span>queryByUsernameLike</span><span>(</span><span>String</span> username<span>,</span> <span>Pageable</span> pageable<span>)</span><span>;</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><h4 id=\"分页查询及排序\"> 分页查询及排序</h4>\n<p><code>Spring Data Jpa</code> 可以在方法参数中直接传入<code>Pageable</code> 或 <code>Sort</code> 来完成动态分页或排序，通常 <code>Pageable</code> 或 <code>Sort</code> 会是方法的最后一个参数，如：</p>\n<div><pre><code><span>@Query</span><span>(</span><span>\"select u from User u where u.username like %?1%\"</span><span>)</span>\n<span>Page</span><span><span>&lt;</span><span>User</span><span>></span></span> <span>findByUsernameLike</span><span>(</span><span>String</span> username<span>,</span> <span>Pageable</span> pageable<span>)</span><span>;</span>\n\n<span>@Query</span><span>(</span><span>\"select u from User u where u.username like %?1%\"</span><span>)</span>\n<span>List</span><span><span>&lt;</span><span>User</span><span>></span></span> <span>findByUsernameAndSort</span><span>(</span><span>String</span> username<span>,</span> <span>Sort</span> sort<span>)</span><span>;</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>那调用<code>repository</code>方法时传入什么参数呢？</p>\n<p>对于 <code>Pageable</code> 参数，在Spring Data 2.0之前我们可以new一个<code>org.springframework.data.domain.PageRequest</code>对象，现在这些构造方法已经废弃，取而代之Spring推荐我们使用 <code>PageRequest</code> 的 <code>of</code> 方法</p>\n<div><pre><code><span>new</span> <span>PageRequest</span><span>(</span><span>0</span><span>,</span> <span>5</span><span>)</span><span>;</span>\n<span>new</span> <span>PageRequest</span><span>(</span><span>0</span><span>,</span> <span>5</span><span>,</span> <span>Sort<span>.</span>Direction</span><span>.</span>ASC<span>,</span> <span>\"username\"</span><span>)</span><span>;</span>\n<span>new</span> <span>PageRequest</span><span>(</span><span>0</span><span>,</span> <span>5</span><span>,</span> <span>new</span> <span>Sort</span><span>(</span><span>Sort<span>.</span>Direction</span><span>.</span>ASC<span>,</span> <span>\"username\"</span><span>)</span><span>)</span><span>;</span>\n        \n<span>PageRequest</span><span>.</span><span>of</span><span>(</span><span>0</span><span>,</span> <span>5</span><span>)</span><span>;</span>\n<span>PageRequest</span><span>.</span><span>of</span><span>(</span><span>0</span><span>,</span> <span>5</span><span>,</span> <span>Sort<span>.</span>Direction</span><span>.</span>ASC<span>,</span> <span>\"username\"</span><span>)</span><span>;</span>\n<span>PageRequest</span><span>.</span><span>of</span><span>(</span><span>0</span><span>,</span> <span>5</span><span>,</span> <span>Sort</span><span>.</span><span>by</span><span>(</span><span>Sort<span>.</span>Direction</span><span>.</span>ASC<span>,</span> <span>\"username\"</span><span>)</span><span>)</span><span>;</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><blockquote>\n<p>注意：<code>Spring Data PageRequest</code>的<code>page</code>参数是从<code>0</code>开始的 zero-based page index</p>\n</blockquote>\n<p>对于<code>Sort</code>参数，同样可以new一个<code>org.springframework.data.domain.Sort</code>，但推荐使用<code>Sort.by</code>方法</p>\n<h4 id=\"自定义修改-删除-modifying-queries\"> 自定义修改,删除 Modifying Queries</h4>\n<p>单独使用 <code>@Query</code> 注解只是查询，如涉及到修改,删除则需要再加上 <code>@Modifying</code> 注解，如：</p>\n<div><pre><code><span>@Transactional</span><span>(</span><span>)</span>\n<span>@Modifying</span>\n<span>@Query</span><span>(</span><span>\"update User u set u.password = ?2 where u.username = ?1\"</span><span>)</span>\n<span>int</span> <span>updatePasswordByUsername</span><span>(</span><span>String</span> username<span>,</span> <span>String</span> password<span>)</span><span>;</span>\n\n<span>@Transactional</span><span>(</span><span>)</span>\n<span>@Modifying</span>\n<span>@Query</span><span>(</span><span>\"delete from User where username = ?1\"</span><span>)</span>\n<span>void</span> <span>deleteByUsername</span><span>(</span><span>String</span> username<span>)</span><span>;</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><blockquote>\n<p>注意：Modifying queries can only use void or int/Integer as return type!</p>\n</blockquote>\n<h3 id=\"多表查询\"> 多表查询</h3>\n<p>这里使用级联查询进行多表的关联查询</p>\n<h4 id=\"多对多\"> 多对多</h4>\n<p><code>/src/main/java/com/example/springbootjpa/entity/User</code></p>\n<div><pre><code><span>package</span> <span>com<span>.</span>example<span>.</span>springbootjpa<span>.</span>entity</span><span>;</span>\n\n<span>import</span> <span>lombok<span>.</span></span><span>Data</span><span>;</span>\n<span>import</span> <span>org<span>.</span>hibernate<span>.</span>annotations<span>.</span></span><span>GenericGenerator</span><span>;</span>\n\n<span>import</span> <span>javax<span>.</span>persistence<span>.</span></span><span>*</span><span>;</span>\n<span>import</span> <span>java<span>.</span>util<span>.</span></span><span>Date</span><span>;</span>\n<span>import</span> <span>java<span>.</span>util<span>.</span></span><span>Set</span><span>;</span>\n<span>import</span> <span>java<span>.</span>util<span>.</span></span>UUID<span>;</span>\n\n<span>@Entity</span>\n<span>@Table</span><span>(</span>name <span>=</span> <span>\"tb_user\"</span><span>)</span>\n<span>@Data</span>\n<span>public</span> <span>class</span> <span>User</span> <span>{</span>\n\n    <span>@Id</span>\n    <span>@GenericGenerator</span><span>(</span>name <span>=</span> <span>\"idGenerator\"</span><span>,</span> strategy <span>=</span> <span>\"uuid\"</span><span>)</span>\n    <span>@GeneratedValue</span><span>(</span>generator <span>=</span> <span>\"idGenerator\"</span><span>)</span>\n    <span>private</span> <span>String</span> id<span>;</span>\n\n    <span>@Column</span><span>(</span>name <span>=</span> <span>\"username\"</span><span>,</span> unique <span>=</span> <span>true</span><span>,</span> nullable <span>=</span> <span>false</span><span>,</span> length <span>=</span> <span>64</span><span>)</span>\n    <span>private</span> <span>String</span> username<span>;</span>\n\n    <span>@Column</span><span>(</span>name <span>=</span> <span>\"password\"</span><span>,</span> nullable <span>=</span> <span>false</span><span>,</span> length <span>=</span> <span>64</span><span>)</span>\n    <span>private</span> <span>String</span> password<span>;</span>\n\n    <span>@Column</span><span>(</span>name <span>=</span> <span>\"email\"</span><span>,</span> unique <span>=</span> <span>true</span><span>,</span> length <span>=</span> <span>64</span><span>)</span>\n    <span>private</span> <span>String</span> email<span>;</span>\n\n    <span>@ManyToMany</span><span>(</span>targetEntity <span>=</span> <span>Role</span><span>.</span><span>class</span><span>,</span> cascade <span>=</span> <span>{</span><span>CascadeType</span><span>.</span>PERSIST<span>,</span> <span>CascadeType</span><span>.</span>MERGE<span>}</span><span>,</span> fetch <span>=</span> <span>FetchType</span><span>.</span>LAZY<span>)</span>\n    <span>@JoinTable</span><span>(</span>name <span>=</span> <span>\"tb_user_role\"</span><span>,</span> joinColumns <span>=</span> <span>{</span><span>@JoinColumn</span><span>(</span>name <span>=</span> <span>\"user_id\"</span><span>,</span> referencedColumnName <span>=</span> <span>\"id\"</span><span>)</span><span>}</span><span>,</span>\n            inverseJoinColumns <span>=</span> <span>{</span><span>@JoinColumn</span><span>(</span>name <span>=</span> <span>\"role_id\"</span><span>,</span> referencedColumnName <span>=</span> <span>\"id\"</span><span>)</span><span>}</span><span>)</span>\n    <span>private</span> <span>Set</span><span><span>&lt;</span><span>Role</span><span>></span></span> roles<span>;</span>\n\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br></div></div><p><code>/src/main/java/com/example/springbootjpa/entity/Role</code></p>\n<div><pre><code><span>package</span> <span>com<span>.</span>example<span>.</span>springbootjpa<span>.</span>entity</span><span>;</span>\n\n<span>import</span> <span>lombok<span>.</span></span><span>Data</span><span>;</span>\n<span>import</span> <span>org<span>.</span>hibernate<span>.</span>annotations<span>.</span></span><span>GenericGenerator</span><span>;</span>\n\n<span>import</span> <span>javax<span>.</span>persistence<span>.</span></span><span>*</span><span>;</span>\n\n<span>@Entity</span>\n<span>@Table</span><span>(</span>name <span>=</span> <span>\"tb_role\"</span><span>)</span>\n<span>@Data</span>\n<span>public</span> <span>class</span> <span>Role</span> <span>{</span>\n\n    <span>@Id</span>\n    <span>@GenericGenerator</span><span>(</span>name <span>=</span> <span>\"idGenerator\"</span><span>,</span> strategy <span>=</span> <span>\"uuid\"</span><span>)</span>\n    <span>@GeneratedValue</span><span>(</span>generator <span>=</span> <span>\"idGenerator\"</span><span>)</span>\n    <span>private</span> <span>String</span> id<span>;</span>\n\n    <span>@Column</span><span>(</span>name <span>=</span> <span>\"role_name\"</span><span>,</span> unique <span>=</span> <span>true</span><span>,</span> nullable <span>=</span> <span>false</span><span>,</span> length <span>=</span> <span>64</span><span>)</span>\n    <span>private</span> <span>String</span> roleName<span>;</span>\n\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br></div></div><p>测试</p>\n<div><pre><code><span>@Test</span>\n<span>public</span> <span>void</span> <span>findByIdTest</span><span>(</span><span>)</span> <span>{</span>\n    <span>Optional</span><span><span>&lt;</span><span>User</span><span>></span></span> optional <span>=</span> userRepository<span>.</span><span>findById</span><span>(</span><span>\"40289f0c65674a930165674d54940000\"</span><span>)</span><span>;</span>\n    <span>Set</span><span><span>&lt;</span><span>Role</span><span>></span></span> roles <span>=</span> optional<span>.</span><span>get</span><span>(</span><span>)</span><span>.</span><span>getRoles</span><span>(</span><span>)</span><span>;</span>\n    <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span>optional<span>.</span><span>get</span><span>(</span><span>)</span><span>)</span><span>;</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p>不出意外会报 <code>Hibernate</code> 懒加载异常，无法初始化代理类，No Session：</p>\n<div><pre><code><span><span>org<span>.</span>hibernate<span>.</span></span>LazyInitializationException</span><span>:</span> failed <span>to</span> <span>lazily</span> initialize a collection of role<span>:</span> <span><span>com<span>.</span>example<span>.</span>springbootjpa<span>.</span>entity<span>.</span></span>User</span><span>.</span>roles<span>,</span> could not initialize proxy <span>-</span> no <span>Session</span>\n</code></pre>\n<div><span>1</span><br></div></div><p>原因：<code>Spring Boot</code> 整合 <code>JPA</code> 后 <code>Hibernate</code> 的 <code>Session</code> 就交付给Spring去管理。每次数据库操作后，会关闭<code>Session</code>，当我们想要用懒加载方式去获得数据的时候，原来的<code>Session</code>已经关闭，不能获取数据，所以会抛出这样的异常。</p>\n<p>解决方法：\n在<code>application.yml</code>中做如下配置：</p>\n<div><pre><code><span>spring</span><span>:</span>\n  <span>jpa</span><span>:</span>\n    <span>open-in-view</span><span>:</span> <span>true</span>\n    <span>properties</span><span>:</span>\n      <span>hibernate</span><span>:</span>\n        <span>enable_lazy_load_no_trans</span><span>:</span> <span>true</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><h4 id=\"一对多-多对一\"> 一对多（多对一）</h4>\n<p><code>/src/main/java/com/example/springbootjpa/entity/Department</code></p>\n<div><pre><code><span>package</span> <span>com<span>.</span>example<span>.</span>springbootjpa<span>.</span>entity</span><span>;</span>\n\n<span>import</span> <span>lombok<span>.</span></span><span>Data</span><span>;</span>\n<span>import</span> <span>org<span>.</span>hibernate<span>.</span>annotations<span>.</span></span><span>GenericGenerator</span><span>;</span>\n\n<span>import</span> <span>javax<span>.</span>persistence<span>.</span></span><span>*</span><span>;</span>\n<span>import</span> <span>java<span>.</span>util<span>.</span></span><span>Set</span><span>;</span>\n\n<span>@Entity</span>\n<span>@Table</span><span>(</span>name <span>=</span> <span>\"tb_dept\"</span><span>)</span>\n<span>@Data</span>\n<span>public</span> <span>class</span> <span>Department</span> <span>{</span>\n\n    <span>@Id</span>\n    <span>@GenericGenerator</span><span>(</span>name <span>=</span> <span>\"idGenerator\"</span><span>,</span> strategy <span>=</span> <span>\"uuid\"</span><span>)</span>\n    <span>@GeneratedValue</span><span>(</span>generator <span>=</span> <span>\"idGenerator\"</span><span>)</span>\n    <span>private</span> <span>String</span> id<span>;</span>\n\n    <span>@Column</span><span>(</span>name <span>=</span> <span>\"dept_name\"</span><span>,</span> unique <span>=</span> <span>true</span><span>,</span> nullable <span>=</span> <span>false</span><span>,</span> length <span>=</span> <span>64</span><span>)</span>\n    <span>private</span> <span>String</span> deptName<span>;</span>\n\n    <span>@OneToMany</span><span>(</span>mappedBy <span>=</span> <span>\"department\"</span><span>,</span> cascade <span>=</span> <span>CascadeType</span><span>.</span>ALL<span>,</span> fetch <span>=</span> <span>FetchType</span><span>.</span>LAZY<span>)</span>\n    <span>private</span> <span>Set</span><span><span>&lt;</span><span>Employee</span><span>></span></span> employees<span>;</span>\n\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br></div></div><p><code>/src/main/java/com/example/springbootjpa/entity/Employee</code></p>\n<div><pre><code><span>package</span> <span>com<span>.</span>example<span>.</span>springbootjpa<span>.</span>entity</span><span>;</span>\n\n<span>import</span> <span>lombok<span>.</span></span><span>Data</span><span>;</span>\n<span>import</span> <span>org<span>.</span>hibernate<span>.</span>annotations<span>.</span></span><span>GenericGenerator</span><span>;</span>\n\n<span>import</span> <span>javax<span>.</span>persistence<span>.</span></span><span>*</span><span>;</span>\n<span>import</span> <span>java<span>.</span>util<span>.</span></span>UUID<span>;</span>\n\n<span>@Entity</span>\n<span>@Table</span><span>(</span>name <span>=</span> <span>\"tb_emp\"</span><span>)</span>\n<span>@Data</span>\n<span>public</span> <span>class</span> <span>Employee</span> <span>{</span>\n\n    <span>@Id</span>\n    <span>@GenericGenerator</span><span>(</span>name <span>=</span> <span>\"idGenerator\"</span><span>,</span> strategy <span>=</span> <span>\"uuid\"</span><span>)</span>\n    <span>@GeneratedValue</span><span>(</span>generator <span>=</span> <span>\"idGenerator\"</span><span>)</span>\n    <span>private</span> <span>String</span> id<span>;</span>\n\n    <span>@Column</span><span>(</span>name <span>=</span> <span>\"emp_name\"</span><span>,</span> nullable <span>=</span> <span>false</span><span>,</span> length <span>=</span> <span>64</span><span>)</span>\n    <span>private</span> <span>String</span> empName<span>;</span>\n\n    <span>@Column</span><span>(</span>name <span>=</span> <span>\"emp_job\"</span><span>,</span> length <span>=</span> <span>64</span><span>)</span>\n    <span>private</span> <span>String</span> empJob<span>;</span>\n\n    <span>@Column</span><span>(</span>name <span>=</span> <span>\"dept_id\"</span><span>,</span> insertable <span>=</span> <span>false</span><span>,</span> updatable <span>=</span> <span>false</span><span>)</span>\n    <span>private</span> <span>String</span> deptId<span>;</span>\n\n    <span>@ManyToOne</span><span>(</span>targetEntity <span>=</span> <span>Department</span><span>.</span><span>class</span><span>,</span> cascade <span>=</span> <span>CascadeType</span><span>.</span>ALL<span>,</span> fetch <span>=</span> <span>FetchType</span><span>.</span>LAZY<span>)</span>\n    <span>@JoinColumn</span><span>(</span>name <span>=</span> <span>\"dept_id\"</span><span>)</span>\n    <span>private</span> <span>Department</span> department<span>;</span>\n\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br></div></div><p>测试</p>\n<div><pre><code><span>@Test</span>\n<span>public</span> <span>void</span> <span>findByIdTest</span><span>(</span><span>)</span> <span>{</span>\n    <span>Optional</span><span><span>&lt;</span><span>Employee</span><span>></span></span> optional <span>=</span> employeeRepository<span>.</span><span>findById</span><span>(</span><span>\"93fce66c1ef340fa866d5bd389de3d79\"</span><span>)</span><span>;</span>\n    <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span>optional<span>.</span><span>get</span><span>(</span><span>)</span><span>)</span><span>;</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>结果报错了...</p>\n<div><pre><code><span><span>java<span>.</span>lang<span>.</span></span>StackOverflowError</span>\n    at java<span>.</span>base<span>/</span><span><span>java<span>.</span>lang<span>.</span></span>Exception</span><span>.</span><span><span>&lt;</span>init<span>></span></span><span>(</span><span>Exception</span><span>.</span>java<span>:</span><span>102</span><span>)</span>\n    at java<span>.</span>base<span>/</span><span><span>java<span>.</span>lang<span>.</span></span>ReflectiveOperationException</span><span>.</span><span><span>&lt;</span>init<span>></span></span><span>(</span><span>ReflectiveOperationException</span><span>.</span>java<span>:</span><span>89</span><span>)</span>\n    at java<span>.</span>base<span>/</span><span><span>java<span>.</span>lang<span>.</span>reflect<span>.</span></span>InvocationTargetException</span><span>.</span><span><span>&lt;</span>init<span>></span></span><span>(</span><span>InvocationTargetException</span><span>.</span>java<span>:</span><span>73</span><span>)</span>\n    at <span><span>jdk<span>.</span>internal<span>.</span>reflect<span>.</span></span>GeneratedConstructorAccessor54</span><span>.</span><span>newInstance</span><span>(</span><span>Unknown</span> <span>Source</span><span>)</span>\n    at java<span>.</span>base<span>/</span><span><span>jdk<span>.</span>internal<span>.</span>reflect<span>.</span></span>DelegatingConstructorAccessorImpl</span><span>.</span><span>newInstance</span><span>(</span><span>DelegatingConstructorAccessorImpl</span><span>.</span>java<span>:</span><span>45</span><span>)</span>\n    at java<span>.</span>base<span>/</span><span><span>java<span>.</span>lang<span>.</span>reflect<span>.</span></span>Constructor</span><span>.</span><span>newInstance</span><span>(</span><span>Constructor</span><span>.</span>java<span>:</span><span>488</span><span>)</span>\n    at <span><span>com<span>.</span>mysql<span>.</span>jdbc<span>.</span></span>Util</span><span>.</span><span>handleNewInstance</span><span>(</span><span>Util</span><span>.</span>java<span>:</span><span>425</span><span>)</span>\n    at <span><span>com<span>.</span>mysql<span>.</span>jdbc<span>.</span></span>PreparedStatement</span><span>.</span><span>getInstance</span><span>(</span><span>PreparedStatement</span><span>.</span>java<span>:</span><span>761</span><span>)</span>\n    at <span><span>com<span>.</span>mysql<span>.</span>jdbc<span>.</span></span>ConnectionImpl</span><span>.</span><span>clientPrepareStatement</span><span>(</span><span>ConnectionImpl</span><span>.</span>java<span>:</span><span>1404</span><span>)</span>\n    at <span><span>com<span>.</span>mysql<span>.</span>jdbc<span>.</span></span>ConnectionImpl</span><span>.</span><span>prepareStatement</span><span>(</span><span>ConnectionImpl</span><span>.</span>java<span>:</span><span>4121</span><span>)</span>\n    at <span><span>com<span>.</span>mysql<span>.</span>jdbc<span>.</span></span>ConnectionImpl</span><span>.</span><span>prepareStatement</span><span>(</span><span>ConnectionImpl</span><span>.</span>java<span>:</span><span>4025</span><span>)</span>\n    at <span><span>com<span>.</span>zaxxer<span>.</span>hikari<span>.</span>pool<span>.</span></span>ProxyConnection</span><span>.</span><span>prepareStatement</span><span>(</span><span>ProxyConnection</span><span>.</span>java<span>:</span><span>318</span><span>)</span>\n    at <span><span>com<span>.</span>zaxxer<span>.</span>hikari<span>.</span>pool<span>.</span></span>HikariProxyConnection</span><span>.</span><span>prepareStatement</span><span>(</span><span>HikariProxyConnection</span><span>.</span>java<span>)</span>\n    at <span><span>org<span>.</span>hibernate<span>.</span>engine<span>.</span>jdbc<span>.</span>internal<span>.</span></span>StatementPreparerImpl</span>$<span>5.</span><span>doPrepare</span><span>(</span><span>StatementPreparerImpl</span><span>.</span>java<span>:</span><span>145</span><span>)</span>\n    at <span><span>org<span>.</span>hibernate<span>.</span>engine<span>.</span>jdbc<span>.</span>internal<span>.</span></span>StatementPreparerImpl</span>$<span>StatementPreparationTemplate</span><span>.</span><span>prepareStatement</span><span>(</span><span>StatementPreparerImpl</span><span>.</span>java<span>:</span><span>171</span><span>)</span>\n    at <span><span>org<span>.</span>hibernate<span>.</span>engine<span>.</span>jdbc<span>.</span>internal<span>.</span></span>StatementPreparerImpl</span><span>.</span><span>prepareQueryStatement</span><span>(</span><span>StatementPreparerImpl</span><span>.</span>java<span>:</span><span>147</span><span>)</span>\n    at <span><span>org<span>.</span>hibernate<span>.</span>loader<span>.</span>plan<span>.</span>exec<span>.</span>internal<span>.</span></span>AbstractLoadPlanBasedLoader</span><span>.</span><span>prepareQueryStatement</span><span>(</span><span>AbstractLoadPlanBasedLoader</span><span>.</span>java<span>:</span><span>226</span><span>)</span>\n    at <span><span>org<span>.</span>hibernate<span>.</span>loader<span>.</span>plan<span>.</span>exec<span>.</span>internal<span>.</span></span>AbstractLoadPlanBasedLoader</span><span>.</span><span>executeQueryStatement</span><span>(</span><span>AbstractLoadPlanBasedLoader</span><span>.</span>java<span>:</span><span>190</span><span>)</span>\n    at <span><span>org<span>.</span>hibernate<span>.</span>loader<span>.</span>plan<span>.</span>exec<span>.</span>internal<span>.</span></span>AbstractLoadPlanBasedLoader</span><span>.</span><span>executeLoad</span><span>(</span><span>AbstractLoadPlanBasedLoader</span><span>.</span>java<span>:</span><span>121</span><span>)</span>\n    at <span><span>org<span>.</span>hibernate<span>.</span>loader<span>.</span>plan<span>.</span>exec<span>.</span>internal<span>.</span></span>AbstractLoadPlanBasedLoader</span><span>.</span><span>executeLoad</span><span>(</span><span>AbstractLoadPlanBasedLoader</span><span>.</span>java<span>:</span><span>86</span><span>)</span>\n    at <span><span>org<span>.</span>hibernate<span>.</span>loader<span>.</span>collection<span>.</span>plan<span>.</span></span>AbstractLoadPlanBasedCollectionInitializer</span><span>.</span><span>initialize</span><span>(</span><span>AbstractLoadPlanBasedCollectionInitializer</span><span>.</span>java<span>:</span><span>87</span><span>)</span>\n    at <span><span>org<span>.</span>hibernate<span>.</span>persister<span>.</span>collection<span>.</span></span>AbstractCollectionPersister</span><span>.</span><span>initialize</span><span>(</span><span>AbstractCollectionPersister</span><span>.</span>java<span>:</span><span>688</span><span>)</span>\n    at <span><span>org<span>.</span>hibernate<span>.</span>event<span>.</span>internal<span>.</span></span>DefaultInitializeCollectionEventListener</span><span>.</span><span>onInitializeCollection</span><span>(</span><span>DefaultInitializeCollectionEventListener</span><span>.</span>java<span>:</span><span>75</span><span>)</span>\n    at <span><span>org<span>.</span>hibernate<span>.</span>internal<span>.</span></span>SessionImpl</span><span>.</span><span>initializeCollection</span><span>(</span><span>SessionImpl</span><span>.</span>java<span>:</span><span>2223</span><span>)</span>\n    at <span><span>org<span>.</span>hibernate<span>.</span>collection<span>.</span>internal<span>.</span></span>AbstractPersistentCollection</span>$<span>4.</span><span>doWork</span><span>(</span><span>AbstractPersistentCollection</span><span>.</span>java<span>:</span><span>565</span><span>)</span>\n    at <span><span>org<span>.</span>hibernate<span>.</span>collection<span>.</span>internal<span>.</span></span>AbstractPersistentCollection</span><span>.</span><span>withTemporarySessionIfNeeded</span><span>(</span><span>AbstractPersistentCollection</span><span>.</span>java<span>:</span><span>247</span><span>)</span>\n    at <span><span>org<span>.</span>hibernate<span>.</span>collection<span>.</span>internal<span>.</span></span>AbstractPersistentCollection</span><span>.</span><span>initialize</span><span>(</span><span>AbstractPersistentCollection</span><span>.</span>java<span>:</span><span>561</span><span>)</span>\n    at <span><span>org<span>.</span>hibernate<span>.</span>collection<span>.</span>internal<span>.</span></span>AbstractPersistentCollection</span><span>.</span><span>read</span><span>(</span><span>AbstractPersistentCollection</span><span>.</span>java<span>:</span><span>132</span><span>)</span>\n    at <span><span>org<span>.</span>hibernate<span>.</span>collection<span>.</span>internal<span>.</span></span>PersistentSet</span><span>.</span><span>hashCode</span><span>(</span><span>PersistentSet</span><span>.</span>java<span>:</span><span>430</span><span>)</span>\n    at <span><span>com<span>.</span>example<span>.</span>springbootjpa<span>.</span>entity<span>.</span></span>Department</span><span>.</span><span>hashCode</span><span>(</span><span>Department</span><span>.</span>java<span>:</span><span>14</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br></div></div><p>通过日志看sql的输出，发现了sql重复执行了好多次。以下我截取了前10条sql记录。</p>\n<div><pre><code><span>Hibernate</span><span>:</span> select employee0_<span>.</span>id as id1_1_0_<span>,</span> employee0_<span>.</span>dept_id as dept_id2_1_0_<span>,</span> employee0_<span>.</span>emp_job as emp_job3_1_0_<span>,</span> employee0_<span>.</span>emp_name as emp_name4_1_0_ from tb_emp employee0_ where employee0_<span>.</span>id<span>=</span><span>?</span>\n<span>Hibernate</span><span>:</span> select department0_<span>.</span>id as id1_0_0_<span>,</span> department0_<span>.</span>dept_name as dept_nam2_0_0_ from tb_dept department0_ where department0_<span>.</span>id<span>=</span><span>?</span>\n<span>Hibernate</span><span>:</span> select employees0_<span>.</span>dept_id as dept_id2_1_0_<span>,</span> employees0_<span>.</span>id as id1_1_0_<span>,</span> employees0_<span>.</span>id as id1_1_1_<span>,</span> employees0_<span>.</span>dept_id as dept_id2_1_1_<span>,</span> employees0_<span>.</span>emp_job as emp_job3_1_1_<span>,</span> employees0_<span>.</span>emp_name as emp_name4_1_1_ from tb_emp employees0_ where employees0_<span>.</span>dept_id<span>=</span><span>?</span>\n<span>Hibernate</span><span>:</span> select department0_<span>.</span>id as id1_0_0_<span>,</span> department0_<span>.</span>dept_name as dept_nam2_0_0_ from tb_dept department0_ where department0_<span>.</span>id<span>=</span><span>?</span>\n<span>Hibernate</span><span>:</span> select employees0_<span>.</span>dept_id as dept_id2_1_0_<span>,</span> employees0_<span>.</span>id as id1_1_0_<span>,</span> employees0_<span>.</span>id as id1_1_1_<span>,</span> employees0_<span>.</span>dept_id as dept_id2_1_1_<span>,</span> employees0_<span>.</span>emp_job as emp_job3_1_1_<span>,</span> employees0_<span>.</span>emp_name as emp_name4_1_1_ from tb_emp employees0_ where employees0_<span>.</span>dept_id<span>=</span><span>?</span>\n<span>Hibernate</span><span>:</span> select employees0_<span>.</span>dept_id as dept_id2_1_0_<span>,</span> employees0_<span>.</span>id as id1_1_0_<span>,</span> employees0_<span>.</span>id as id1_1_1_<span>,</span> employees0_<span>.</span>dept_id as dept_id2_1_1_<span>,</span> employees0_<span>.</span>emp_job as emp_job3_1_1_<span>,</span> employees0_<span>.</span>emp_name as emp_name4_1_1_ from tb_emp employees0_ where employees0_<span>.</span>dept_id<span>=</span><span>?</span>\n<span>Hibernate</span><span>:</span> select employees0_<span>.</span>dept_id as dept_id2_1_0_<span>,</span> employees0_<span>.</span>id as id1_1_0_<span>,</span> employees0_<span>.</span>id as id1_1_1_<span>,</span> employees0_<span>.</span>dept_id as dept_id2_1_1_<span>,</span> employees0_<span>.</span>emp_job as emp_job3_1_1_<span>,</span> employees0_<span>.</span>emp_name as emp_name4_1_1_ from tb_emp employees0_ where employees0_<span>.</span>dept_id<span>=</span><span>?</span>\n<span>Hibernate</span><span>:</span> select employees0_<span>.</span>dept_id as dept_id2_1_0_<span>,</span> employees0_<span>.</span>id as id1_1_0_<span>,</span> employees0_<span>.</span>id as id1_1_1_<span>,</span> employees0_<span>.</span>dept_id as dept_id2_1_1_<span>,</span> employees0_<span>.</span>emp_job as emp_job3_1_1_<span>,</span> employees0_<span>.</span>emp_name as emp_name4_1_1_ from tb_emp employees0_ where employees0_<span>.</span>dept_id<span>=</span><span>?</span>\n<span>Hibernate</span><span>:</span> select employees0_<span>.</span>dept_id as dept_id2_1_0_<span>,</span> employees0_<span>.</span>id as id1_1_0_<span>,</span> employees0_<span>.</span>id as id1_1_1_<span>,</span> employees0_<span>.</span>dept_id as dept_id2_1_1_<span>,</span> employees0_<span>.</span>emp_job as emp_job3_1_1_<span>,</span> employees0_<span>.</span>emp_name as emp_name4_1_1_ from tb_emp employees0_ where employees0_<span>.</span>dept_id<span>=</span><span>?</span>\n<span>Hibernate</span><span>:</span> select employees0_<span>.</span>dept_id as dept_id2_1_0_<span>,</span> employees0_<span>.</span>id as id1_1_0_<span>,</span> employees0_<span>.</span>id as id1_1_1_<span>,</span> employees0_<span>.</span>dept_id as dept_id2_1_1_<span>,</span> employees0_<span>.</span>emp_job as emp_job3_1_1_<span>,</span> employees0_<span>.</span>emp_name as emp_name4_1_1_ from tb_emp employees0_ where employees0_<span>.</span>dept_id<span>=</span><span>?</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><p>通过观察发现，第一条sql是执行查询Employee的sql，第二条sql是执行查询Department的sql，第三条sql是执行Department里面所有员工的sql，第四条sql是执行查询Department的sql，后面所有的sql都是执行查询Department里面所有员工的sql。</p>\n<p>很明显发生了循环依赖的情况。这是<code>Lombok</code>的<code>@Data</code>注解的锅。<code>Lombok</code>的<code>@Data</code>注解相当于<code>@Getter</code>,<code>@Setter</code>,<code>@RequiredArgsConstructor</code>,<code>@ToString</code>,<code>@EqualsAndHashCode</code>这几个注解。</p>\n<p>我们可以通过反编译看一下<code>Lombok</code>生成的<code>toString()</code>方法</p>\n<div><pre><code><span>// Employee</span>\n<span>public</span> <span>String</span> <span>toString</span><span>(</span><span>)</span> <span>{</span>\n  <span>return</span> <span>\"Employee(id=\"</span> <span>+</span> <span>getId</span><span>(</span><span>)</span> <span>+</span> <span>\", empName=\"</span> <span>+</span> <span>getEmpName</span><span>(</span><span>)</span> <span>+</span> <span>\", empJob=\"</span> <span>+</span> <span>getEmpJob</span><span>(</span><span>)</span> <span>+</span> <span>\", deptId=\"</span> <span>+</span> <span>getDeptId</span><span>(</span><span>)</span> <span>+</span> <span>\", department=\"</span> <span>+</span> <span>getDepartment</span><span>(</span><span>)</span> <span>+</span> <span>\")\"</span><span>;</span>\n<span>}</span>\n<span>// Department</span>\n<span>public</span> <span>String</span> <span>toString</span><span>(</span><span>)</span> <span>{</span>\n  <span>return</span> <span>\"Department(id=\"</span> <span>+</span> <span>getId</span><span>(</span><span>)</span> <span>+</span> <span>\", deptName=\"</span> <span>+</span> <span>getDeptName</span><span>(</span><span>)</span> <span>+</span> <span>\", employees=\"</span> <span>+</span> <span>getEmployees</span><span>(</span><span>)</span> <span>+</span> <span>\")\"</span><span>;</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><p>可以发现<code>Lombok</code>为我们生成的<code>toString()</code>方法覆盖了整个类的所有属性\n现在将 <code>@Data</code> 注解去掉，替换为 <code>@Setter</code>,<code>@Getter</code>,<code>@EqualsAndHashCode</code>，重写 <code>toString()</code> 方法</p>\n<div><pre><code><span>// Department</span>\n<span>@Override</span>\n<span>public</span> <span>String</span> <span>toString</span><span>(</span><span>)</span> <span>{</span>\n    <span>return</span> <span>\"Department{\"</span> <span>+</span>\n            <span>\"id='\"</span> <span>+</span> id <span>+</span> <span>'\\''</span> <span>+</span>\n            <span>\", deptName='\"</span> <span>+</span> deptName <span>+</span> <span>'\\''</span> <span>+</span>\n            <span>'}'</span><span>;</span>\n<span>}</span>\n<span>// Employee</span>\n<span>@Override</span>\n<span>public</span> <span>String</span> <span>toString</span><span>(</span><span>)</span> <span>{</span>\n    <span>return</span> <span>\"Employee{\"</span> <span>+</span>\n            <span>\"id='\"</span> <span>+</span> id <span>+</span> <span>'\\''</span> <span>+</span>\n            <span>\", empName='\"</span> <span>+</span> empName <span>+</span> <span>'\\''</span> <span>+</span>\n            <span>\", empJob='\"</span> <span>+</span> empJob <span>+</span> <span>'\\''</span> <span>+</span>\n            <span>\", deptId='\"</span> <span>+</span> deptId <span>+</span> <span>'\\''</span> <span>+</span>\n            <span>\", department=\"</span> <span>+</span> department <span>+</span>\n            <span>'}'</span><span>;</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br></div></div><p>再次运行测试用例，测试通过，以上Employee toString()方法打印的department会触发懒加载，最终日志输出的sql如下：</p>\n<div><pre><code><span>Hibernate</span><span>:</span> select employee0_<span>.</span>id as id1_1_0_<span>,</span> employee0_<span>.</span>dept_id as dept_id2_1_0_<span>,</span> employee0_<span>.</span>emp_job as emp_job3_1_0_<span>,</span> employee0_<span>.</span>emp_name as emp_name4_1_0_ from tb_emp employee0_ where employee0_<span>.</span>id<span>=</span><span>?</span>\n<span>Hibernate</span><span>:</span> select department0_<span>.</span>id as id1_0_0_<span>,</span> department0_<span>.</span>dept_name as dept_nam2_0_0_ from tb_dept department0_ where department0_<span>.</span>id<span>=</span><span>?</span>\n<span>Employee</span><span>{</span>id<span>=</span><span>'93fce66c1ef340fa866d5bd389de3d79'</span><span>,</span> empName<span>=</span><span>'jack'</span><span>,</span> empJob<span>=</span><span>'hr'</span><span>,</span> deptId<span>=</span><span>'0a4fe7234fff42afad34f6a06a8e1821'</span><span>,</span> department<span>=</span><span>Department</span><span>{</span>id<span>=</span><span>'0a4fe7234fff42afad34f6a06a8e1821'</span><span>,</span> deptName<span>=</span><span>'人事部'</span><span>}</span><span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>再来测试查询Department</p>\n<div><pre><code><span>@Test</span>\n<span>public</span> <span>void</span> <span>findByIdTest</span><span>(</span><span>)</span> <span>{</span>\n    <span>Optional</span><span><span>&lt;</span><span>Department</span><span>></span></span> optional <span>=</span> departmentRepository<span>.</span><span>findById</span><span>(</span><span>\"0a4fe7234fff42afad34f6a06a8e1821\"</span><span>)</span><span>;</span>\n    <span>Set</span><span><span>&lt;</span><span>Employee</span><span>></span></span> employees <span>=</span> optional<span>.</span><span>get</span><span>(</span><span>)</span><span>.</span><span>getEmployees</span><span>(</span><span>)</span><span>;</span>\n    <span>Assert</span><span>.</span><span>assertNotEquals</span><span>(</span><span>0</span><span>,</span> employees<span>.</span><span>size</span><span>(</span><span>)</span><span>)</span><span>;</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p>同样还是报了堆栈溢出，错误定位在Department和Employee的hashCode()方法上</p>\n<div><pre><code><span><span>java<span>.</span>lang<span>.</span></span>StackOverflowError</span>\n    at <span><span>com<span>.</span>mysql<span>.</span>jdbc<span>.</span></span>Util</span><span>.</span><span>handleNewInstance</span><span>(</span><span>Util</span><span>.</span>java<span>:</span><span>439</span><span>)</span>\n    at <span><span>com<span>.</span>mysql<span>.</span>jdbc<span>.</span></span>ResultSetImpl</span><span>.</span><span>getInstance</span><span>(</span><span>ResultSetImpl</span><span>.</span>java<span>:</span><span>342</span><span>)</span>\n    at <span><span>com<span>.</span>mysql<span>.</span>jdbc<span>.</span></span>MysqlIO</span><span>.</span><span>buildResultSetWithRows</span><span>(</span><span>MysqlIO</span><span>.</span>java<span>:</span><span>3132</span><span>)</span>\n    at <span><span>com<span>.</span>mysql<span>.</span>jdbc<span>.</span></span>MysqlIO</span><span>.</span><span>getResultSet</span><span>(</span><span>MysqlIO</span><span>.</span>java<span>:</span><span>477</span><span>)</span>\n    at <span><span>com<span>.</span>mysql<span>.</span>jdbc<span>.</span></span>MysqlIO</span><span>.</span><span>readResultsForQueryOrUpdate</span><span>(</span><span>MysqlIO</span><span>.</span>java<span>:</span><span>3115</span><span>)</span>\n    at <span><span>com<span>.</span>mysql<span>.</span>jdbc<span>.</span></span>MysqlIO</span><span>.</span><span>readAllResults</span><span>(</span><span>MysqlIO</span><span>.</span>java<span>:</span><span>2344</span><span>)</span>\n    at <span><span>com<span>.</span>mysql<span>.</span>jdbc<span>.</span></span>MysqlIO</span><span>.</span><span>sqlQueryDirect</span><span>(</span><span>MysqlIO</span><span>.</span>java<span>:</span><span>2739</span><span>)</span>\n    at <span><span>com<span>.</span>mysql<span>.</span>jdbc<span>.</span></span>ConnectionImpl</span><span>.</span><span>execSQL</span><span>(</span><span>ConnectionImpl</span><span>.</span>java<span>:</span><span>2486</span><span>)</span>\n    at <span><span>com<span>.</span>mysql<span>.</span>jdbc<span>.</span></span>PreparedStatement</span><span>.</span><span>executeInternal</span><span>(</span><span>PreparedStatement</span><span>.</span>java<span>:</span><span>1858</span><span>)</span>\n    at <span><span>com<span>.</span>mysql<span>.</span>jdbc<span>.</span></span>PreparedStatement</span><span>.</span><span>executeQuery</span><span>(</span><span>PreparedStatement</span><span>.</span>java<span>:</span><span>1966</span><span>)</span>\n    at <span><span>com<span>.</span>zaxxer<span>.</span>hikari<span>.</span>pool<span>.</span></span>ProxyPreparedStatement</span><span>.</span><span>executeQuery</span><span>(</span><span>ProxyPreparedStatement</span><span>.</span>java<span>:</span><span>52</span><span>)</span>\n    at <span><span>com<span>.</span>zaxxer<span>.</span>hikari<span>.</span>pool<span>.</span></span>HikariProxyPreparedStatement</span><span>.</span><span>executeQuery</span><span>(</span><span>HikariProxyPreparedStatement</span><span>.</span>java<span>)</span>\n    at <span><span>org<span>.</span>hibernate<span>.</span>engine<span>.</span>jdbc<span>.</span>internal<span>.</span></span>ResultSetReturnImpl</span><span>.</span><span>extract</span><span>(</span><span>ResultSetReturnImpl</span><span>.</span>java<span>:</span><span>60</span><span>)</span>\n    at <span><span>org<span>.</span>hibernate<span>.</span>loader<span>.</span>plan<span>.</span>exec<span>.</span>internal<span>.</span></span>AbstractLoadPlanBasedLoader</span><span>.</span><span>getResultSet</span><span>(</span><span>AbstractLoadPlanBasedLoader</span><span>.</span>java<span>:</span><span>419</span><span>)</span>\n    at <span><span>org<span>.</span>hibernate<span>.</span>loader<span>.</span>plan<span>.</span>exec<span>.</span>internal<span>.</span></span>AbstractLoadPlanBasedLoader</span><span>.</span><span>executeQueryStatement</span><span>(</span><span>AbstractLoadPlanBasedLoader</span><span>.</span>java<span>:</span><span>191</span><span>)</span>\n    at <span><span>org<span>.</span>hibernate<span>.</span>loader<span>.</span>plan<span>.</span>exec<span>.</span>internal<span>.</span></span>AbstractLoadPlanBasedLoader</span><span>.</span><span>executeLoad</span><span>(</span><span>AbstractLoadPlanBasedLoader</span><span>.</span>java<span>:</span><span>121</span><span>)</span>\n    at <span><span>org<span>.</span>hibernate<span>.</span>loader<span>.</span>plan<span>.</span>exec<span>.</span>internal<span>.</span></span>AbstractLoadPlanBasedLoader</span><span>.</span><span>executeLoad</span><span>(</span><span>AbstractLoadPlanBasedLoader</span><span>.</span>java<span>:</span><span>86</span><span>)</span>\n    at <span><span>org<span>.</span>hibernate<span>.</span>loader<span>.</span>collection<span>.</span>plan<span>.</span></span>AbstractLoadPlanBasedCollectionInitializer</span><span>.</span><span>initialize</span><span>(</span><span>AbstractLoadPlanBasedCollectionInitializer</span><span>.</span>java<span>:</span><span>87</span><span>)</span>\n    at <span><span>org<span>.</span>hibernate<span>.</span>persister<span>.</span>collection<span>.</span></span>AbstractCollectionPersister</span><span>.</span><span>initialize</span><span>(</span><span>AbstractCollectionPersister</span><span>.</span>java<span>:</span><span>688</span><span>)</span>\n    at <span><span>org<span>.</span>hibernate<span>.</span>event<span>.</span>internal<span>.</span></span>DefaultInitializeCollectionEventListener</span><span>.</span><span>onInitializeCollection</span><span>(</span><span>DefaultInitializeCollectionEventListener</span><span>.</span>java<span>:</span><span>75</span><span>)</span>\n    at <span><span>org<span>.</span>hibernate<span>.</span>internal<span>.</span></span>SessionImpl</span><span>.</span><span>initializeCollection</span><span>(</span><span>SessionImpl</span><span>.</span>java<span>:</span><span>2223</span><span>)</span>\n    at <span><span>org<span>.</span>hibernate<span>.</span>collection<span>.</span>internal<span>.</span></span>AbstractPersistentCollection</span>$<span>4.</span><span>doWork</span><span>(</span><span>AbstractPersistentCollection</span><span>.</span>java<span>:</span><span>565</span><span>)</span>\n    at <span><span>org<span>.</span>hibernate<span>.</span>collection<span>.</span>internal<span>.</span></span>AbstractPersistentCollection</span><span>.</span><span>withTemporarySessionIfNeeded</span><span>(</span><span>AbstractPersistentCollection</span><span>.</span>java<span>:</span><span>247</span><span>)</span>\n    at <span><span>org<span>.</span>hibernate<span>.</span>collection<span>.</span>internal<span>.</span></span>AbstractPersistentCollection</span><span>.</span><span>initialize</span><span>(</span><span>AbstractPersistentCollection</span><span>.</span>java<span>:</span><span>561</span><span>)</span>\n    at <span><span>org<span>.</span>hibernate<span>.</span>collection<span>.</span>internal<span>.</span></span>AbstractPersistentCollection</span><span>.</span><span>read</span><span>(</span><span>AbstractPersistentCollection</span><span>.</span>java<span>:</span><span>132</span><span>)</span>\n    at <span><span>org<span>.</span>hibernate<span>.</span>collection<span>.</span>internal<span>.</span></span>PersistentSet</span><span>.</span><span>hashCode</span><span>(</span><span>PersistentSet</span><span>.</span>java<span>:</span><span>430</span><span>)</span>\n    at <span><span>com<span>.</span>example<span>.</span>springbootjpa<span>.</span>entity<span>.</span></span>Department</span><span>.</span><span>hashCode</span><span>(</span><span>Department</span><span>.</span>java<span>:</span><span>17</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br></div></div><p>依旧是<code>Lombok</code>的锅，<code>@EqualsAndHashCode</code>为我们生成的<code>equals()</code>和<code>hashCode()</code>方法会使用所有属性，注意，<code>Department</code>中<code>employees</code>是<code>Se</code>t集合，当我们调用<code>department.getEmployees()</code>时，<code>Employee</code>的<code>hashCode()</code>方法会被调用，<code>Employee</code>中的<code>hashCode()</code>又依赖于<code>Department</code>的<code>HashCode()</code>方法，这样又形成了循环引用...</p>\n<div><pre><code><span>// Department</span>\n<span>public</span> <span>int</span> <span>hashCode</span><span>(</span><span>)</span> <span>{</span>\n    <span>int</span> i <span>=</span> <span>43</span><span>;</span>\n    <span>String</span> $id <span>=</span> <span>getId</span><span>(</span><span>)</span><span>;</span>\n    <span>int</span> result <span>=</span> <span>(</span>$id <span>==</span> <span>null</span> <span>?</span> <span>43</span> <span>:</span> $id<span>.</span><span>hashCode</span><span>(</span><span>)</span><span>)</span> <span>+</span> <span>59</span><span>;</span>\n    <span>String</span> $deptName <span>=</span> <span>getDeptName</span><span>(</span><span>)</span><span>;</span>\n    result <span>=</span> <span>(</span>result <span>*</span> <span>59</span><span>)</span> <span>+</span> <span>(</span>$deptName <span>==</span> <span>null</span> <span>?</span> <span>43</span> <span>:</span> $deptName<span>.</span><span>hashCode</span><span>(</span><span>)</span><span>)</span><span>;</span>\n    <span>Set</span> $employees <span>=</span> <span>getEmployees</span><span>(</span><span>)</span><span>;</span>\n    <span>int</span> i2 <span>=</span> result <span>*</span> <span>59</span><span>;</span>\n    <span>if</span> <span>(</span>$employees <span>!=</span> <span>null</span><span>)</span> <span>{</span>\n        i <span>=</span> $employees<span>.</span><span>hashCode</span><span>(</span><span>)</span><span>;</span>\n    <span>}</span>\n    <span>return</span> i2 <span>+</span> i<span>;</span>\n<span>}</span>\n<span>// Employee</span>\n<span>public</span> <span>int</span> <span>hashCode</span><span>(</span><span>)</span> <span>{</span>\n    <span>int</span> i <span>=</span> <span>43</span><span>;</span>\n    <span>String</span> $id <span>=</span> <span>getId</span><span>(</span><span>)</span><span>;</span>\n    <span>int</span> result <span>=</span> <span>(</span>$id <span>==</span> <span>null</span> <span>?</span> <span>43</span> <span>:</span> $id<span>.</span><span>hashCode</span><span>(</span><span>)</span><span>)</span> <span>+</span> <span>59</span><span>;</span>\n    <span>String</span> $empName <span>=</span> <span>getEmpName</span><span>(</span><span>)</span><span>;</span>\n    result <span>=</span> <span>(</span>result <span>*</span> <span>59</span><span>)</span> <span>+</span> <span>(</span>$empName <span>==</span> <span>null</span> <span>?</span> <span>43</span> <span>:</span> $empName<span>.</span><span>hashCode</span><span>(</span><span>)</span><span>)</span><span>;</span>\n    <span>String</span> $empJob <span>=</span> <span>getEmpJob</span><span>(</span><span>)</span><span>;</span>\n    result <span>=</span> <span>(</span>result <span>*</span> <span>59</span><span>)</span> <span>+</span> <span>(</span>$empJob <span>==</span> <span>null</span> <span>?</span> <span>43</span> <span>:</span> $empJob<span>.</span><span>hashCode</span><span>(</span><span>)</span><span>)</span><span>;</span>\n    <span>String</span> $deptId <span>=</span> <span>getDeptId</span><span>(</span><span>)</span><span>;</span>\n    result <span>=</span> <span>(</span>result <span>*</span> <span>59</span><span>)</span> <span>+</span> <span>(</span>$deptId <span>==</span> <span>null</span> <span>?</span> <span>43</span> <span>:</span> $deptId<span>.</span><span>hashCode</span><span>(</span><span>)</span><span>)</span><span>;</span>\n    <span>Department</span> $department <span>=</span> <span>getDepartment</span><span>(</span><span>)</span><span>;</span>\n    <span>int</span> i2 <span>=</span> result <span>*</span> <span>59</span><span>;</span>\n    <span>if</span> <span>(</span>$department <span>!=</span> <span>null</span><span>)</span> <span>{</span>\n        i <span>=</span> $department<span>.</span><span>hashCode</span><span>(</span><span>)</span><span>;</span>\n    <span>}</span>\n    <span>return</span> i2 <span>+</span> i<span>;</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br></div></div><p>自己动手重写 <code>equals()</code> 和 <code>hashCode()</code> 方法，去掉 <code>@EqualsAndHashCode</code> 注解</p>\n<div><pre><code><span>// Department</span>\n<span>@Override</span>\n<span>public</span> <span>boolean</span> <span>equals</span><span>(</span><span>Object</span> o<span>)</span> <span>{</span>\n    <span>if</span> <span>(</span><span>this</span> <span>==</span> o<span>)</span> <span>return</span> <span>true</span><span>;</span>\n    <span>if</span> <span>(</span>o <span>==</span> <span>null</span> <span>||</span> <span>getClass</span><span>(</span><span>)</span> <span>!=</span> o<span>.</span><span>getClass</span><span>(</span><span>)</span><span>)</span> <span>return</span> <span>false</span><span>;</span>\n    <span>Department</span> that <span>=</span> <span>(</span><span>Department</span><span>)</span> o<span>;</span>\n    <span>return</span> <span>Objects</span><span>.</span><span>equals</span><span>(</span>id<span>,</span> that<span>.</span>id<span>)</span> <span>&amp;&amp;</span>\n            <span>Objects</span><span>.</span><span>equals</span><span>(</span>deptName<span>,</span> that<span>.</span>deptName<span>)</span><span>;</span>\n<span>}</span>\n\n<span>@Override</span>\n<span>public</span> <span>int</span> <span>hashCode</span><span>(</span><span>)</span> <span>{</span>\n    <span>return</span> <span>Objects</span><span>.</span><span>hash</span><span>(</span>id<span>,</span> deptName<span>)</span><span>;</span>\n<span>}</span>\n<span>// Employee</span>\n<span>@Override</span>\n<span>public</span> <span>boolean</span> <span>equals</span><span>(</span><span>Object</span> o<span>)</span> <span>{</span>\n    <span>if</span> <span>(</span><span>this</span> <span>==</span> o<span>)</span> <span>return</span> <span>true</span><span>;</span>\n    <span>if</span> <span>(</span>o <span>==</span> <span>null</span> <span>||</span> <span>getClass</span><span>(</span><span>)</span> <span>!=</span> o<span>.</span><span>getClass</span><span>(</span><span>)</span><span>)</span> <span>return</span> <span>false</span><span>;</span>\n    <span>Employee</span> employee <span>=</span> <span>(</span><span>Employee</span><span>)</span> o<span>;</span>\n    <span>return</span> <span>Objects</span><span>.</span><span>equals</span><span>(</span>id<span>,</span> employee<span>.</span>id<span>)</span> <span>&amp;&amp;</span>\n            <span>Objects</span><span>.</span><span>equals</span><span>(</span>empName<span>,</span> employee<span>.</span>empName<span>)</span> <span>&amp;&amp;</span>\n            <span>Objects</span><span>.</span><span>equals</span><span>(</span>empJob<span>,</span> employee<span>.</span>empJob<span>)</span> <span>&amp;&amp;</span>\n            <span>Objects</span><span>.</span><span>equals</span><span>(</span>deptId<span>,</span> employee<span>.</span>deptId<span>)</span><span>;</span>\n<span>}</span>\n\n<span>@Override</span>\n<span>public</span> <span>int</span> <span>hashCode</span><span>(</span><span>)</span> <span>{</span>\n    <span>return</span> <span>Objects</span><span>.</span><span>hash</span><span>(</span>id<span>,</span> empName<span>,</span> empJob<span>,</span> deptId<span>)</span><span>;</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br></div></div><p>再次运行测试用例，测试通过</p>\n<blockquote>\n<p>总结：慎用 <code>@Data</code> 注解，使用 <code>@Getter</code>,<code>@Setter</code>注解，需要时自己重写 <code>toString()</code>,<code>equals()</code>以及 <code>hashCode()</code>方法</p>\n</blockquote>\n<h2 id=\"审计auditing\"> 审计Auditing</h2>\n<p>参考自<a href=\"https://docs.spring.io/spring-data/jpa/docs/current/reference/html/#auditing\" target=\"_blank\" rel=\"noopener noreferrer\">官方文档5.9Auditing</a></p>\n<p>一般数据库表在设计时都会添加4个审计字段，<code>Spring Data Jpa</code> 同样支持审计功能。<code>Spring Data</code> 提供了<code>@CreatedBy</code>，<code>@LastModifiedBy</code>，<code>@CreatedDate</code>，<code>@LastModifiedDate</code> 4个注解来记录表中记录的创建及修改信息。</p>\n<p><strong>实体类</strong></p>\n<div><pre><code><span>package</span> <span>com<span>.</span>example<span>.</span>springbootjpa<span>.</span>entity</span><span>;</span>\n\n<span>import</span> <span>lombok<span>.</span></span><span>Data</span><span>;</span>\n<span>import</span> <span>org<span>.</span>hibernate<span>.</span>annotations<span>.</span></span><span>GenericGenerator</span><span>;</span>\n<span>import</span> <span>org<span>.</span>springframework<span>.</span>data<span>.</span>annotation<span>.</span></span><span>CreatedBy</span><span>;</span>\n<span>import</span> <span>org<span>.</span>springframework<span>.</span>data<span>.</span>annotation<span>.</span></span><span>CreatedDate</span><span>;</span>\n<span>import</span> <span>org<span>.</span>springframework<span>.</span>data<span>.</span>annotation<span>.</span></span><span>LastModifiedBy</span><span>;</span>\n<span>import</span> <span>org<span>.</span>springframework<span>.</span>data<span>.</span>annotation<span>.</span></span><span>LastModifiedDate</span><span>;</span>\n<span>import</span> <span>org<span>.</span>springframework<span>.</span>data<span>.</span>jpa<span>.</span>domain<span>.</span>support<span>.</span></span><span>AuditingEntityListener</span><span>;</span>\n\n<span>import</span> <span>javax<span>.</span>persistence<span>.</span></span><span>*</span><span>;</span>\n<span>import</span> <span>java<span>.</span>util<span>.</span></span><span>Date</span><span>;</span>\n<span>import</span> <span>java<span>.</span>util<span>.</span></span><span>Set</span><span>;</span>\n\n<span>@Entity</span>\n<span>@EntityListeners</span><span>(</span><span>AuditingEntityListener</span><span>.</span><span>class</span><span>)</span>\n<span>@Table</span><span>(</span>name <span>=</span> <span>\"tb_user\"</span><span>)</span>\n<span>@Data</span>\n<span>public</span> <span>class</span> <span>User</span> <span>{</span>\n\n    <span>@Id</span>\n    <span>@GenericGenerator</span><span>(</span>name <span>=</span> <span>\"idGenerator\"</span><span>,</span> strategy <span>=</span> <span>\"uuid\"</span><span>)</span>\n    <span>@GeneratedValue</span><span>(</span>generator <span>=</span> <span>\"idGenerator\"</span><span>)</span>\n    <span>private</span> <span>String</span> id<span>;</span>\n\n    <span>@Column</span><span>(</span>name <span>=</span> <span>\"username\"</span><span>,</span> unique <span>=</span> <span>true</span><span>,</span> nullable <span>=</span> <span>false</span><span>,</span> length <span>=</span> <span>64</span><span>)</span>\n    <span>private</span> <span>String</span> username<span>;</span>\n\n    <span>@Column</span><span>(</span>name <span>=</span> <span>\"password\"</span><span>,</span> nullable <span>=</span> <span>false</span><span>,</span> length <span>=</span> <span>64</span><span>)</span>\n    <span>private</span> <span>String</span> password<span>;</span>\n\n    <span>@Column</span><span>(</span>name <span>=</span> <span>\"email\"</span><span>,</span> unique <span>=</span> <span>true</span><span>,</span> length <span>=</span> <span>64</span><span>)</span>\n    <span>private</span> <span>String</span> email<span>;</span>\n\n    <span>@ManyToMany</span><span>(</span>targetEntity <span>=</span> <span>Role</span><span>.</span><span>class</span><span>,</span> cascade <span>=</span> <span>CascadeType</span><span>.</span>ALL<span>,</span> fetch <span>=</span> <span>FetchType</span><span>.</span>LAZY<span>)</span>\n    <span>@JoinTable</span><span>(</span>name <span>=</span> <span>\"tb_user_role\"</span><span>,</span> joinColumns <span>=</span> <span>{</span><span>@JoinColumn</span><span>(</span>name <span>=</span> <span>\"user_id\"</span><span>,</span> referencedColumnName <span>=</span> <span>\"id\"</span><span>)</span><span>}</span><span>,</span>\n            inverseJoinColumns <span>=</span> <span>{</span><span>@JoinColumn</span><span>(</span>name <span>=</span> <span>\"role_id\"</span><span>,</span> referencedColumnName <span>=</span> <span>\"id\"</span><span>)</span><span>}</span><span>)</span>\n    <span>private</span> <span>Set</span><span><span>&lt;</span><span>Role</span><span>></span></span> roles<span>;</span>\n\n    <span>@CreatedDate</span>\n    <span>@Column</span><span>(</span>name <span>=</span> <span>\"created_date\"</span><span>,</span> updatable <span>=</span> <span>false</span><span>)</span>\n    <span>private</span> <span>Date</span> createdDate<span>;</span>\n\n    <span>@CreatedBy</span>\n    <span>@Column</span><span>(</span>name <span>=</span> <span>\"created_by\"</span><span>,</span> updatable <span>=</span> <span>false</span><span>,</span> length <span>=</span> <span>64</span><span>)</span>\n    <span>private</span> <span>String</span> createdBy<span>;</span>\n\n    <span>@LastModifiedDate</span>\n    <span>@Column</span><span>(</span>name <span>=</span> <span>\"updated_date\"</span><span>)</span>\n    <span>private</span> <span>Date</span> updatedDate<span>;</span>\n\n    <span>@LastModifiedBy</span>\n    <span>@Column</span><span>(</span>name <span>=</span> <span>\"updated_by\"</span><span>,</span> length <span>=</span> <span>64</span><span>)</span>\n    <span>private</span> <span>String</span> updatedBy<span>;</span>\n\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br></div></div><p>实体类上还添加了 <code>@EntityListeners(AuditingEntityListener.class)</code>，而 <code>AuditingEntityListener</code> 是由 <code>Spring Data Jpa</code> 提供的</p>\n<h3 id=\"实现auditoraware接口\"> 实现AuditorAware接口</h3>\n<p>光添加了4个审计注解还不够，得告诉程序到底是谁在创建和修改表记录</p>\n<p><code>/src/main/java/com/example/springbootjpa/auditing/AuditorAwareImpl</code></p>\n<div><pre><code><span>package</span> <span>com<span>.</span>example<span>.</span>springbootjpa<span>.</span>auditing</span><span>;</span>\n\n<span>import</span> <span>org<span>.</span>springframework<span>.</span>data<span>.</span>domain<span>.</span></span><span>AuditorAware</span><span>;</span>\n<span>import</span> <span>org<span>.</span>springframework<span>.</span>stereotype<span>.</span></span><span>Component</span><span>;</span>\n\n<span>import</span> <span>java<span>.</span>util<span>.</span></span><span>Optional</span><span>;</span>\n\n<span>@Component</span>\n<span>public</span> <span>class</span> <span>AuditorAwareImpl</span> <span>implements</span> <span>AuditorAware</span><span><span>&lt;</span><span>String</span><span>></span></span> <span>{</span>\n\n    <span>@Override</span>\n    <span>public</span> <span>Optional</span><span><span>&lt;</span><span>String</span><span>></span></span> <span>getCurrentAuditor</span><span>(</span><span>)</span> <span>{</span>\n        <span>return</span> <span>Optional</span><span>.</span><span>of</span><span>(</span><span>\"admin\"</span><span>)</span><span>;</span>\n    <span>}</span>\n\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br></div></div><p>这里简单的返回了一个&quot;admin&quot;字符串来代表当前用户名</p>\n<h3 id=\"启用jpa审计功能\"> 启用Jpa审计功能</h3>\n<p>在<code>Spring Boot</code>启动类上添加 <code>@EnableJpaAuditing</code> 注解用于启用Jpa的审计功能</p>\n<div><pre><code><span>package</span> <span>com<span>.</span>example<span>.</span>springbootjpa</span><span>;</span>\n\n<span>import</span> <span>org<span>.</span>springframework<span>.</span>boot<span>.</span></span><span>SpringApplication</span><span>;</span>\n<span>import</span> <span>org<span>.</span>springframework<span>.</span>boot<span>.</span>autoconfigure<span>.</span></span><span>SpringBootApplication</span><span>;</span>\n<span>import</span> <span>org<span>.</span>springframework<span>.</span>data<span>.</span>jpa<span>.</span>repository<span>.</span>config<span>.</span></span><span>EnableJpaAuditing</span><span>;</span>\n\n<span>@SpringBootApplication</span>\n<span>@EnableJpaAuditing</span>\n<span>public</span> <span>class</span> <span>SpringBootJpaApplication</span> <span>{</span>\n\n    <span>public</span> <span>static</span> <span>void</span> <span>main</span><span>(</span><span>String</span><span>[</span><span>]</span> args<span>)</span> <span>{</span>\n        <span>SpringApplication</span><span>.</span><span>run</span><span>(</span><span>SpringBootJpaApplication</span><span>.</span><span>class</span><span>,</span> args<span>)</span><span>;</span>\n    <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><p>更多关于<a href=\"https://docs.spring.io/spring-data/jpa/docs/current/reference/html/#specifications\" target=\"_blank\" rel=\"noopener noreferrer\">Jpa Specifications</a>,<a href=\"https://docs.spring.io/spring-data/jpa/docs/current/reference/html/#query-by-example\" target=\"_blank\" rel=\"noopener noreferrer\">Example</a>查询请查阅官方文档</p>\n",
      "image": "https://herodotus.cn/images/jpa/architecture.png",
      "date_published": "2021-10-27T16:13:57.000Z",
      "date_modified": "2021-10-28T15:24:29.000Z",
      "authors": [
        {
          "name": "码匠君"
        }
      ],
      "tags": []
    },
    {
      "title": "容器化部署",
      "url": "https://herodotus.cn/microservices/container-deployment/",
      "id": "https://herodotus.cn/microservices/container-deployment/",
      "content_html": "<h1 id=\"容器化部署\"> 容器化部署</h1>\n<h2 id=\"本地容器部署\"> 本地容器部署</h2>\n<p>本地采用容器方式进行项目的部署，因为每个人使用的电脑,操作系统都各不相同，加之不同人的喜好和偏好也不尽相同，无法做到全覆盖。</p>\n<div><p>提示</p>\n<p>这里仅以容器方式安装<code>Nacos</code>,<code>ELK</code>,<code>Kafka</code>,<code>Zookeeper</code>,<code>Sentinel</code>，本地安装<code>PostgreSQL</code>,<code>MySQL</code>和<code>Redis</code>的方式，进行示意性说明。仅供参考，具体安装请结合自身及时情况，适时调整。</p>\n</div>\n<p><strong>本地安装</strong></p>\n<ul>\n<li>PostgreSQL</li>\n<li>MySQL</li>\n<li>Redis</li>\n</ul>\n<p><strong>容器安装</strong></p>\n<ul>\n<li>Nacos</li>\n<li>ELK</li>\n<li>Kafka &amp; Zookeeper</li>\n<li>Sentinel</li>\n</ul>\n<h3 id=\"_1-本地docker安装-windows版\"> [1],本地Docker安装（Windows版）</h3>\n<ul>\n<li>Windows 本地安装 Docker 请参考个人博文：</li>\n</ul>\n<ol>\n<li><a href=\"https://blog.csdn.net/Pointer_v/article/details/106176846?spm=1001.2014.3001.5501\" target=\"_blank\" rel=\"noopener noreferrer\">Windows 10 2004 (20H1) 安装 Docker Desktop for Windows (2.3.0.2) 以 WSL 2 方式运行容器</a></li>\n<li><a href=\"https://blog.csdn.net/Pointer_v/article/details/106910766?spm=1001.2014.3001.5501\" target=\"_blank\" rel=\"noopener noreferrer\">Windows 10 将 Docker Desktop for Windows（WSL 2 方式）文件存储移出C盘放置到其它目录</a></li>\n</ol>\n<h3 id=\"_2-安装配置mysql\"> [2],安装配置MySQL</h3>\n<ol>\n<li><strong>正常安装MySQL</strong></li>\n<li><strong>创建Nacos持久化数据库</strong></li>\n</ol>\n<p>即在MySQL中，为Nacos新建用户,新建数据库,给数据库用户分配数据库权限。</p>\n<ol start=\"3\">\n<li><strong>导入Nacos初始脚本</strong></li>\n</ol>\n<p><a href=\"https://github.com/alibaba/nacos/releases\" target=\"_blank\" rel=\"noopener noreferrer\">下载</a>最新稳定版的Nacos压缩包。解压后，在<code>{NACOS_HOME}/conf</code>目录下，找到<code>nacos-mysql.sql</code>导入到数据库中。</p>\n<div><p>提示</p>\n<p>在工程的<code>${project home}/configurations/scripts</code>目录下，保存了一份Nacos脚本可以使用，如果不是最新请自行重新下载。</p>\n</div>\n<ol start=\"4\">\n<li><strong>开放MySQL数据库IP访问</strong></li>\n</ol>\n<p>正常情况下，本地开发使用<code>localhost</code>就可以访问已安装的mysql服务; 因为Docker是使用内部的独立网络，Docker内部容器想要访问外部的数据库，只能通过ip地址才能访问。所以需要开放数据库的IP访问，否则会出现 Docker 容器发无法连接数据库的情况。</p>\n<p>使用命令行工具，登录进入MySQL，输入以下脚本查看数据库的可访问情况：</p>\n<div><pre><code>mysql<span>></span> <span>select</span> host,user from mysql.user<span>;</span>\n</code></pre>\n<div><span>1</span><br></div></div><p>查询结果示例：</p>\n<div><pre><code><span>|</span> <span>host</span>      <span>|</span> user             <span>|</span>\n<span>|</span> --------- <span>|</span> ---------------- <span>|</span>\n<span>|</span> localhost <span>|</span> root             <span>|</span>\n<span>|</span> localhost <span>|</span> mysql.infoschema <span>|</span>\n<span>|</span> localhost <span>|</span> mysql.session    <span>|</span>\n<span>|</span> localhost <span>|</span> mysql.sys        <span>|</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p><strong>host字段的值是localhost，说明只允许本地访问</strong></p>\n<p>找到对应你所用的用户，设置允许任意IP访问，执行语句：</p>\n<div><pre><code>mysql<span>></span> update mysql.user <span>set</span> <span>host</span> <span>=</span> <span>'%'</span> where user <span>=</span> <span>'root'</span><span>;</span>\n\nmysql<span>></span> flush privileges<span>;</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h3 id=\"_2-安装配置postgresql\"> [2],安装配置PostgreSQL</h3>\n<ol>\n<li><strong>安装PostgreSQL数据库</strong></li>\n</ol>\n<p>正常安装即可。跟随安装的Wizard一步一步进行即可。</p>\n<ol start=\"2\">\n<li><strong>创建应用数据库</strong></li>\n</ol>\n<p>参见：<a href=\"./../documents/环境部署.html#[2],创建数据库\">创建应用数据</a></p>\n<ol start=\"3\">\n<li><strong>导入建表数据</strong></li>\n</ol>\n<p>参见：<a href=\"./../documents/环境部署.html#[5],导入数据库脚本\">导入数据库脚本</a></p>\n<ol start=\"4\">\n<li><strong>开放IP访问</strong></li>\n</ol>\n<p>如果想要使用Docker封装的服务，就需要开放<code>PostgreSQL</code>的IP访问。Windows环境，链接<code>PostgreSQL</code>是主机名填写<code>“localhost”</code>可以正常链接，使用IP地址不能进行链接</p>\n<p>在<code>${PostgreSQL_HOME}/12/data</code>目录下，找到<code>postgresql.conf</code>和<code>pg_hba.conf</code>。</p>\n<ul>\n<li>打开<code>postgresql.conf</code>，在59行，找到<code>listen_addresses</code>，修改为：</li>\n</ul>\n<div><pre><code>listen_addresses <span>=</span> <span>'*'</span>\n</code></pre>\n<div><span>1</span><br></div></div><ul>\n<li>修改端口号打开<code>postgresql.conf</code>，在63行，找到port</li>\n</ul>\n<blockquote>\n<p>PostgreSQL 12 中，该项默认就为 ‘*’，所以可以不用修改</p>\n</blockquote>\n<ul>\n<li>打开<code>pg_hba.conf</code>，在最后增加：</li>\n</ul>\n<div><pre><code><span>host</span>    all             all             <span>192.168</span>.0.0/16          trust\n</code></pre>\n<div><span>1</span><br></div></div><blockquote>\n<p>允许访问PostgreSQL服务器的客户端IP地址, 其中：192.168.0.0/16表示允许192.168.0.1-192.168.255.255网段访问。可根据实际情况调整</p>\n</blockquote>\n<ul>\n<li>重启数据服务</li>\n</ul>\n<h3 id=\"_3-安装配置redis\"> [3],安装配置Redis</h3>\n<ol>\n<li>安装Redis</li>\n</ol>\n<p>正常安装即可</p>\n<ol start=\"2\">\n<li>开放IP访问</li>\n</ol>\n<p>在<code>redis</code>安装目录下，找到<code>redis.windows-service.conf</code></p>\n<ul>\n<li>将 <code>56</code> 行 <code>bind 127.0.0.1</code> 注释掉，修改为</li>\n</ul>\n<div><pre><code><span>#bind 127.0.0.1</span>\n</code></pre>\n<div><span>1</span><br></div></div><ul>\n<li>将 <code>75</code> 行 <code>protected-mode</code> 参数改为 <code>no</code></li>\n</ul>\n<div><pre><code>protected-mode no\n</code></pre>\n<div><span>1</span><br></div></div><blockquote>\n<p>生产环境不建议这样，还是要指定具体IP安全一些</p>\n</blockquote>\n<ul>\n<li>重启服务</li>\n</ul>\n<h3 id=\"_4-部署kafka-zookeeper-nacos-elk-sentinel-dashboard\"> [4],部署Kafka,Zookeeper,Nacos,ELK,Sentinel Dashboard</h3>\n<p>除了<code>MySQL</code>,<code>PostgreSQL</code>和<code>Redis</code>以外，其它相关运行环境组件 <code>Zookeeper</code>,<code>Kafka</code>,<code>Nacos</code>,<code>ELK</code>,<code>Sentinel Dashboard</code>，可以通过<code>docker-compose</code>方式进行部署，执行以下命令即可：</p>\n<ul>\n<li>运行容器</li>\n</ul>\n<div><p>注意：</p>\n<p><code>ELK</code> 依赖一个重要参数 <code>vm.max_map_count</code>，如果这个值小于<code>262144</code>，<code>ELK</code> 会无法正常启动</p>\n<p>一种解决办法</p>\n<p>如果是采用 <code>WSL2</code> 的方式运行容器，那么在Linux中输入以下命令</p>\n<div><pre><code><span>sudo</span> -i\n<span>sudo</span> sysctl vm.max_map_count<span>=</span><span>524288</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>然后在启动Docker Desktop</p>\n<p>另一种解决办法：</p>\n<ul>\n<li>open powershell</li>\n<li>wsl -d docker-desktop</li>\n<li>echo &quot;vm.max_map_count = 262144&quot; &gt; /etc/sysctl.d/99-docker-desktop.conf</li>\n</ul>\n<p>参考 : <a href=\"https://github.com/docker/for-win/issues/5202\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/docker/for-win/issues/5202</a></p>\n</div>\n<div><p>说明</p>\n<p>已经将Dockerfile以及docker-compose修改为参数运行。</p>\n<p>因此运行一下命令时，请确保.env 文件在执行命令的目录下。</p>\n<p>例如：如果在<code>C:\\Users\\Administrator\\Desktop</code>执行命令，那么<code>.env</code>文件，就需要在<code>C:\\Users\\gengwei.zheng\\Desktop</code>目录下</p>\n</div>\n<div><pre><code>docker-compose -f ${project_home}/configurations/docker/docker-compose/herodotus/env.base.yml up -d\n</code></pre>\n<div><span>1</span><br></div></div><blockquote>\n<p>该命令会查看本地是否已经有了相关镜像，如果没有会首先下载镜像，然后再运行，请先保证网络畅通</p>\n</blockquote>\n<ul>\n<li>停止容器</li>\n</ul>\n<div><pre><code>docker-compose -f ${project_home}/configurations/docker/docker-compose/herodotus/env.base.yml stop\n</code></pre>\n<div><span>1</span><br></div></div><ul>\n<li>停止并删除容器</li>\n</ul>\n<div><pre><code>docker-compose -f ${project home}/configurations/docker/docker-compose/herodotus/env.base.yml down\n</code></pre>\n<div><span>1</span><br></div></div><h3 id=\"_5-部署skywalking\"> [5],部署Skywalking</h3>\n<div><p>注意</p>\n<p>由于 <code>Skywalking</code> 采用 <code>Elasticsearch</code> 进行数据存储，因此 <code>Skywalking</code>运行之前，要保证 <code>Elasticsearch</code> 已经正常运行。</p>\n<p>虽然docker-compose有depends_on属性，但是该属性只能解决容器启动的先后顺序问题，并不能实现某一个容器及容器内部所有应用启动成功之后再运行的问题。</p>\n<p>因此，这里将环境依赖的应用，拆分为两个<code>docker-compose</code>文件，</p>\n<ul>\n<li>先运行<code>${project_home}/configurations/docker/docker-compose/herodotus/env.base.yml</code>，待所有容器及内部服务成功运行之后，</li>\n<li>再运行<code>${project_home}/configurations/docker/docker-compose/herodotus/env.skywalking.yml</code></li>\n</ul>\n</div>\n<p>通过docker-compose方式进行部署，执行以下命令即可：</p>\n<ul>\n<li>运行容器</li>\n</ul>\n<div><pre><code>docker-compose -f ${project_home}/configurations/docker/docker-compose/herodotus/env.skywalking.yml  up -d\n</code></pre>\n<div><span>1</span><br></div></div><blockquote>\n<p>该命令会查看本地是否已经有了相关镜像，如果没有会首先下载镜像，然后再运行，请先保证网络畅通</p>\n</blockquote>\n<ul>\n<li>停止容器</li>\n</ul>\n<div><pre><code>docker-compose -f ${project_home}/configurations/docker/docker-compose/herodotus/env.skywalking.yml stop\n</code></pre>\n<div><span>1</span><br></div></div><ul>\n<li>停止并删除容器</li>\n</ul>\n<div><pre><code>docker-compose -f ${project_home}/configurations/docker/docker-compose/herodotus/env.skywalking.yml down\n</code></pre>\n<div><span>1</span><br></div></div><h3 id=\"_6-服务打包部署\"> [6],服务打包部署</h3>\n<p>在命令行中，执行以下命令即可</p>\n<ul>\n<li>运行容器</li>\n</ul>\n<div><pre><code>docker-compose -f ${project home}/configurations/docker/docker-compose/herodotus/services.dev.yml --env-file=${project_home}/configurations/docker/docker-compose/herodotus/.env up -d\n</code></pre>\n<div><span>1</span><br></div></div><blockquote>\n<p>该命令会查看本地是否已经有了相关镜像，如果没有会首先构建镜像，然后再运行，请先保证网络畅通</p>\n</blockquote>\n<ul>\n<li>停止容器</li>\n</ul>\n<div><pre><code>docker-compose -f ${project home}/configurations/docker/docker-compose/herodotus/services.dev.yml --env-file=${project_home}/configurations/docker/docker-compose/herodotus/.env up -d stop\n</code></pre>\n<div><span>1</span><br></div></div><ul>\n<li>停止并删除容器</li>\n</ul>\n<div><pre><code>docker-compose -f ${project home}/configurations/docker/docker-compose/herodotus/services.dev.yml --env-file=${project_home}/configurations/docker/docker-compose/herodotus/.env up -d down\n</code></pre>\n<div><span>1</span><br></div></div><h2 id=\"服务器容器部署\"> 服务器容器部署</h2>\n<div><p>提示</p>\n<p>应用环境的部署是一项大工程，同样的基础设施根据不同应用场景需求，可以采用多种多样不同的方式进行部署。基础设施的部署也比较复杂，其中任意一项都可以单独作为专门话题进行讨论。这就是所谓的“<strong>千人千面</strong>”， 而且基础设施部署并不是本项目的重点，所以此处不再展开。当然，只要是技术问题，欢迎在群里积极讨论交流。</p>\n</div>\n<p>使用Docker-compose打包Docker，参见[Eurynome Cloud Docker 打包使用方法](#Eurynome Cloud Docker 打包使用方法)</p>\n<h2 id=\"docker打包设计\"> Docker打包设计</h2>\n<h3 id=\"eurynome-cloud-docker-打包设计初衷\"> Eurynome Cloud Docker 打包设计初衷</h3>\n<p>Eurynome Cloud Docker 打包的设计，采取了与大多数开源微服务框架不同的方式。采取这种不同的方式进行打包，主要是考虑解决以下两方面问题：</p>\n<h4 id=\"_1-skwalking-agent的引入问题\"> [1],Skwalking Agent的引入问题</h4>\n<p>系统中为了解决服务链路跟踪及监控的问题，引入了Skywalking组件。Skywalking想要正确运行，除了要保证Skywalking Server的<a href=\"%5B5%5D,%E9%83%A8%E7%BD%B2Skywalking\">正常运行</a>外，还要将Skywalking&quot;注入&quot;到服务的运行环境中。</p>\n<ol>\n<li>如果是以<code>fat jar</code>的方式运行服务，需要在服务的运行命令中指定Skywalking Agent以及相关的参数，如下命令</li>\n</ol>\n<div><pre><code>java -javaagent:/skywalking-agent.jar<span>=</span>agent.service_name<span>=</span><span>${SW_AGENT_SERVICE_NAME}</span>,collector.backend_service<span>=</span><span>${SW_COLLECTOR_BACKEND_SERVICE}</span> <span>${JAVA_OPTS}</span> -jar /app.jar\n</code></pre>\n<div><span>1</span><br></div></div><ol start=\"2\">\n<li>如果是以Docker的方式运行服务，传统的方式就需要把<code>skywalking-agent.jar</code>一并打入到服务的docker中。</li>\n</ol>\n<p>由于Docker-compose打包上下文的问题，就需要在每一个模块中都复制一份skywalking-agent.jar。很不好管理，看着也不舒服。</p>\n<h4 id=\"_2-dockerfile的编写和放置问题\"> [2],Dockerfile的编写和放置问题</h4>\n<p>常规Java微服务的Docker打包方式，要么采用Maven Plugin的方式，要么采用docker-compose的方式。不管哪一种方式，都需要在该服务代码所在目录下新建一个Dockerfile文件。</p>\n<p>一方面，每个服务下的Dockerfile文件中的配置信息，除了服务的JAR包名不同以外，其余的所有配置都相同，就是一种重复劳动。\n另一方面，如果要增加Skywalking，那么需要在每一个服务所在目录下都拷贝一份<code>skywalking-agent.jar</code>。不仅重复工作，代码结构也不美观整洁。</p>\n<h3 id=\"eurynome-cloud-docker-打包的设计\"> Eurynome Cloud Docker 打包的设计</h3>\n<p>为了解决上述两方面问题，<code>Eurynome Cloud</code> 在所有模块之外之指定了一个统一的目录，将需要打包的jar以及dockerfile全部放入该目录，通过该目录形成一个统一的上下文环境。在<strong>Eurynome Cloud</strong>工程中，<code>${project_home}/configurations/docker/context</code>就是这个上下文环境。</p>\n<p>在这个上下文环境中，除了包含通用的Dockerfile,Skywalking Agent以外，在使用Maven进行编译的过程中，还会将所有需要打包服务的对应的jar包拷贝到<code>${project_home}/configurations/docker/context/target</code>目录下。这样打包的所有资源就都已经具备，同时还解决了上述两个问题。</p>\n<div><p>提示</p>\n<p>可以通过修改<code>${project_home}/pom.xml</code> 中的<code>&lt;docker.build.directory&gt;</code>值，来改变拷贝jar包的目录</p>\n</div>\n<h3 id=\"eurynome-cloud-docker-打包使用方法\"> Eurynome Cloud Docker 打包使用方法</h3>\n<h4 id=\"_1-修改信息\"> [1],修改信息</h4>\n<p>由于使用了一个统一的Dockerfile来解决重复定义Docker打包配置文件的问题，想要实现使用一个Dockerfile打出不同的Docker，那么就需要通过传参的方式来改变Dockerfile中的值。</p>\n<p>这里采用的是环境变量的方式，在<code>${project_home}/configurations/docker/docker-compose/.env</code>文件中定义这些参数。其中包含版本号以及具体服务对应的包名。所以如果有新增服务或者想要指定版本号，首先就需要修改这个配置文件。</p>\n<h4 id=\"_2-执行命令\"> [2],执行命令</h4>\n<p>执行打包命令</p>\n<div><pre><code>docker-compose -f ${project home}/configurations/docker/docker-compose/herodotus/services.dev.yml --env-file=${project_home}/configurations/docker/docker-compose/herodotus/.env up -d\n</code></pre>\n<div><span>1</span><br></div></div><p>或者</p>\n<div><pre><code>docker-compose -f ${project home}/configurations/docker/docker-compose/herodotus/services.prod.yml --env-file=${project_home}/configurations/docker/docker-compose/herodotus/.env up -d\n</code></pre>\n<div><span>1</span><br></div></div><div><p>说明</p>\n<p>上文说到想要以Docker的方式运行服务并且关联Skywalking，就需要在打包时将Skywalking Agent打入到Docker中。但实际应用中并不是所有环境都需要使用Skywalking，比如：在生产环境需要使用Skywalking，在开发环境中并不需要Skywalking以降低资源消耗。</p>\n<p>因此，Eurynome Cloud 提供了两种打包配置</p>\n<p>使用<code>${project home}/configurations/docker/docker-compose/herodotus/services.dev.yml</code>这个Docker-compose配置文件打包时，对应的Dockerfile文件是<code>${project home}/configurations/docker/context/development/Dockerfile</code>。这个Dockerfile配置中，没有包含Skywalking Agent的拷贝命令。</p>\n<p>使用<code>${project home}/configurations/docker/docker-compose/herodotus/services.prod.yml</code>这个Docker-compose配置文件打包时，对应的Dockerfile文件是<code>${project home}/configurations/docker/context/production/Dockerfile</code>。这个Dockerfile配置中，包含了Skywalking Agent的拷贝命令。</p>\n<p>这样通过不同的命令，实现了对不同Docker环境需求的支持。</p>\n</div>\n",
      "date_published": "2021-10-27T16:13:57.000Z",
      "date_modified": "2021-10-28T15:24:29.000Z",
      "authors": [
        {
          "name": "码匠君"
        }
      ],
      "tags": []
    },
    {
      "title": "容器化技术",
      "url": "https://herodotus.cn/microservices/container-technology/",
      "id": "https://herodotus.cn/microservices/container-technology/",
      "content_html": "<h1 id=\"容器化技术\"> 容器化技术</h1>\n<h2 id=\"docker能解决什么问题\"> Docker能解决什么问题?</h2>\n<p><img src=\"/images/docker/logo-01.png\" alt=\"Docker Logo\" /></p>\n<p>Docker是一个容器化工具，那么什么是容器呢，Docker和容器有什么关系，Docker又能解决什么问题呢？</p>\n<h3 id=\"麻烦的环境配置\"> 麻烦的环境配置</h3>\n<p>软件开发最大的麻烦事之一就是环境配置，在开发之前我们需要准备各种运行环境,IDE,辅助工具。就像我们要使用电脑前，先要安装操作系统一样。</p>\n<p>而一个可用软件的交付过程通常包含两个部分 - 开发和维护。不幸的是，我们很难保证软件开发测试和运行维护阶段的软件能运行在一模一样的环境下。开发常说：&quot;It works on my machine&quot;，很多时候我们都要花大量的时间去配置环境和教别人配置环境。</p>\n<h3 id=\"现在的应用程序\"> 现在的应用程序</h3>\n<p><img src=\"/images/docker/applications.jpg\" alt=\"applications.jpg\" /></p>\n<div><p>以前的应用程序:</p>\n<ul>\n<li>几乎都是单块应用: 大系统, 多模块</li>\n<li>紧耦合: 内部调用</li>\n<li>不常变更: 需求稳定(改动成本高)</li>\n</ul>\n</div>\n<div><p>如今的应用程序:</p>\n<ul>\n<li>解耦: 微服务/异步</li>\n<li>经常变更: 快速迭代</li>\n<li>动态创建和部署: 服务化</li>\n</ul>\n</div>\n<h3 id=\"新架构的挑战\"> 新架构的挑战</h3>\n<ul>\n<li>多样化的技术栈</li>\n<li>需要动态创建机器</li>\n<li>很多活动组件</li>\n<li>运维人员需要管理复杂的架构</li>\n</ul>\n<div><p>复杂的架构</p>\n<p>在新的应用程序架构下，我们部署应用的成本大大增加。不但要搭建不同语言,不同技术栈适配的运行环境，还要部署到多个服务器主机上；并且这些主机还可能来自不同地方(公/私有云主机,物理主机)。</p>\n</div>\n<h3 id=\"统一的管理\"> 统一的管理</h3>\n<p>其实在软件开发的过程中我们就思考过类似的问题 - 如何统一的管理我们的代码包。例如，Maven,Gradle,NPM，我们使用一个相同的格式(规范)将我们的代码划分成模块，并使用一套工具去管理他们。在此之后我们不需要重复的copy代码,复制文件，只需要声明式的引入我们需要的代码包就可以了。</p>\n<p>当然，我们希望我们的应用部署也能如此简单。</p>\n<h2 id=\"容器\"> “容器”</h2>\n<p><img src=\"/images/docker/good-container.png\" alt=\"good-container.png\" /></p>\n<p><img src=\"/images/docker/app-container.png\" alt=\"app-container.png\" /></p>\n<div><p>“容器”是一个黑盒，对于它的使用者来说：</p>\n<ul>\n<li>无需关心里面有什么：只关注“容器”能做什么</li>\n<li>有一套工具来管理黑盒：打包,运输,运行</li>\n<li>减少了部署单元的数量，从而减少了花销：多个工具聚集在一个“容器”内</li>\n<li>更容易管理多个环境：以“容器”为单位进行部署和管理</li>\n</ul>\n</div>\n<h3 id=\"虚拟化技术\"> 虚拟化技术</h3>\n<p><strong>(1) 虚拟机</strong>：精心配置的虚拟机也是满足我们(基本)要求的容器，我们能够通过虚拟机镜像来打包我们的应用。但是，庞大的操作系统占用了大量的系统资源，使运行成本大大上升。</p>\n<p><img src=\"/images/docker/vm.png\" alt=\"vm.png\" /></p>\n<div><p>虚拟机</p>\n<ul>\n<li>应用\n<ul>\n<li>运行环境(Java/数据库/libs...)</li>\n<li>客户机操作系统(Guest Operating System)</li>\n<li>虚拟机管理系统(Hypervisor)</li>\n<li>操作系统级：MacOS(HyperKit)，Windows的Hyper-V</li>\n<li>应用软件级：VirtualBox，VMWare Workstation</li>\n</ul>\n</li>\n<li>主操作系统(Host Operating System)</li>\n<li>硬件(Infrastructure)/云主机</li>\n</ul>\n</div>\n<p><strong>(2) 容器</strong>：(作为进程)共用内核并提供额外的隔离手段，避免虚拟的操作系统占用。</p>\n<p><img src=\"/images/docker/container.png\" alt=\"container.png\" /></p>\n<div><p>容器</p>\n<ul>\n<li>应用</li>\n<li>运行环境(Java/数据库/libs...)</li>\n<li>Docker守护进程(Docker Daemon): 类似虚拟机管理系统</li>\n<li>主操作系统(Host Operating System)</li>\n<li>硬件(Infrastructure)/云主机</li>\n</ul>\n</div>\n<h3 id=\"容器技术\"> 容器技术</h3>\n<p>容器技术已经发展了一段时间了, 例如, LXC, BSD Jails, Solaris Zones...</p>\n<p><img src=\"/images/docker/history.png\" alt=\"history.png\" /></p>\n<h4 id=\"容器技术特点\"> 容器技术特点</h4>\n<ul>\n<li>看起来像虚拟机\n<ul>\n<li>可以SSH到容器</li>\n<li>具有root的访问权限</li>\n<li>可以安装包</li>\n<li>可以mount文件系统</li>\n<li>拥有自己的eth0接口</li>\n<li>可以修改iptables 规则和routing table</li>\n</ul>\n</li>\n<li>共享宿主机的内核</li>\n<li>隔离 cgroups (memory, cpu, blkio)</li>\n<li>拥有进程空间 (pid, mnt, net, ipc, uts)\n<ul>\n<li>pid - 隔离进程PID</li>\n<li>mnt - 允许创建不同的文件系统层级</li>\n<li>net - 隔离网络控制,iptables,防火墙,路由</li>\n<li>ipc - 定义内部进程交流的范围</li>\n<li>uts - 允许修改hostname\n:::</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"容器技术的局限\"> 容器技术的局限</h4>\n<ul>\n<li>容器没有标准的格式</li>\n<li>所以容器是不可移植的</li>\n<li>没有标准的工具,所以比如要自己管理网络</li>\n<li>没有可重用的模块和API</li>\n</ul>\n<h2 id=\"docker\"> Docker</h2>\n<p><img src=\"/images/docker/what-is-docker.png\" alt=\"what-is-docker.png\" /></p>\n<ul>\n<li>使容器变得更容易使用</li>\n<li>容器镜像的商品化</li>\n<li>可插拔的模块易于吸引供应商加入</li>\n<li>适当的API可用来创建高层次抽象的工具</li>\n<li>和微服务诞生在同一个时代</li>\n</ul>\n<h3 id=\"docker架构\"> Docker架构</h3>\n<p><img src=\"/images/docker/docker-architecture.png\" alt=\"docker-architecture.png\" /></p>\n<ul>\n<li>Docker Client：接收命令和Docker Host进行交互的客户端</li>\n<li>Docker Host：运行Docker服务的主机\n<ul>\n<li>Docker Daemon：守护进程，用于管理所有镜像和容器</li>\n<li>Docker Images/Containers：镜像和容器实例</li>\n</ul>\n</li>\n<li>Registry(Hub)：镜像仓库</li>\n</ul>\n<p><img src=\"/images/docker/docker-architecture2.png\" alt=\"docker-architecture2.png\" /></p>\n<h3 id=\"docker底层实现\"> Docker底层实现</h3>\n<p><img src=\"/images/docker/docker-tech.png\" alt=\"docker-tech.png\" /></p>\n<p><a href=\"https://draveness.me/docker\" target=\"_blank\" rel=\"noopener noreferrer\">底层实现原理详解见</a></p>\n<h3 id=\"docker核心技术\"> Docker核心技术</h3>\n<p><img src=\"/images/docker/core-tech.png\" alt=\"core-tech.png\" /></p>\n<ul>\n<li>Namespace 命名空间\nLinux 的命名空间机制提供了以下七种不同的命名空间，包括 <code>CLONE_NEWCGROUP,CLONE_NEWIPC,CLONE_NEWNET,CLONE_NEWNS,CLONE_NEWPID,CLONE_NEWUSER,CLONE_NEWUTS</code>，通过这七个选项我们能在创建新的进程时设置新进程应该在哪些资源上与宿主机器进行隔离。因此容器只能感知内部的进程，而对宿主机和其他容器一无所知。</li>\n<li>CGroups (Control Groups)\nLinux 的 CGroup 能够为一组进程分配资源，也就是我们在上面提到的 CPU,内存,网络带宽等资源.</li>\n<li>UnionFS\n<img src=\"/images/docker/union-fs.png\" alt=\"union-fs.png\" /></li>\n</ul>\n<p>Docker中的每一个镜像都是由一系列的只读层组成的，Dockerfile 中的每一个命令都会在已有的只读层上创建一个新的层。通过 docker run 命令可以在镜像的最上层添加一个可写的层 - 容器层，所有对于运行时容器的修改其实都是对这个容器读写层的修改。</p>\n<p>容器和镜像的区别就在于，所有的镜像都是只读的，而每一个容器其实等于镜像加上一个可读写的层，也就是同一个镜像可以对应多个容器。同时已构建的每一层镜像也可以作为其他镜像的基础层进行共用。</p>\n<h3 id=\"docker-vs-vm\"> Docker VS VM</h3>\n<p><img src=\"/images/docker/docker-vs-vm.png\" alt=\"docker-vs-vm.png\" /></p>\n",
      "image": "https://herodotus.cn/images/docker/logo-01.png",
      "date_published": "2021-10-27T16:13:57.000Z",
      "date_modified": "2021-10-28T15:24:29.000Z",
      "authors": [
        {
          "name": "码匠君"
        }
      ],
      "tags": []
    },
    {
      "title": "OAuth2 授权开放标准",
      "url": "https://herodotus.cn/microservices/oauth2-authorization/",
      "id": "https://herodotus.cn/microservices/oauth2-authorization/",
      "content_html": "<h1 id=\"oauth2-授权开放标准\"> OAuth2 授权开放标准</h1>\n<h2 id=\"介绍\"> 介绍</h2>\n<p><code>OAuth</code> 全称是 <code>Open Authentication</code></p>\n<p>开放授权（<code>OAuth</code>）是一个开放标准，允许用户让第三方应用访问该用户在某一网站上存储的私密的资源（如照片，视频，联系人列表），而无需将用户名和密码提供给第三方应用。 OAuth允许用户提供一个令牌，而不是用户名和密码来访问他们存放在特定服务提供者的数据。每一个令牌授权一个特定的网站（例如，视频编辑网站）在特定的时段（例如，接下来的2小时内）内访问特定的资源（例如仅仅是某一相册中的视频）。这样，<code>OAuth</code> 让用户可以授权第三方网站访问他们存储在另外服务提供者的某些特定信息，而非所有内容。</p>\n<blockquote>\n<p>目前使用最广泛的是 <code>OAuth 2.0</code>，<code>OAuth 1.0</code> 已经被废弃了。本文中的OAuth都是指 <code>OAuth 2.0</code></p>\n</blockquote>\n<h3 id=\"oauth2授权流程中的角色\"> OAuth2授权流程中的角色</h3>\n<ul>\n<li>资源拥有者（<code>resource owner</code>）：能授权访问受保护资源的一个实体，可以是一个人，那我们称之为最终用户；</li>\n<li>资源服务器（<code>resource server</code>）：存储受保护资源，客户端通过<code>access token</code>请求资源，资源服务器响应受保护资源给客户端；</li>\n<li>授权服务器（<code>authorization server</code>）：成功验证资源拥有者并获取授权之后，授权服务器颁发授权令牌（<code>Access Token</code>）给客户端。</li>\n<li>客户端（<code>client</code>）：第三方应用，也可以是它自己的官方应用；其本身不存储资源，而是资源拥有者授权通过后，使用它的授权（授权令牌）访问受保护资源，然后客户端把相应的数据展示出来/提交到服务器。</li>\n</ul>\n<h3 id=\"令牌与密码\"> 令牌与密码</h3>\n<p>令牌（<code>token</code>）与密码（<code>password</code>）的作用是一样的，都可以进入系统，但是有三点差异。</p>\n<ul>\n<li>（1）令牌是短期的，到期会自动失效，用户自己无法修改。密码一般长期有效，用户不修改，就不会发生变化。</li>\n<li>（2）令牌可以被数据所有者撤销，会立即失效。以上例而言，屋主可以随时取消快递员的令牌。密码一般不允许被他人撤销。</li>\n<li>（3）令牌有权限范围（scope），比如只能进小区的二号门。对于网络服务来说，只读令牌就比读写令牌更安全。密码一般是完整权限。</li>\n</ul>\n<p>上面这些设计，保证了令牌既可以让第三方应用获得权限，同时又随时可控，不会危及系统安全。这就是 <code>OAuth 2.0</code> 的优点。</p>\n<div><p>注意</p>\n<p>只要知道了令牌，就能进入系统。系统一般不会再次确认身份，所以令牌必须保密，泄漏令牌与泄漏密码的后果是一样的。 这也是为什么令牌的有效期，一般都设置得很短的原因。</p>\n</div>\n<h2 id=\"四种模式\"> 四种模式</h2>\n<p><code>OAuth</code> 的核心就是向第三方应用颁发令牌。<code>OAuth 2.0</code> 协议根据使用不同的适用场景，规定了四种获得令牌的流程。你可以选择最适合自己的那一种，向第三方应用颁发令牌。下面就是这四种授权方式。</p>\n<ul>\n<li>授权码模式（<code>Authorization Code Grant</code>）</li>\n<li>隐式模式（<code>Implicit Grant</code>）</li>\n<li>密码模式式（<code>Resource Owner Password Credentials Grant</code>）：</li>\n<li>客户端凭证模式（<code>Client Credentials Grant</code>）</li>\n</ul>\n<h3 id=\"授权码模式-authorization-code-grant\"> 授权码模式（Authorization Code Grant）</h3>\n<p>授权码授权模式主要流程如下图所示：</p>\n<p><img src=\"/images/oauth/authorization-code-flow.png\" alt=\"授权码模式流程\" /></p>\n<ul>\n<li>第一步：用户访问页面或者出发认证地址</li>\n<li>第二步：访问的页面将请求重定向到认证服务器</li>\n<li>第三步：用户登录成功只有，认证服务器向用户展示授权页面，等待用户授权</li>\n<li>第四步：用户授权，认证服务器生成一个 <code>code</code> 和带上 <code>client_id</code> 发送给应用服务器。然后，应用服务器拿到 <code>code</code>，并用 <code>client_id</code> 去后台查询对应的<code>client_secret</code></li>\n<li>第五步：将 <code>code</code>,<code>client_id</code>,<code>client_secret</code>传给认证服务器换取 <code>access_token</code> 和 <code>refresh_token</code></li>\n<li>第六步：将 <code>access_token</code> 和 <code>refresh_token</code> 传给应用服务器</li>\n<li>第七步：验证 <code>token</code>，访问真正的资源页面</li>\n</ul>\n<div><p>授权码授权模式优劣势：</p>\n<p><img src=\"/images/oauth/authorization-code-description.png\" alt=\"授权码模式优劣势\" /></p>\n</div>\n<h3 id=\"隐式模式-implicit-grant\"> 隐式模式（Implicit Grant）</h3>\n<p>隐式模式主要流程如下图所示：</p>\n<p><img src=\"/images/oauth/implicit-grant-flow.png\" alt=\"隐式模式流程\" /></p>\n<ul>\n<li>第一步：用户访问页面时，重定向到认证服务器。</li>\n<li>第二步：认证服务器给用户一个认证页面，等待用户授权。</li>\n<li>第三步：用户授权，认证服务器想应用页面返回 <code>Token</code></li>\n<li>第四步：验证 <code>Token</code>，访问真正的资源页面</li>\n</ul>\n<div><p>隐式模式优劣势:</p>\n<p><img src=\"/images/oauth/implicit-grant-description.png\" alt=\"隐式模式优劣势\" /></p>\n</div>\n<h3 id=\"密码模式-resource-owner-password-credentials-grant\"> 密码模式（Resource Owner Password Credentials Grant）</h3>\n<p>密码模式主要流程如下图所示：</p>\n<p><img src=\"/images/oauth/resource-owner-password-credentials-grant-flow.png\" alt=\"密码流程\" /></p>\n<ul>\n<li>第一步：用户访问用页面时，输入第三方认证所需要的信息(QQ/微信账号密码)</li>\n<li>第二步：应用页面那种这个信息去认证服务器授权</li>\n<li>第三步：认证服务器授权通过，拿到token，访问真正的资源页面</li>\n</ul>\n<div><p>说明</p>\n<p>优点：不需要多次请求转发，额外开销，同时可以获取更多的用户信息。(都拿到账号密码了)</p>\n<p>缺点：局限性，认证服务器和应用方必须有超高的信赖。(比如亲兄弟？)</p>\n<p><strong>应用场景：自家公司搭建的认证服务器</strong></p>\n</div>\n<h3 id=\"客户端凭证模式-client-credentials-grant\"> 客户端凭证模式（Client Credentials Grant）</h3>\n<p>客户端凭证模式主要流程如下图所示：</p>\n<p><img src=\"/images/oauth/client-credentials-grant-flow.png\" alt=\"客户端凭证流程\" /></p>\n<ul>\n<li>第一步：用户访问应用客户端</li>\n<li>第二步：通过客户端定义的验证方法，拿到token，无需授权</li>\n<li>第三步：访问资源服务器A</li>\n<li>第四步：拿到一次token就可以畅通无阻的访问其他的资源页面。</li>\n</ul>\n<div><p>说明</p>\n<p>这是一种最简单的模式，只要client请求，我们就将AccessToken发送给它。这种模式是最方便但最不安全的模式。因此这就要求我们对client完全的信任，而client本身也是安全的。</p>\n<p><strong>因此这种模式一般用来提供给我们完全信任的服务器端服务。在这个过程中不需要用户的参与。</strong></p>\n</div>\n<h2 id=\"模式验证\"> 模式验证</h2>\n<div><p>注意</p>\n<p>以下内容中，所有URL地址一定要使用IP访问。如果是本地环境，那么也要使用本机真实的IP，不要使用 <code>127.0.0.1</code> 或者 <code>localhost</code>。切记！！！</p>\n</div>\n<div><p>说明</p>\n<p>不管哪一种授权方式，第三方应用申请令牌之前，都必须先到系统备案，说明自己的身份，然后会拿到两个身份识别码：客户端 ID（client ID）和客户端密钥（client secret）。这\n是为了防止令牌被滥用，没有备案过的第三方应用，是不会拿到令牌的。</p>\n<p>即：要在系统中为该客户端分配ID（<code>client ID</code>）和客户端密钥（<code>client secret</code>），换句话说 <code>oauth-client-details</code> 表中要有该客户端对应的数据</p>\n</div>\n<h3 id=\"授权码模式验证\"> 授权码模式验证</h3>\n<p>指的是第三方应用先申请一个授权码，然后再用该码获取令牌。这种方式是最常用的流程，安全性也最高，它适用于那些有后端的 Web 应用。授权码通过前端传送，令牌则是储存在后端，而且所有与资源服务器的通信都在后端完成。这样的前后端分离，可以避免令牌泄漏。</p>\n<h4 id=\"第一步-客户端向资源端申请code\"> 第一步：客户端向资源端申请code</h4>\n<div><p>说明</p>\n<p>这里所说的客户端，是指任意想要使用 <code>Eurynome Cloud</code> 的应用系统。</p>\n<p>主要逻辑：假设，某网站或者系统（客户端），我们称之为 A 。<code>Eurynome Cloud</code> 向A网站提供一个认证链接，A 网站会把这个连接做成一个按钮，用户点击后就会根据这个连接跳转到 <code>Eurynome Cloud</code>，在 <code>Eurynome Cloud</code> 认证通过后授权用户数据给 A 网站使用。</p>\n</div>\n<p>上面所说的连接，就是如下的认证连接：</p>\n<div><pre><code><span>http<span>:</span></span><span><span>//</span><span>192.168.101.10</span><span><span>:</span><span>8847</span></span></span><span><span>/</span>eurynome-cloud-uaa<span>/</span>oauth<span>/</span>authorize</span><span><span>?</span><span><span>response_type</span>=<span>code</span></span><span>&amp;</span><span><span>client_id</span>=<span>010e659a-4005-4610-98f6-00b822f4758e</span></span><span>&amp;</span><span><span>redirect_uri</span>=<span>http://localhost:9999/passport/login</span></span><span>&amp;</span><span><span>scope</span>=<span>all</span></span></span>\n</code></pre>\n<div><span>1</span><br></div></div><div><p>参数</p>\n<ul>\n<li>response_type：必选。值固定为“code”。</li>\n<li>client_id：必选参数（第三方应用的标识ID，告诉服务器谁需要得到授权）</li>\n<li>state：Client提供的一个字符串，服务器会原样返回给Client。这个要自己实现，用于防止恶意攻击。</li>\n<li>redirect_uri：必选参数（授权成功后的重定向地址）</li>\n<li>scope：可选参数（表示授权范围）</li>\n</ul>\n</div>\n<h4 id=\"第二步-资源端返回code给客户端\"> 第二步：资源端返回code给客户端</h4>\n<p>可以采用以下两种方式进行验证：</p>\n<ul>\n<li>第一种：如果有想要接入的系统，那么就在这个系统中做一个图标按钮，点击后跳转到上面的地址。（比如：很多系统都支持微信登录，那么在页面上就会有一个微信的图标按钮，点击后跳转到一个地址）</li>\n<li>第二种：如果没有想接入的系统，可以将上面的地址输入到浏览器，获取信息后配合 <code>Postman</code> 等工具进行验证。</li>\n</ul>\n<blockquote>\n<p>下面采用第二种浏览器的方式</p>\n</blockquote>\n<p>在浏览器中输入上面的地址，会跳出如下登录界面。</p>\n<p><img src=\"/images/oauth/authorization-code-demo-01.png\" alt=\"流程1\" /></p>\n<p>输入用户名,密码和验证码进行用户验证。</p>\n<blockquote>\n<p>可以使用系统默认用户：system 密码：123456</p>\n</blockquote>\n<p>登录成功后，会跳转到授权页面进行授权，如下图所示：</p>\n<p><img src=\"/images/oauth/authorization-code-demo-02.png\" alt=\"流程2\" /></p>\n<p>授权成功后，就会跳转到一个新的地址，同时在地址的后面会跟随生成的code, 如下所示。这个地址就是系统中设置的 <code>redirect_uri</code></p>\n<div><pre><code><span>http<span>:</span></span><span><span>//</span><span>localhost</span><span><span>:</span><span>9999</span></span></span><span><span>/</span>passport<span>/</span>login</span><span><span>?</span><span><span>code</span>=<span>P6dxH5</span></span></span>\n</code></pre>\n<div><span>1</span><br></div></div><h4 id=\"第三步-客户端根据code向资源端请求令牌\"> 第三步：客户端根据code向资源端请求令牌</h4>\n<p>在你习惯的工具中，输入下面的地址：</p>\n<div><pre><code><span>http<span>:</span></span><span><span>//</span><span>192.168.101.10</span><span><span>:</span><span>8847</span></span></span><span><span>/</span>eurynome-cloud-uaa<span>/</span>oauth<span>/</span>token</span><span><span>?</span><span><span>client_id</span>=<span>010e659a-4005-4610-98f6-00b822f4758e</span></span><span>&amp;</span><span><span>client_secret</span>=<span>04165a07-cffd-45cf-a20a-1c2a69f65fb1</span></span><span>&amp;</span><span><span>grant_type</span>=<span>authorization_code</span></span><span>&amp;</span><span><span>code</span>=<span>P6dxH5</span></span><span>&amp;</span><span><span>scope</span>=<span>all</span></span><span>&amp;</span><span><span>redirect_uri</span>=<span>http://localhost:9999/passport/login</span></span></span>\n</code></pre>\n<div><span>1</span><br></div></div><div><p>参数</p>\n<ul>\n<li>grant_type：必选参数（固定值“authorization_code”）</li>\n<li>code : 必选参数（上一步Response 中响应的code，避免在请求的过程中被篡改）</li>\n<li>redirect_uri：必选参数（必须和Request中提供的redirect_uri相同）</li>\n<li>client_id：必选参数（必须和上一步Request中提供的client_id相同，不能token和授权码请求的第三方应用不一致）</li>\n</ul>\n</div>\n<p>下图以 <code>Postman</code> 为例：</p>\n<p><img src=\"/images/oauth/authorization-code-demo-03.png\" alt=\"流程3\" /></p>\n<h4 id=\"第四步-资源端向客户端返回令牌及明细\"> 第四步：资源端向客户端返回令牌及明细</h4>\n<p>返回如下所示 <code>Token</code> 则表示验证成功</p>\n<div><pre><code><span>{</span>\n    <span>\"access_token\"</span><span>:</span> <span>\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJsaWNlbnNlIjoiaGVyb2RvdHVzLWNsb3VkIiwidXNlcl9uYW1lIjoic3lzdGVtIiwib3BlbmlkIjoiMSIsInNjb3BlIjpbImFsbCJdLCJleHAiOjE2MzE2NjA5ODQsImF1dGhvcml0aWVzIjpbIk9QXzExNTk4MzkxNzUiLCJPUF8yMDY3MDA2OTYyIiwiT1BfMjAzODgxODY1IiwiT1BfMTgzMTkzMzI1NiIsIk9QXzM0NzEwODY4NCIsIk9QXzE1Mjk0OTk3MzQiLCJPUF8xNzkxNDgyODQwIiwiT1BfNTM5NzkwMTU0IiwiT1BfMTI5MTk4NjQyMCIsIk9QXzQxNDY2NTUwNSIsIk9QXzQ5MDczNzk0IiwiT1BfNzg3NjI3NTU1IiwiT1BfMTczNTYzMTgyNyIsIk9QXzEyNTYzNDY4ODciLCJPUF8xNTk1NjM4NiIsIk9QXzY1NDE2MjAxMSIsIk9QXzE2ODEwMjg3OTEiLCJPUF8xNTM4MzQzNDAiLCJPUF85NTI1NjU1NzAiLCJPUF8xOTg5ODY5MjkxIiwiT1BfMTcxODk4ODQwOCIsIk9QXzEyMTMxODc4MDkiLCJPUF85OTMxNjU1IiwiT1BfNzMwMTA1NDk5IiwiT1BfMTE5ODg3Njk4NSIsIk9QXzMyMjc3NjY4MSIsIk9QXzYyNTQ3MTI0OCIsIk9QXzIwNDA2OTk0NDMiLCJPUF83MzQwODE3MTYiLCJPUF80NTM5MjE4MjUiLCJPUF83MTUxMTUyNzIiLCJPUF82NzI5Mjg4NyIsIk9QXzE2MDM5NTM4NTgiLCJPUF8xNzQzMDQ0MzA1IiwiT1BfOTkzOTYyNDAzIiwiT1BfMTU3ODIxMTczOSIsIk9QXzI1NjIwMTkiLCJPUF8xODQwMDkwOTkyIiwiT1BfNDE1NjI2MzI5IiwiT1BfMTMxMTQ4MDk3IiwiT1BfMTc3NDc3NDczMSIsIk9QXzE4MjIwODE3NzIiLCJPUF83MjkxNDY4NDMiLCJPUF82MDA5MjI1NjEiLCJPUF82MjczMjEwNDUiLCJPUF8yMDkxMzM3OTIyIiwiT1BfNDc0NTk0NDAzIiwiT1BfMTk4OTk0MDM1MSIsIk9QXzM1NjI0MjY2OSIsIk9QXzM1NjA3Nzk5NSIsIk9QXzYyNTc3NDk4MyIsIk9QXzIxNzEyODM2NyIsIlJPTEVfQURNSU5JU1RSQVRPUiIsIk9QXzE1NDAwMTAyNDYiLCJPUF8xNjU3ODY0Njg2IiwiT1BfODEzNTM1MjIwIiwiT1BfOTk3ODg0MDg1IiwiT1BfMjk0MTgzNTIwIiwiT1BfNTYzMjI3MTc5IiwiT1BfMTc5NzU2ODIzNCIsIk9QXzgzNDYyODg1MCIsIk9QXzE5NzkwNjg5NzciLCJPUF8xNjU0NTEzMjYxIiwiT1BfMzIyOTQ3NTEwIiwiT1BfNzIxNDU2MDMzIiwiT1BfMTQ0NDM1NDg4IiwiT1BfNjQyMTQ1MjM4IiwiT1BfMTYxMzY5NzgwOSIsIk9QXzE0MDI5NTM1ODgiLCJPUF8xOTI0OTk4NTYzIiwiT1BfMTkwODM4MzQyNiIsIk9QXzIxMTk5NTYwNjQiXSwianRpIjoiNGJiNTQzNDUtZGQyNC00MzQ3LThkMjYtNjU1ZTVkNDA4NWY3IiwiY2xpZW50X2lkIjoiMDEwZTY1OWEtNDAwNS00NjEwLTk4ZjYtMDBiODIyZjQ3NThlIn0.BdTMSL2QTxyWe4Xs6piAS1Ldk23zUfhlG5_dA0xaNFA\"</span><span>,</span>\n    <span>\"token_type\"</span><span>:</span> <span>\"bearer\"</span><span>,</span>\n    <span>\"refresh_token\"</span><span>:</span> <span>\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJsaWNlbnNlIjoiaGVyb2RvdHVzLWNsb3VkIiwidXNlcl9uYW1lIjoic3lzdGVtIiwib3BlbmlkIjoiMSIsInNjb3BlIjpbImFsbCJdLCJhdGkiOiI0YmI1NDM0NS1kZDI0LTQzNDctOGQyNi02NTVlNWQ0MDg1ZjciLCJleHAiOjE2MzQyMDk3ODQsImF1dGhvcml0aWVzIjpbIk9QXzExNTk4MzkxNzUiLCJPUF8yMDY3MDA2OTYyIiwiT1BfMjAzODgxODY1IiwiT1BfMTgzMTkzMzI1NiIsIk9QXzM0NzEwODY4NCIsIk9QXzE1Mjk0OTk3MzQiLCJPUF8xNzkxNDgyODQwIiwiT1BfNTM5NzkwMTU0IiwiT1BfMTI5MTk4NjQyMCIsIk9QXzQxNDY2NTUwNSIsIk9QXzQ5MDczNzk0IiwiT1BfNzg3NjI3NTU1IiwiT1BfMTczNTYzMTgyNyIsIk9QXzEyNTYzNDY4ODciLCJPUF8xNTk1NjM4NiIsIk9QXzY1NDE2MjAxMSIsIk9QXzE2ODEwMjg3OTEiLCJPUF8xNTM4MzQzNDAiLCJPUF85NTI1NjU1NzAiLCJPUF8xOTg5ODY5MjkxIiwiT1BfMTcxODk4ODQwOCIsIk9QXzEyMTMxODc4MDkiLCJPUF85OTMxNjU1IiwiT1BfNzMwMTA1NDk5IiwiT1BfMTE5ODg3Njk4NSIsIk9QXzMyMjc3NjY4MSIsIk9QXzYyNTQ3MTI0OCIsIk9QXzIwNDA2OTk0NDMiLCJPUF83MzQwODE3MTYiLCJPUF80NTM5MjE4MjUiLCJPUF83MTUxMTUyNzIiLCJPUF82NzI5Mjg4NyIsIk9QXzE2MDM5NTM4NTgiLCJPUF8xNzQzMDQ0MzA1IiwiT1BfOTkzOTYyNDAzIiwiT1BfMTU3ODIxMTczOSIsIk9QXzI1NjIwMTkiLCJPUF8xODQwMDkwOTkyIiwiT1BfNDE1NjI2MzI5IiwiT1BfMTMxMTQ4MDk3IiwiT1BfMTc3NDc3NDczMSIsIk9QXzE4MjIwODE3NzIiLCJPUF83MjkxNDY4NDMiLCJPUF82MDA5MjI1NjEiLCJPUF82MjczMjEwNDUiLCJPUF8yMDkxMzM3OTIyIiwiT1BfNDc0NTk0NDAzIiwiT1BfMTk4OTk0MDM1MSIsIk9QXzM1NjI0MjY2OSIsIk9QXzM1NjA3Nzk5NSIsIk9QXzYyNTc3NDk4MyIsIk9QXzIxNzEyODM2NyIsIlJPTEVfQURNSU5JU1RSQVRPUiIsIk9QXzE1NDAwMTAyNDYiLCJPUF8xNjU3ODY0Njg2IiwiT1BfODEzNTM1MjIwIiwiT1BfOTk3ODg0MDg1IiwiT1BfMjk0MTgzNTIwIiwiT1BfNTYzMjI3MTc5IiwiT1BfMTc5NzU2ODIzNCIsIk9QXzgzNDYyODg1MCIsIk9QXzE5NzkwNjg5NzciLCJPUF8xNjU0NTEzMjYxIiwiT1BfMzIyOTQ3NTEwIiwiT1BfNzIxNDU2MDMzIiwiT1BfMTQ0NDM1NDg4IiwiT1BfNjQyMTQ1MjM4IiwiT1BfMTYxMzY5NzgwOSIsIk9QXzE0MDI5NTM1ODgiLCJPUF8xOTI0OTk4NTYzIiwiT1BfMTkwODM4MzQyNiIsIk9QXzIxMTk5NTYwNjQiXSwianRpIjoiOTQzYzVlOGQtNjVjZC00YmJhLTlmNjMtY2Y3MTRhNDQ2ZDdkIiwiY2xpZW50X2lkIjoiMDEwZTY1OWEtNDAwNS00NjEwLTk4ZjYtMDBiODIyZjQ3NThlIn0.JIQ7N_rqsbhSb1M9voFhbAJq9QmPoKbirZ2lV_AYkYM\"</span><span>,</span>\n    <span>\"expires_in\"</span><span>:</span> <span>43199</span><span>,</span>\n    <span>\"scope\"</span><span>:</span> <span>\"all\"</span><span>,</span>\n    <span>\"license\"</span><span>:</span> <span>\"herodotus-cloud\"</span><span>,</span>\n    <span>\"openid\"</span><span>:</span> <span>\"1\"</span><span>,</span>\n    <span>\"jti\"</span><span>:</span> <span>\"4bb54345-dd24-4347-8d26-655e5d4085f7\"</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><div><p>参数</p>\n<ul>\n<li>access_token：访问令牌（服务器端加密过的字符串）。</li>\n<li>refresh_token：刷新令牌（刷新令牌的字符串）</li>\n<li>expires_in：过期时间（令牌的过期时间）</li>\n</ul>\n</div>\n<h3 id=\"隐式模式验证\"> 隐式模式验证</h3>\n<p>有些 Web 应用是纯前端应用，没有后端。这时就不能用上面的方式了，必须将令牌储存在前端。RFC 6749 就规定了第二种方式，允许直接向前端颁发令牌。这种方式没有授权码这个中间步骤，所以称为（授权码）&quot;隐藏式&quot;（implicit）</p>\n<h4 id=\"第一步-客户端向资源端申请token\"> 第一步：客户端向资源端申请Token</h4>\n<p>在浏览器中输入如下的认证连接：</p>\n<div><pre><code><span>http<span>:</span></span><span><span>//</span><span>192.168.101.10</span><span><span>:</span><span>8847</span></span></span><span><span>/</span>eurynome-cloud-uaa<span>/</span>oauth<span>/</span>authorize</span><span><span>?</span><span><span>response_type</span>=<span>token</span></span><span>&amp;</span><span><span>client_id</span>=<span>010e659a-4005-4610-98f6-00b822f4758e</span></span><span>&amp;</span><span><span>redirect_uri</span>=<span>http://www.baidu.com</span></span><span>&amp;</span><span><span>scope</span>=<span>all</span></span></span>\n</code></pre>\n<div><span>1</span><br></div></div><div><p>参数</p>\n<ul>\n<li>response_type：必选。值固定为“token”。</li>\n<li>client_id：必选参数（第三方应用的标识ID，告诉服务器谁需要得到授权）</li>\n<li>state：Client提供的一个字符串，服务器会原样返回给Client。这个要自己实现，用于防止恶意攻击。</li>\n<li>redirect_uri：必选参数（授权成功后的重定向地址）</li>\n<li>scope：可选参数（表示授权范围）</li>\n</ul>\n</div>\n<h4 id=\"第二步-到认证服务器认证\"> 第二步：到认证服务器认证</h4>\n<p>在浏览器中输入上面的地址，会跳出如下登录界面。</p>\n<p><img src=\"/images/oauth/authorization-code-demo-01.png\" alt=\"流程1\" /></p>\n<p>输入用户名,密码和验证码进行用户验证。</p>\n<blockquote>\n<p>可以使用系统默认用户：system 密码：123456</p>\n</blockquote>\n<p>登录成功后，会跳转到授权页面进行授权，如下图所示：</p>\n<p><img src=\"/images/oauth/authorization-code-demo-02.png\" alt=\"流程2\" /></p>\n<h4 id=\"第三步-资源端转向客户端并传递token\"> 第三步：资源端转向客户端并传递token</h4>\n<p>授权成功后，就会跳转到一个新的地址，同时在地址的后面会跟随生成的token, 如下所示。这个地址就是系统中设置的 <code>redirect_uri</code></p>\n<div><pre><code><span>https<span>:</span></span><span><span>//</span><span>www.baidu.com</span></span><span><span>/</span></span><span><span>#</span>access_token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJsaWNlbnNlIjoiaGVyb2RvdHVzLWNsb3VkIiwidXNlcl9uYW1lIjoic3lzdGVtIiwib3BlbmlkIjoiMSIsInNjb3BlIjpbImFsbCJdLCJleHAiOjE2MzE2NjA5ODQsImF1dGhvcml0aWVzIjpbIk9QXzExNTk4MzkxNzUiLCJPUF8yMDY3MDA2OTYyIiwiT1BfMjAzODgxODY1IiwiT1BfMTgzMTkzMzI1NiIsIk9QXzM0NzEwODY4NCIsIk9QXzE1Mjk0OTk3MzQiLCJPUF8xNzkxNDgyODQwIiwiT1BfNTM5NzkwMTU0IiwiT1BfMTI5MTk4NjQyMCIsIk9QXzQxNDY2NTUwNSIsIk9QXzQ5MDczNzk0IiwiT1BfNzg3NjI3NTU1IiwiT1BfMTczNTYzMTgyNyIsIk9QXzEyNTYzNDY4ODciLCJPUF8xNTk1NjM4NiIsIk9QXzY1NDE2MjAxMSIsIk9QXzE2ODEwMjg3OTEiLCJPUF8xNTM4MzQzNDAiLCJPUF85NTI1NjU1NzAiLCJPUF8xOTg5ODY5MjkxIiwiT1BfMTcxODk4ODQwOCIsIk9QXzEyMTMxODc4MDkiLCJPUF85OTMxNjU1IiwiT1BfNzMwMTA1NDk5IiwiT1BfMTE5ODg3Njk4NSIsIk9QXzMyMjc3NjY4MSIsIk9QXzYyNTQ3MTI0OCIsIk9QXzIwNDA2OTk0NDMiLCJPUF83MzQwODE3MTYiLCJPUF80NTM5MjE4MjUiLCJPUF83MTUxMTUyNzIiLCJPUF82NzI5Mjg4NyIsIk9QXzE2MDM5NTM4NTgiLCJPUF8xNzQzMDQ0MzA1IiwiT1BfOTkzOTYyNDAzIiwiT1BfMTU3ODIxMTczOSIsIk9QXzI1NjIwMTkiLCJPUF8xODQwMDkwOTkyIiwiT1BfNDE1NjI2MzI5IiwiT1BfMTMxMTQ4MDk3IiwiT1BfMTc3NDc3NDczMSIsIk9QXzE4MjIwODE3NzIiLCJPUF83MjkxNDY4NDMiLCJPUF82MDA5MjI1NjEiLCJPUF82MjczMjEwNDUiLCJPUF8yMDkxMzM3OTIyIiwiT1BfNDc0NTk0NDAzIiwiT1BfMTk4OTk0MDM1MSIsIk9QXzM1NjI0MjY2OSIsIk9QXzM1NjA3Nzk5NSIsIk9QXzYyNTc3NDk4MyIsIk9QXzIxNzEyODM2NyIsIlJPTEVfQURNSU5JU1RSQVRPUiIsIk9QXzE1NDAwMTAyNDYiLCJPUF8xNjU3ODY0Njg2IiwiT1BfODEzNTM1MjIwIiwiT1BfOTk3ODg0MDg1IiwiT1BfMjk0MTgzNTIwIiwiT1BfNTYzMjI3MTc5IiwiT1BfMTc5NzU2ODIzNCIsIk9QXzgzNDYyODg1MCIsIk9QXzE5NzkwNjg5NzciLCJPUF8xNjU0NTEzMjYxIiwiT1BfMzIyOTQ3NTEwIiwiT1BfNzIxNDU2MDMzIiwiT1BfMTQ0NDM1NDg4IiwiT1BfNjQyMTQ1MjM4IiwiT1BfMTYxMzY5NzgwOSIsIk9QXzE0MDI5NTM1ODgiLCJPUF8xOTI0OTk4NTYzIiwiT1BfMTkwODM4MzQyNiIsIk9QXzIxMTk5NTYwNjQiXSwianRpIjoiNGJiNTQzNDUtZGQyNC00MzQ3LThkMjYtNjU1ZTVkNDA4NWY3IiwiY2xpZW50X2lkIjoiMDEwZTY1OWEtNDAwNS00NjEwLTk4ZjYtMDBiODIyZjQ3NThlIn0.BdTMSL2QTxyWe4Xs6piAS1Ldk23zUfhlG5_dA0xaNFA&amp;token_type=bearer&amp;expires_in=42511&amp;license=herodotus-cloud&amp;openid=1&amp;jti=4bb54345-dd24-4347-8d26-655e5d4085f7</span>\n</code></pre>\n<div><span>1</span><br></div></div><blockquote>\n<p>上面 URL 中，access_token参数就是令牌</p>\n</blockquote>\n<h3 id=\"密码模式验证\"> 密码模式验证</h3>\n<p>如果你高度信任某个应用，RFC 6749 也允许用户把用户名和密码，直接告诉该应用。该应用就使用你的密码，申请令牌，这种方式称为&quot;密码式&quot;（password）。</p>\n<blockquote>\n<p>Eurynome Cloud 前端就是使用密码模式进行登录</p>\n</blockquote>\n<p>直接使用如下地址获取Token即可</p>\n<div><pre><code><span>http<span>:</span></span><span><span>//</span><span>192.168.101.10</span><span><span>:</span><span>8847</span></span></span><span><span>/</span>eurynome-cloud-uaa<span>/</span>oauth<span>/</span>token</span>\n</code></pre>\n<div><span>1</span><br></div></div><p>操作如下图所示：</p>\n<p><img src=\"/images/oauth/authorization-code-demo-04.png\" alt=\"流程4\" /></p>\n<div><p>参数</p>\n<ul>\n<li>username：必选参数（登录用户名）</li>\n<li>password：必选参数（登录用户密码）</li>\n<li>grant_type：必选参数（固定值“password”）</li>\n<li>client_id：必选参数</li>\n<li>client_secret：必选参数</li>\n<li>scope：可选参数（表示授权范围）</li>\n</ul>\n</div>\n<h3 id=\"客户端凭证模式验证\"> 客户端凭证模式验证</h3>\n<p>这种模式直接根据client的id和密钥即可获取token，无需用户参与\n这种模式比较合适消费api的后端服务，比如拉取一组用户信息等</p>\n<p>直接使用如下地址获取Token即可</p>\n<div><pre><code><span>http<span>:</span></span><span><span>//</span><span>192.168.101.10</span><span><span>:</span><span>8847</span></span></span><span><span>/</span>eurynome-cloud-uaa<span>/</span>oauth<span>/</span>token</span>\n</code></pre>\n<div><span>1</span><br></div></div><p>操作如下图所示：</p>\n<p><img src=\"/images/oauth/authorization-code-demo-05.png\" alt=\"流程5\" /></p>\n<div><p>参数</p>\n<ul>\n<li>grant_type：必选参数（固定值“client_credentials”）</li>\n<li>client_id：必选参数</li>\n<li>client_secret：必选参数</li>\n<li>scope：可选参数（表示授权范围）</li>\n</ul>\n</div>\n",
      "image": "https://herodotus.cn/images/oauth/authorization-code-flow.png",
      "date_published": "2021-10-27T16:13:57.000Z",
      "date_modified": "2021-10-28T15:24:29.000Z",
      "authors": [
        {
          "name": "码匠君"
        }
      ],
      "tags": []
    },
    {
      "title": "前言",
      "url": "https://herodotus.cn/microservices/",
      "id": "https://herodotus.cn/microservices/",
      "content_html": "<h1 id=\"前言\"> 前言</h1>\n<div><p>说明</p>\n<p>介绍微服务相关技术内容</p>\n</div>\n",
      "date_published": "2021-10-27T16:13:57.000Z",
      "date_modified": "2021-10-28T15:24:29.000Z",
      "authors": [
        {
          "name": "码匠君"
        }
      ],
      "tags": []
    },
    {
      "title": "前言",
      "url": "https://herodotus.cn/monomer/",
      "id": "https://herodotus.cn/monomer/",
      "content_html": "<h1 id=\"前言\"> 前言</h1>\n<h2 id=\"athena-是什么\"> Athena 是什么？</h2>\n<ul>\n<li><strong>Eurynome Cloud Athena</strong> 是从 <strong>Eurynome Cloud</strong> 中提取出来的,可以独立运行的,基于OAuth2认证的,前后端分离的单体式后台管理脚手架。</li>\n<li><strong>Eurynome Cloud Athena</strong> 本质上就是<code>eurynome-cloud-oauth-starter</code>的应用。从pom中可以看到该工程核心依赖就是 <strong>Eurynome Cloud</strong> 中<code>eurynome-cloud-oauth-starter</code>。</li>\n<li><strong>Eurynome Cloud Athena</strong> 更多的是一个演示性工程，用来示例如何使用<code>eurynome-cloud-oauth-starter</code>，以及相关的配置参数是如何配置的。也可以完全不用照搬Athena工程，自己新建一个<code>Spring Boot</code>工程，添加<code>eurynome-cloud-oauth-starter</code>依赖和相应的配置也可以使用。</li>\n</ul>\n<h2 id=\"athena-不是什么\"> Athena 不是什么？</h2>\n<p><strong>Eurynome Cloud Athena</strong> 并不是一个完整的开源项目，其核心代码<code>eurynome-cloud-oauth-starter</code>，需要通过编译 <strong>Eurynome Cloud</strong> 生成（目前 <strong>Eurynome Cloud</strong> 核心包并没有提交至Maven中央仓库）。</p>\n<h2 id=\"为什么-athena-和-eurynome-cloud-共享代码\"> 为什么 Athena 和 Eurynome Cloud 共享代码？</h2>\n<p>不管是单独搭建基于<code>Spring Security</code>,<code>OAuth2</code>的后台管理脚手架，还是构建基于Spring Cloud的分布式微服务架构，<code>Spring Security</code>和<code>OAuth2</code>核心代码的应用方式都是不变的，可以是通用的，因此将<code>Security</code>和<code>OAuth2</code>以及其它通用的代码放在 <strong>Eurynome Cloud</strong> 中，编译后供 <strong>Eurynome Cloud Athena</strong> 使用。</p>\n<p>曾经也考虑过，在重新提取一个工程，专门放置通用代码。但是这种方式，额外多了一道编译手续，也不便于对 <strong>Eurynome Cloud</strong> 整个代码的了解和使用，因此放弃了这种方式。</p>\n<h2 id=\"为什么构建-athena\"> 为什么构建 Athena？</h2>\n<p>基于<code>Spring Cloud</code>和<code>Spring Cloud Alibaba</code>的微服务架构，已经成为应用建设的主流方案。但是不可否认的是，搭建一套微服务架构所需的基础架构越来越多，也越来越复杂，所需的配套资源也越来越大。仅仅是在开发电脑上搭建一套运行开发调试环境，其复杂度和所需的资源也不容小觑。而很多应用，特别是小型应用，在早期开发中或者用户量不大的前期完全没有必要上一整套微服务，额外增加复杂度。很多情况下一套单体的,前后端分离的后台就足以满足。</p>\n<p>因为以上的考虑，才构建的 <strong>Eurynome Cloud Athena</strong>。其实只要<code>Spring Security</code>和<code>OAuth2</code>核心代码写的足够通用，单体式架构就自然而然的产生了。</p>\n<p><strong>Eurynome Cloud Athena</strong> 不需要搭建<code>Nacos</code>,<code>ELK</code>,<code>Sentinel</code>,<code>Skywalking</code>等基础设施，只要一个数据库就可以独立运行，而且具备微服务架构除服务管理以外的所有功能。不仅编译和运行速度有几倍的提升，而且只要代码规范,分包合理，可以快速无缝迁移到微服务架构。这有助于在项目早期快速建设项目，方便开发人员在本地进行开发以及技术研究。</p>\n<p>如果你没有大量的时间和资源搭建微服务架构，那么就可以尝试使用 <strong>Eurynome Cloud Athena</strong>，可以从另一个角度快速,全面地了解 <strong>Eurynome Cloud</strong>。</p>\n",
      "date_published": "2021-10-27T16:13:57.000Z",
      "date_modified": "2021-10-28T15:24:29.000Z",
      "authors": [
        {
          "name": "码匠君"
        }
      ],
      "tags": []
    },
    {
      "title": "环境部署",
      "url": "https://herodotus.cn/monomer/deployment/",
      "id": "https://herodotus.cn/monomer/deployment/",
      "content_html": "<h1 id=\"环境部署\"> 环境部署</h1>\n<h2 id=\"后端运行\"> 后端运行</h2>\n<h3 id=\"_1-检出代码创建工程\"> [1]检出代码创建工程</h3>\n<p>具体操作与微服务版相同，参阅：<a href=\"./../guide/deployment.html#_1-检出代码创建工程\">检出代码创建工程</a></p>\n<h3 id=\"_2-创建数据库\"> [2]创建数据库</h3>\n<p>具体操作与微服务版相同，参阅：<a href=\"./../guide/deployment.html#_2-创建数据库\">创建数据库</a></p>\n<h3 id=\"_3-修改配置\"> [3]修改配置</h3>\n<p>根据自己的实际环境情况，修改 <code>application.yml</code> 中数据库以及Redis等相关配置。</p>\n<h3 id=\"_4-编译代码\"> [4]编译代码</h3>\n<p>具体操作与微服务版相同，参阅：<a href=\"./../guide/deployment.html#_6-编译代码\">编译代码</a></p>\n<h3 id=\"_5-数据库创建和数据初始化\"> [5]数据库创建和数据初始化</h3>\n<p>具体操作与微服务版相同，参阅：<a href=\"./../guide/deployment.html#_7-数据库创建和数据初始化\">数据库创建和数据初始化</a></p>\n<h2 id=\"前端运行\"> 前端运行</h2>\n<p>具体操作与微服务版相同，参阅：<a href=\"./../guide/deployment.html#前端运行\">环境部署</a></p>\n",
      "date_published": "2021-10-27T16:13:57.000Z",
      "date_modified": "2021-10-28T15:24:29.000Z",
      "authors": [
        {
          "name": "码匠君"
        }
      ],
      "tags": []
    },
    {
      "title": "Idea",
      "url": "https://herodotus.cn/others/idea/",
      "id": "https://herodotus.cn/others/idea/",
      "content_html": "<h1 id=\"idea\"> Idea</h1>\n<h2 id=\"_1-found-character-that-cannot-start-any-token-do-not-use-for-indentation\"> [1]found character '@' that cannot start any token. (Do not use @ for indentation)</h2>\n<p>启动服务时，出现以下错误</p>\n<div><pre><code><span>16</span><span>:</span><span>01</span><span>:</span><span>05.726</span> <span>[</span>main<span>]</span> ERROR <span><span>org<span>.</span>springframework<span>.</span>boot<span>.</span></span>SpringApplication</span> <span>-</span> <span>Application</span> run failed\n<span><span>org<span>.</span>yaml<span>.</span>snakeyaml<span>.</span>scanner<span>.</span></span>ScannerException</span><span>:</span> <span>while</span> scanning <span>for</span> the next token\nfound character <span>'@'</span> that cannot start any token<span>.</span> <span>(</span><span>Do</span> not use @ <span>for</span> indentation<span>)</span>\n in <span>'reader'</span><span>,</span> line <span>7</span><span>,</span> column <span>13</span><span>:</span>\n        active<span>:</span> <span>@profile.name</span>@\n                <span>^</span>\n\n\tat <span><span>org<span>.</span>yaml<span>.</span>snakeyaml<span>.</span>scanner<span>.</span></span>ScannerImpl</span><span>.</span><span>fetchMoreTokens</span><span>(</span><span>ScannerImpl</span><span>.</span>java<span>:</span><span>439</span><span>)</span>\n\tat <span><span>org<span>.</span>yaml<span>.</span>snakeyaml<span>.</span>scanner<span>.</span></span>ScannerImpl</span><span>.</span><span>checkToken</span><span>(</span><span>ScannerImpl</span><span>.</span>java<span>:</span><span>248</span><span>)</span>\n\tat <span><span>org<span>.</span>yaml<span>.</span>snakeyaml<span>.</span>parser<span>.</span></span>ParserImpl</span>$<span>ParseBlockMappingValue</span><span>.</span><span>produce</span><span>(</span><span>ParserImpl</span><span>.</span>java<span>:</span><span>633</span><span>)</span>\n\tat <span><span>org<span>.</span>yaml<span>.</span>snakeyaml<span>.</span>parser<span>.</span></span>ParserImpl</span><span>.</span><span>peekEvent</span><span>(</span><span>ParserImpl</span><span>.</span>java<span>:</span><span>165</span><span>)</span>\n\tat <span><span>org<span>.</span>yaml<span>.</span>snakeyaml<span>.</span>comments<span>.</span></span>CommentEventsCollector</span>$<span>1.</span><span>peek</span><span>(</span><span>CommentEventsCollector</span><span>.</span>java<span>:</span><span>59</span><span>)</span>\n\tat <span><span>org<span>.</span>yaml<span>.</span>snakeyaml<span>.</span>comments<span>.</span></span>CommentEventsCollector</span>$<span>1.</span><span>peek</span><span>(</span><span>CommentEventsCollector</span><span>.</span>java<span>:</span><span>45</span><span>)</span>\n\tat <span><span>org<span>.</span>yaml<span>.</span>snakeyaml<span>.</span>comments<span>.</span></span>CommentEventsCollector</span><span>.</span><span>collectEvents</span><span>(</span><span>CommentEventsCollector</span><span>.</span>java<span>:</span><span>140</span><span>)</span>\n\tat <span><span>org<span>.</span>yaml<span>.</span>snakeyaml<span>.</span>comments<span>.</span></span>CommentEventsCollector</span><span>.</span><span>collectEvents</span><span>(</span><span>CommentEventsCollector</span><span>.</span>java<span>:</span><span>119</span><span>)</span>\n\tat <span><span>org<span>.</span>yaml<span>.</span>snakeyaml<span>.</span>composer<span>.</span></span>Composer</span><span>.</span><span>composeScalarNode</span><span>(</span><span>Composer</span><span>.</span>java<span>:</span><span>221</span><span>)</span>\n\tat <span><span>org<span>.</span>yaml<span>.</span>snakeyaml<span>.</span>composer<span>.</span></span>Composer</span><span>.</span><span>composeNode</span><span>(</span><span>Composer</span><span>.</span>java<span>:</span><span>191</span><span>)</span>\n\tat <span><span>org<span>.</span>yaml<span>.</span>snakeyaml<span>.</span>composer<span>.</span></span>Composer</span><span>.</span><span>composeKeyNode</span><span>(</span><span>Composer</span><span>.</span>java<span>:</span><span>309</span><span>)</span>\n\tat <span><span>org<span>.</span>yaml<span>.</span>snakeyaml<span>.</span>composer<span>.</span></span>Composer</span><span>.</span><span>composeMappingChildren</span><span>(</span><span>Composer</span><span>.</span>java<span>:</span><span>300</span><span>)</span>\n\tat <span><span>org<span>.</span>yaml<span>.</span>snakeyaml<span>.</span>composer<span>.</span></span>Composer</span><span>.</span><span>composeMappingNode</span><span>(</span><span>Composer</span><span>.</span>java<span>:</span><span>288</span><span>)</span>\n\tat <span><span>org<span>.</span>yaml<span>.</span>snakeyaml<span>.</span>composer<span>.</span></span>Composer</span><span>.</span><span>composeNode</span><span>(</span><span>Composer</span><span>.</span>java<span>:</span><span>195</span><span>)</span>\n\tat <span><span>org<span>.</span>yaml<span>.</span>snakeyaml<span>.</span>composer<span>.</span></span>Composer</span><span>.</span><span>composeValueNode</span><span>(</span><span>Composer</span><span>.</span>java<span>:</span><span>313</span><span>)</span>\n\tat <span><span>org<span>.</span>yaml<span>.</span>snakeyaml<span>.</span>composer<span>.</span></span>Composer</span><span>.</span><span>composeMappingChildren</span><span>(</span><span>Composer</span><span>.</span>java<span>:</span><span>304</span><span>)</span>\n\tat <span><span>org<span>.</span>yaml<span>.</span>snakeyaml<span>.</span>composer<span>.</span></span>Composer</span><span>.</span><span>composeMappingNode</span><span>(</span><span>Composer</span><span>.</span>java<span>:</span><span>288</span><span>)</span>\n\tat <span><span>org<span>.</span>yaml<span>.</span>snakeyaml<span>.</span>composer<span>.</span></span>Composer</span><span>.</span><span>composeNode</span><span>(</span><span>Composer</span><span>.</span>java<span>:</span><span>195</span><span>)</span>\n\tat <span><span>org<span>.</span>yaml<span>.</span>snakeyaml<span>.</span>composer<span>.</span></span>Composer</span><span>.</span><span>composeValueNode</span><span>(</span><span>Composer</span><span>.</span>java<span>:</span><span>313</span><span>)</span>\n\tat <span><span>org<span>.</span>yaml<span>.</span>snakeyaml<span>.</span>composer<span>.</span></span>Composer</span><span>.</span><span>composeMappingChildren</span><span>(</span><span>Composer</span><span>.</span>java<span>:</span><span>304</span><span>)</span>\n\tat <span><span>org<span>.</span>yaml<span>.</span>snakeyaml<span>.</span>composer<span>.</span></span>Composer</span><span>.</span><span>composeMappingNode</span><span>(</span><span>Composer</span><span>.</span>java<span>:</span><span>288</span><span>)</span>\n\tat <span><span>org<span>.</span>yaml<span>.</span>snakeyaml<span>.</span>composer<span>.</span></span>Composer</span><span>.</span><span>composeNode</span><span>(</span><span>Composer</span><span>.</span>java<span>:</span><span>195</span><span>)</span>\n\tat <span><span>org<span>.</span>yaml<span>.</span>snakeyaml<span>.</span>composer<span>.</span></span>Composer</span><span>.</span><span>getNode</span><span>(</span><span>Composer</span><span>.</span>java<span>:</span><span>115</span><span>)</span>\n\tat <span><span>org<span>.</span>yaml<span>.</span>snakeyaml<span>.</span>constructor<span>.</span></span>BaseConstructor</span><span>.</span><span>getData</span><span>(</span><span>BaseConstructor</span><span>.</span>java<span>:</span><span>135</span><span>)</span>\n\tat <span><span>org<span>.</span>springframework<span>.</span>boot<span>.</span>env<span>.</span></span>OriginTrackedYamlLoader</span>$<span>OriginTrackingConstructor</span><span>.</span><span>getData</span><span>(</span><span>OriginTrackedYamlLoader</span><span>.</span>java<span>:</span><span>99</span><span>)</span>\n\tat <span><span>org<span>.</span>yaml<span>.</span>snakeyaml<span>.</span></span>Yaml</span>$<span>1.</span><span>next</span><span>(</span><span>Yaml</span><span>.</span>java<span>:</span><span>512</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br></div></div><p>该问题主要是由于 <code>bootstrap.yml</code> 中使用了 <code>@ @</code> 变量，而在 <code>target</code> 目录中生成的 <code>bootstrap.yml</code>中的 <code>@ @</code> 变量没有被正确替换。</p>\n<h3 id=\"解决办法\"> 解决办法</h3>\n<h4 id=\"办法一\"> 办法一</h4>\n<p>使用 <code>mvn install</code> 或 <code>mvn package</code> 命令重新编译工程。</p>\n<h4 id=\"办法二\"> 办法二</h4>\n<p>在IDEA中，打开<code>Maven</code>面板，点击刷新按钮。如下图所示：</p>\n<p><img src=\"/images/idea/refresh-maven.png\" alt=\"架构图\" /></p>\n<h2 id=\"_2-error-running-xxxapplication-command-line-is-too-long-shorten-the-command-line-via-jar-manifest-or-via-a-classpath-file-and-rerun\"> [2]Error running XXXApplication. Command line is too long. Shorten the command line via JAR manifest or via a classpath file and rerun</h2>\n<p>可以查询到的解决版本，基本上是通过修改 <code>.idea</code> 文件夹下的 <code>idea/workspace.xml</code> 文件解决。</p>\n<p>这种办法并不是特比优雅，而且在最新的版本中不一定会起效。</p>\n<p>比较简单的办法，是通过 IDEA 界面，修改配置即可以解决。具体操作如下：</p>\n<h3 id=\"步骤一\"> 步骤一</h3>\n<p>在 IDEA 工具栏中，找到 <code>Edit Configurations ...</code>，如下图所示。</p>\n<p><img src=\"/images/idea/application-run-01.png\" alt=\"Edit01\" /></p>\n<h3 id=\"步骤二\"> 步骤二</h3>\n<p>在弹出的 <code>Edit Configurations ...</code> 对话框中，首先找到运行时会出现 <code>Command line is too long</code> 应用名称。</p>\n<p>以 <code>UpmsApplication</code> 为例，选中该应用，在右侧面板中，找到 <code>Environment --&gt; Shortent command line</code>, 将该设置的值修改为 <code>JAR manifest</code> 即可解决。如下图所示：</p>\n<p><img src=\"/images/idea/application-run-02.png\" alt=\"Edit01\" /></p>\n",
      "image": "https://herodotus.cn/images/idea/refresh-maven.png",
      "date_modified": "2021-10-28T15:26:07.700Z",
      "authors": [
        {
          "name": "码匠君"
        }
      ],
      "tags": []
    },
    {
      "title": "MySQL 常见问题",
      "url": "https://herodotus.cn/others/mysql/",
      "id": "https://herodotus.cn/others/mysql/",
      "content_html": "<h1 id=\"mysql-常见问题\"> MySQL 常见问题</h1>\n<h2 id=\"_1-java-sql-sqlsyntaxerrorexception-duplicate-key-name-xxx-idx\"> [1]java.sql.SQLSyntaxErrorException: Duplicate key name 'xxx_idx'</h2>\n<p><code>Eurynome Cloud</code> 默认使用<code>Spring Data JPA</code>进行基础功能的编写, 采用 <code>Hibernate</code> （<code>JPA</code>的一种实现）提供的 <code>ddl-auto</code>进行基础表的创建和更新。</p>\n<div><p>提示</p>\n<p>什么是 <code>Spring Data JPA</code>， 参见：基础知识章节，<a href=\"./../basic-knowledge/spring-data-jpa.html\">Spring Data JPA</a></p>\n<p>ddl-auto 怎么用，参见：更换数据库章节，[spring-boot-starter-data-jpa 更换数据库方式](../documents/更换数据库.md#spring-boot-starter-data-jpa 更换数据库方式)</p>\n</div>\n<h3 id=\"hibernate方言\"> Hibernate方言</h3>\n<p>在 <code>Hibernate</code> 底层依然使用<code>SQL</code>语句来执行数据库操作，虽然所有关系型数据库都支持使用标准 <code>SQL</code> 语句，但所有数据库都对标准 <code>SQL</code> 进行了一些扩展，所以在语法细节上存在一些差异，因此 <code>Hibernate</code> 需要根据数据库来识别这些差异。假如系统需要数据库的变换时，那么用 <code>hibernate</code> 的话就只需要改一改配置文件（修改连接字符串,驱动类,方言等），而用传统的<code>jdbc</code>时，那么<code>SQL</code>语言可能就要有很多改动。（略微重复了）</p>\n<p>Hibernate 方言为实现<code>HQL</code>语句向不同数据库的 <code>SQL</code> 语句转换时，解决不同数据库之间的差异而制定的一套”规范”。</p>\n<p>举例来说，我们在<code>MySQL</code>数据库里进行分页查询，只需使用<code>limit</code>关键字就可以了；而标准SQL并不支持<code>limit</code>关键字，例如Oracle则需要使用行内视图的方式来进行分页。同样的应用程序，当我们在不同数据库之间迁移时，底层数据库的访问细节会发生改变，而 <code>Hibernate</code> 也为这种改变做好了准备，现在我们需要做的是：告诉Hibernate应用程序的底层即将使用哪种数据库——这就是Hibernate方言。</p>\n<h3 id=\"说明\"> 说明</h3>\n<p>因为不同数据库自身的特殊性，那么不同数据库方言的实现逻辑也不能完全相同。出现这个问题是因为MySQL 方言自身所导致，如果已经存在外键，那么就会抛出错误，但是不会影响实际使用。PostgreSQL方案就不会出现问题。</p>\n<p><strong>解决的办法是：</strong></p>\n<p>在使用MySQL数据库时，在首次进行数据库表创建时，需要将<code>eurynome-cloud-environment.yaml</code>配置中的<code>herodotus.switch.database.ddl-auto</code>修改为<code>create</code>。当所有的表创建成功后，将<code>herodotus.switch.database.ddl-auto</code>值修改为<code>none</code>。那么在次启动就不会出现这个问题。</p>\n",
      "date_published": "2021-10-27T16:13:57.000Z",
      "date_modified": "2021-10-28T15:24:29.000Z",
      "authors": [
        {
          "name": "码匠君"
        }
      ],
      "tags": []
    },
    {
      "title": "Nacos 常见问题",
      "url": "https://herodotus.cn/others/nacos/",
      "id": "https://herodotus.cn/others/nacos/",
      "content_html": "<h1 id=\"nacos-常见问题\"> Nacos 常见问题</h1>\n<h2 id=\"_1-failover-switch-is-not-found-failover00-00-000-vipsrv-failover-switch-000-00-00\"> [1]failover switch is not found, failover00-00---000-VIPSRV_FAILOVER_SWITCH-000---00-00</h2>\n<p>将Nacos日志设置到Debug级别，在服务运行起来之后，就会发现控制台持续输出以上Debug信息。</p>\n<div><p>说明</p>\n<p>这不是代码Bug，而是Nacos自身机制，想要详细了解请阅读Nacos源代码或自行百度。</p>\n</div>\n<p>这是Nacos Client本地缓存及故障转移机制。在Nacos源代码中，ServiceInfoHolder的构造方法中，会初始化一个FailoverReactor类。FailoverReactor的作用便是用来处理故障转移的。</p>\n<p>FailoverReactor的构造方法会拼接故障根目录：${user.home}/nacos/naming/public/failover，其中public也有可能是其他的自定义命名空间；</p>\n<p>主要逻辑就是：</p>\n<ul>\n<li>\n<p>基本操作就是读取failover目录，查找故障转移【开关】文件为名为“failover00-00---000-VIPSRV_FAILOVER_SWITCH-000---00-00”。</p>\n</li>\n<li>\n<p>如果故障转移文件不存在，则直接返回，不断输出Debug信息。</p>\n</li>\n<li>\n<p>如果故障转移文件存在，比较文件修改时间，如果已经修改，则获取故障转移文件中的内容。</p>\n</li>\n<li>\n<p>故障转移文件中存储了0和1标识。0表示关闭，1表示开启。</p>\n</li>\n<li>\n<p>当为开启状态时，执行线程FailoverFileReader。</p>\n</li>\n<li>\n<p><strong>解决办法</strong></p>\n</li>\n</ul>\n<ol>\n<li>将Nacos日志级别调整为INFO级别以上。</li>\n<li>手动在<code>${user.home}/nacos/naming/public</code>目录下，新建文件<code>failover00-00---000-VIPSRV_FAILOVER_SWITCH-000---00-00</code>。</li>\n</ol>\n",
      "date_published": "2021-10-27T16:13:57.000Z",
      "date_modified": "2021-10-28T15:24:29.000Z",
      "authors": [
        {
          "name": "码匠君"
        }
      ],
      "tags": []
    },
    {
      "title": "前言",
      "url": "https://herodotus.cn/others/",
      "id": "https://herodotus.cn/others/",
      "content_html": "<h1 id=\"前言\"> 前言</h1>\n<div><p>说明</p>\n<p>本部分会梳理,总结使用者经常提出的一些问题，形成文档方便大家查阅，以便帮助使用者快速定位和解决问题。</p>\n<p>每个使用者所使用的微服务基础环境都不可能完全相同，因此，可能存在无法全面覆盖,满足所有场景的情况。</p>\n<p>同时，文档中的解决办法，只是作者根据自己的情况进行解决的办法，可能不是最优的解决办法。</p>\n<p>所以，如果发现了使用上的问题,或者针对某些问题有更优的解决办法，欢迎广大使用者提<a href=\"https://gitee.com/herodotus/issues\" target=\"_blank\" rel=\"noopener noreferrer\">【Issue】</a></p>\n</div>\n",
      "date_published": "2021-10-27T16:13:57.000Z",
      "date_modified": "2021-10-28T15:24:29.000Z",
      "authors": [
        {
          "name": "码匠君"
        }
      ],
      "tags": []
    },
    {
      "title": "Redis 常见问题",
      "url": "https://herodotus.cn/others/redis/",
      "id": "https://herodotus.cn/others/redis/",
      "content_html": "<h1 id=\"redis-常见问题\"> Redis 常见问题</h1>\n<h2 id=\"_1-本地redis使用127-0-0-1可以访问-使用ip地址无法访问\"> [1]本地Redis使用127.0.0.1可以访问，使用IP地址无法访问</h2>\n<p>Redis默认只允许通过127.0.0.1访问，这是其自身的安全防护机制。如果想要使用IP地址进行访问，需要将其保护设置打开。</p>\n<ul>\n<li><strong>Windows 版</strong></li>\n</ul>\n<p>找到<code>redis.windows.conf</code>配置文件</p>\n<ol>\n<li>\n<p>将<code>protected-mode</code> 参数改为no。</p>\n</li>\n<li>\n<p>注释掉<code>bind 127.0.0.1</code></p>\n</li>\n<li>\n<p>重启redis服务</p>\n</li>\n</ol>\n<p><img src=\"/images/redis/bind-ip.png\" alt=\"Redis 密码\" /></p>\n<ul>\n<li><strong>Linux</strong></li>\n</ul>\n<ol>\n<li>\n<p>linux对应的是<code>redis.conf</code>文件</p>\n</li>\n<li>\n<p>修改还是和windows一样</p>\n</li>\n<li>\n<p>修改完成重启服务</p>\n</li>\n</ol>\n<h2 id=\"_2-io-lettuce-core-rediscommandexecutionexception-noauth-authentication-required\"> [2]io.lettuce.core.RedisCommandExecutionException: NOAUTH Authentication required</h2>\n<p>出现该错误，是由于Redis中设置密码，而代码中未读到Redis密码或配置文件中没有配置密码导致的。</p>\n<ul>\n<li><strong>解决办法</strong>：</li>\n</ul>\n<ol>\n<li>首先用<code>Redis</code>客户端，比如：<code>redis-desktop-manager</code>，进行<code>Redis</code>的连接测试。如果无法连接，那么请检查密码输入是否正确,本地网络等相关环境；如果可以正常连接，请进行下一步。</li>\n<li>检查<code>Nacos</code>中，<code>Redis</code>相关配置是否配置了密码。一定要注意格式，检查格式缩进是否正确,<code>yaml</code>配置“：”后面是否空了一格。如果确定配置正确，请进行下一步。</li>\n<li>检查服务是否可以正常访问到<code>Nacos</code>服务器，是否可以正确读取<code>Nacos</code>中配置。</li>\n</ol>\n<p>以上操作均确保无误应该就可以正常使用了，如果还有问题，那么就请尽可能的准备详尽的信息，在Gitee中提<a href=\"https://gitee.com/herodotus/issues\" target=\"_blank\" rel=\"noopener noreferrer\">Issue</a></p>\n<h2 id=\"_3-noauth-hello-must-be-called-with-the-client-already-authenticated-otherwise-the-hello-auth-user\"> [3]NOAUTH HELLO must be called with the client already authenticated, otherwise the HELLO AUTH ＜user＞</h2>\n<p>使用<code>spring boot data redis</code> 链接<code>redis sentinel</code>集群，会报此错。</p>\n<p>原因是因为<code>redis sentinel</code>集群的<code>sentinel</code>配置文件没有配置密码，<code>sentinel</code>配置密码的方式和redis的密码配置方式一样，配置文件中加上<code>requirepass &lt;密码&gt;</code> 就行。</p>\n<p>另外，<code>sentinel</code>中的<code>sentinel auth-pass &lt;master&gt; &lt;pass&gt;</code> 不是给<code>sentinel</code>配置密码，而是<code>sentinel</code>链接<code>redis master</code>的密码</p>\n",
      "image": "https://herodotus.cn/images/redis/bind-ip.png",
      "date_published": "2021-10-27T16:13:57.000Z",
      "date_modified": "2021-10-28T15:24:29.000Z",
      "authors": [
        {
          "name": "码匠君"
        }
      ],
      "tags": []
    },
    {
      "title": "更新日志",
      "url": "https://herodotus.cn/others/update-log/",
      "id": "https://herodotus.cn/others/update-log/",
      "content_html": "<h1 id=\"更新日志\"> 更新日志</h1>\n<h2 id=\"v2-5-6-0\"> v2.5.6.0</h2>\n<ol>\n<li>Spring Boot 版本升级至 2.5.6</li>\n<li>优化自定义多级缓存，对不同的 JPA 实体（数据表）设置不同的缓存时间，支持使用 Spring Boot Yml 配置，。支持 Duration 时间表达式，配置更灵活方便，提升自定义多级缓存的可控性。</li>\n<li>使用基于 Caffeine 和 Redis 的多级缓存，实现 Mybatis 自定义二级缓存，让 Mybatis 的数据缓存也可以支持分布式，同时降低数据缓存频繁访问 Redis 问题。</li>\n</ol>\n<h2 id=\"v2-5-5-70\"> v2.5.5.70</h2>\n<ul>\n<li>\n<p>重大更新</p>\n<ol>\n<li>在现有架构基础之上，集成 Redisson 客户端。与 Spring Data Redis 同时使用，支持 Redisson 与 Lettuce 或 Jedis 共存。</li>\n<li>重构核心包 eurynome-cloud-data 内主要 Configuration 代码。让各个 Configuration 职责更清晰,代码更内聚，更加便于理解,使用及扩展。</li>\n<li>增加 WebSocket 核心代码模块，全面使用STOMP上层协议，支持 WebSocket 集群 Session共享,信息广播及点对点发送,在线统计，可方便拓展断开重连,心跳机制。</li>\n</ol>\n</li>\n<li>\n<p>其它更新</p>\n<ol>\n<li>前端工程升级大量依赖包版本，重新编译生成组件库</li>\n<li>SpringDoc 升级至 1.5.12</li>\n<li>Hutool 升级至 5.7.15</li>\n<li>JustAuth 升级至 1.16.5</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"v2-5-5-60\"> v2.5.5.60</h2>\n<ol>\n<li>整合职责相近代码包，删除eurynome-cloud-common代码包，让各个代码包职责更明晰,逻辑更清楚。</li>\n<li>增加开发环境配置基础知识文档，帮助萌新少走弯路，可以更快地投入到系统的使用和代码研究学习的过程中来。</li>\n<li>依赖组件升级\n<ul>\n<li>Hutool 升级至 5.7.14</li>\n<li>JustAuth 升级至 1.6.5</li>\n<li>Camunda 升级至 7.16.0</li>\n<li>okhttps 升级至 3.2.0</li>\n<li>bce-java-sdk 升级至 0.10.179</li>\n<li>jpush-client 升级至 3.5.3</li>\n</ul>\n</li>\n<li>Camunda 数据库脚本升级至 7.16.0</li>\n</ol>\n<h2 id=\"v2-5-5-50\"> v2.5.5.50</h2>\n<ol>\n<li>新增 Social Authentication 自定义授权模式方式，替代传统Filter过滤器方式，优化手机验证码,微信小程序,第三方认证的集成与Token的分派。代码更加简洁易于维护，解决了第三方认证游离于 OAuth 2 管控体系之外的问题。</li>\n<li>本着“高内聚,低耦合”的原则，调整代码，优化代码分包。提升代码分包的合理性，降低各代码包之间的耦合性。</li>\n<li>清除大量无用代码。</li>\n<li>前端代码升级大量依赖包版本，重新编译库。</li>\n<li>新增 Social Authentication 授权模式配置功能。</li>\n<li>回滚compression-webpack-plugin组件版本，解决高版本运行错误问题。</li>\n<li>补充在线文档IDEA使用常见问题章节。</li>\n<li>解决 MySQL 数据更新脚本数据类型不兼容问题</li>\n</ol>\n<h2 id=\"v2-5-5-40\"> v2.5.5.40</h2>\n<ol>\n<li>简化 OAuth2 资源服务器 ResourceServerConfigure 配置，代码更简洁规范。</li>\n<li>进一步融合 OAuth2 错误体系，解决 OAuth2 部分错误提示与系统自定义错误体系不一致,不融合的问题。</li>\n<li>解决包含路径参数的接口，可以跳过鉴权机制直接访问问题</li>\n<li>解决人员与用户 @OneToOne 映射，由Jackson 反序列化实体导致 JPA 保存或修改失败问题。</li>\n<li>优化接口统一信息反馈类别，新增空数据信息结果反馈，让信息反馈内容更加友好</li>\n<li>补充常用正则表达式库</li>\n<li>优化人员管理,角色管理关键信息异步校验功能，解决人员管理，使用枚举作为数据类型类型导致的修改数据错误问题。</li>\n<li>新增为组织机构人员分配默认用户功能。</li>\n<li>新增系统默认角色配置功能。支持机构人员,手机验证码,微信小程序,QQ,微博,百度,微信开放平台,微信公众号,企业微信二维码,企业微信网页,钉钉,钉钉账号,阿里云,淘宝,支付宝,Teambition,华为,飞书,京东,抖音,今日头条,小米,人人,美团,饿了么,酷家乐,喜马拉雅,码云,开源中国,Github,Gitlab,Stackoverflow,Coding,谷歌,微软,脸书,领英,推特,亚马逊,Slack,Line,Okta,Pinterest等多种途径或第三方登录默认角色的配置。</li>\n</ol>\n<h2 id=\"v2-5-5-30\"> v2.5.5.30</h2>\n<ol>\n<li>Debezimu 升级至 1.7.0.Final</li>\n<li>优化统一结果返回实体封装，使用更加便捷。</li>\n<li>使用统一结果返回实体新接口，替换已有代码。</li>\n<li>优化接口数据前后端加密传输机制，全面支持使用 Spring @RequestParam 注解接口数据加解密。</li>\n<li>统一使用 @RequestParam 注解接口加解密方式，改进 OAuth 2 密码模式，用户名,密码参数加密，不再使用传统Filter方式，代码更加简洁规范清晰。</li>\n<li>重新调整 WebMvc 配置核心代码，依赖关系更合理，代码逻辑更清晰。</li>\n<li>优化完善前端用户管理相关功能。</li>\n<li>增加基于 VeeValidate 组件的服务端异步校验机制</li>\n</ol>\n<h2 id=\"v2-5-5-20\"> v2.5.5.20</h2>\n<ul>\n<li>\n<p>重大更新</p>\n<ol>\n<li>Spring Boot Admin 升级至 2.5.2</li>\n<li>基于最新版Axios定义，所有Delete接口，修改为路径参数形式</li>\n<li>混合 RSA(非对称) 和 AES(对称加密) 算法，基于自定义注解，设计接口数据前后端加密传输机制。</li>\n<li>设计自定义数据传输 Session，规避 Vue Session 变化问题。基于自定义Session，实现 AES KEY 动态生成,加密传输,一人一钥的安全机制，提高系统安全性。</li>\n<li>实现 OAuth 2 密码模式，用户名,密码参数加密传输。</li>\n</ol>\n</li>\n<li>\n<p>其它更新</p>\n<ol>\n<li>修复 Spring Validation 错误信息不会抛出，循环引用问题。</li>\n<li>前端 Utils 工具包，新增加密算法模块</li>\n<li>基于最新版Axios定义，优化 Axios 请求通用代码</li>\n<li>实现前端 node-rsa 包 RSA 算法，与后端 Hutool SecureUtil RSA 算法互相加,解密。</li>\n</ol>\n</li>\n<li>\n<p>依赖包版本升级</p>\n<ol>\n<li>Guava 升级至 31.0.1-jre</li>\n<li>SpringDoc 升级至 1.5.11</li>\n<li>Mybatis Plus Generator 升级至 3.5.1</li>\n<li>前端工程升级大量依赖包</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"v2-5-5-10\"> v2.5.5.10</h2>\n<ol>\n<li>解决 OAuth2 自带业务表通过 Spring Data JPA 自动创建，字段名变化为小写问题。</li>\n<li>完善前端 Camnuda 工作流编辑器组件功能。</li>\n<li>完善前端部分功能，解决已知问题。</li>\n<li>更新在线文档，补充前端工程详细介绍。</li>\n</ol>\n<h2 id=\"v2-5-5-0\"> v2.5.5.0</h2>\n<ul>\n<li>\n<p>重大更新</p>\n<ol>\n<li>Spring Boot 升级至 2.5.5</li>\n<li>Spring Cloud 升级至 2020.0.4</li>\n<li>大幅改进系统数据库表和数据初始化方式，实现OAuth2业务表自动创建，取消使用脚本的创建方式，提升便捷性</li>\n<li>新增人力资源管理相关功能，功能和模型设计实现与Camunda用户体系统一。便于用户体系数据的同步和管理。</li>\n<li>基于rollup,lerna 和 yarn workspaces，以 monorepo 方式重新构建前端工程。新版前端工程是以Vue2,Typescript开发的，组件库式的前端功能。代码更清晰,组件化和重用化程度更高。为升级至Vue3做前序铺垫。</li>\n</ol>\n</li>\n<li>\n<p>其它更新</p>\n<ol>\n<li>解决Skywalking UI连接Skywalking OAP Server出错问题。</li>\n<li>修改防刷机制的默认配置</li>\n<li>重新梳理错误体系，优化错误信息，错误提示更加友好。</li>\n<li>解决单体版对Basic模式认证跨域拦截的问题</li>\n<li>实现OAuth2 Password模式部分参数加密传输方式，提升系统安全性。</li>\n<li>修复老版本前端工程已知问题。</li>\n<li>在线文档同步更新。</li>\n</ol>\n</li>\n<li>\n<p>依赖包版本升级</p>\n<ol>\n<li>Hutool 升级至 5.7.13</li>\n<li>okhttps 升级至 3.1.5</li>\n<li>weixin-java-miniapp 升级至 4.1.9.B</li>\n<li>JustAuth 升级至 1.16.4</li>\n<li>jasypt-spring-boot-starter 升级至 3.0.4</li>\n<li>mybatis-plus-boot-starter 升级至3.4.3.4</li>\n<li>dysmsapi20170525 升级至 2.0.5</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"v2-5-4-140\"> v2.5.4.140</h2>\n<ol>\n<li>优化Antisamy通用代码，提升Xss分析西能，去除严格拦截导致的JSON解析错误。</li>\n<li>解决本地权限缓存并发写入冲突，抛出com.esotericsoftware.kryo.KryoException: java.util.ConcurrentModificationException问题。</li>\n<li>解决OAuth Starter引入Upms Logic 重复导入权限数据问题。</li>\n<li>修改默认验证码字体配置</li>\n<li>去除无用依赖包</li>\n<li>新增MySQL57数据库切换配置。更新Nacos 配置SQL脚本，增加最新导入包。</li>\n<li>新增Camunda 官方脚本</li>\n<li>优化数据导入脚本</li>\n</ol>\n<h2 id=\"v2-5-4-130\"> v2.5.4.130</h2>\n<ol>\n<li>修复单体版Knife4j依赖错误问题</li>\n<li>修复单体版配置错误问题</li>\n<li>增加Gitee流程模版</li>\n<li>修复OAuth2自定义confirm_access.html,error.html,login.html页面，数据类型编译错误。</li>\n<li>优化自定义页面显示内容，增加Exception StackTrace输出</li>\n<li>修复XssUtils校验出错问题。</li>\n<li>优化ResourceServer安全配置</li>\n<li>修复OAuth2 四种模式中授权码模式（Authorization Code）,隐式授权模式（Implicit Grant）模式出错问题。</li>\n<li>解决前端控制台出错问题</li>\n<li>更新在线文档，增加OAuth2 四种模式验证说明</li>\n</ol>\n<h2 id=\"v2-5-4-120\"> v2.5.4.120</h2>\n<ol>\n<li>使用Springdoc全面替换Springfox，配置更灵活,配置更多样</li>\n<li>Swagger文档注解全面升级为支持OpenAPI</li>\n<li>使用Springdoc重构文档聚合功能，支持聚合查阅和服务独立查阅。Knife4j同步升级至3.0.3版本。</li>\n<li>Swagger文档默认支持OAuth2 Password,Authorization Code 两种认证流程</li>\n<li>整合Camunda Engine Rest 与Swagger，实现Camunda API接口文档查阅，支持聚合查阅。</li>\n<li>修复Bpmn服务默认启动Tomcat问题。</li>\n<li>升级前端依赖包版本</li>\n<li>更新Nacos配置文件及导入包</li>\n<li>更新在线文档</li>\n</ol>\n<h2 id=\"v2-5-4-110\"> v2.5.4.110</h2>\n<ol>\n<li>重新构建项目文档体系，使用纯静态页面，替代已有 Gitee Wiki 文档。优化文档结构，提升文档阅读体验。提供全文搜索，便于文档查阅。支持文档独立部署，方便使用者搭建独立的文档服务查阅。</li>\n<li>更换Nacos导入包，解决上一版本导入包导入重复问题</li>\n<li>Update Readme</li>\n</ol>\n<h2 id=\"v2-5-4-100\"> v2.5.4.100</h2>\n<ol>\n<li>重新梳理所有Nacos配置，提取共性配置至统一配置文件，优化配置属性结构和归类，便于参数修改，降低维护复杂度</li>\n<li>重构数据库相关Nacos配置，优化Maven,Nacos多环境配置与数据库切换的联动性，让数据库切换所需修改的参数更少，切换更顺滑</li>\n<li>解决eurynome-cloud-management编译出现的Failed to execute goal org.apache.maven.plugins:maven-resources-plugin:3.2.0:resources (default-resources) on 4. project XXXX: Input length = 1 -&gt; [Help 1]错误</li>\n<li>解决Redis设置密码后，无法连接出现 NOAUTH Authentication required 错误</li>\n<li>增加MySQL数据库默认数据初始化脚本</li>\n<li>增加最新版Nacos配置导入包</li>\n<li>修复前端UI申请APPKEY页面错误</li>\n<li>修复前端UI切换至单体版后，连接错误问题。</li>\n<li>升级前端UI依赖包版本。</li>\n<li>同步更新相关文档，补充新建子模块,常见问题等部分文档。</li>\n</ol>\n<h2 id=\"v2-5-4-90\"> v2.5.4.90</h2>\n<ol>\n<li>使用Mybatis Plus全面替换已有Mybatis，与Spring Boot Data JPA共存且支持同时使用。使用任何技术都可以无障碍的进行业务代码编写。</li>\n<li>整合Mybatis Plus和Spring Boot Data JPA更换数据库配置属性，一处修改即可以同时修改Mybatis Plus和Spring Boot Data JPA使用数据库类型。</li>\n<li>新增接口XSS脚本攻击过滤机制，同时支持请求参数和JSON请求体过滤。采用Ebay XSS过滤模型，进一步提升防控能力。</li>\n<li>新增SQL 注入攻击防控机制。</li>\n<li>解决eurynome-cloud-gateway和eurynome-cloud-management服务启动调用Kafka问题。</li>\n<li>解决CacheConfigException错误问题，在错误体系中增加配置参数不合理提醒，让信息反馈更加友好。</li>\n<li>解决Spring Boot Admin 不支持Java 8 时间类型问题。</li>\n<li>解决Spring Boot Admin 不显示 Git Properties 信息问题。</li>\n<li>解决修改Redis密码配置生效问题</li>\n<li>梳理dependencies依赖包，对已有依赖进行进行更合理的分类，更加便于依赖包的找寻和维护。</li>\n<li>升级依赖包版本\n<ul>\n<li>spring-boot-admin 升级至 2.5.1</li>\n<li>git-commit-id-plugin 升级至 4.9.10</li>\n<li>docker-maven-plugin 升级至 0.37.0</li>\n<li>hutool 升级至 5.7.10</li>\n<li>okhttps 升级至 3.1.4</li>\n<li>JustAuth 升级至1.16.3</li>\n<li>aliyun-java-sdk-core 升级至 4.5.25</li>\n<li>baiducloud-java-sdk 升级至 0.10.175</li>\n<li>aliyun-java-sdk-oss 升级至 3.13.1</li>\n<li>cn.jpush.api 升级至 3.5.2</li>\n</ul>\n</li>\n<li>规范项目文档，增加系统部署,数据库切换等多部分内容</li>\n<li>增加Nacos配置导入包，在没有自动部署功能支持的情况下，也可以更加方便的导入配置。</li>\n<li>替换 UI SweetAlert 过期方法，解决弹出框不会关闭问题</li>\n<li>解决授权码模式（authorization code）验证码被拦截问题</li>\n</ol>\n<h2 id=\"v2-5-4-80\"> v2.5.4.80</h2>\n<ul>\n<li>合并eurynome-cloud-curd包和eurynome-cloud-rest包，减少包数量，提升代码维护便捷度。</li>\n<li>增加接口幂等处理机制，防止重复提交。增加接口防刷限制机制，防止接口恶意频繁刷新。</li>\n<li>接口幂等和防刷机制，均支持全局配置控制，同时提供@Idempotent和@AccessLimited注解进行灵活的,个性化的配置。</li>\n<li>接口幂等和防刷机制，缓存标记采用分布式多级缓存进行存储，将低单一访问Redis带来的访问压力，同时支持多实例数据多级缓存本地数据同步。</li>\n<li>接口幂等和防刷机制，所涉及标记缓存时间配置全部统一支持Duration时间格式，简化配置参数，提升配置便捷度。同时，优化平台错误响应体系，返回更加友好的错误信息提示。</li>\n<li>定义Stamp签章体系，采用统一体系，对SMS短信验证码,JustAuth State,环信Token以及接口幂等和防刷等需临时存储标记相关应用进行统一实现。同时，采用分布式多级缓存进行数据存储，降低单一访问Redis压力。</li>\n</ul>\n<h2 id=\"v2-5-4-65\"> v2.5.4.65</h2>\n<ul>\n<li>优化Skywalking打包内容，直接使用Skywalking官方容器</li>\n<li>补充RequestMappingScanner对应事件代码，解决单体版扫描Rest API接口后不会存储问题</li>\n<li>优化数据库脚本以及数据库表结构和默认数据自动初始化机制。解决在第一次运行时，Spring Data JPA JDBC初始化机制与Hibernate 初始化机制冲突问题。</li>\n<li>在Gitee Wiki中，增加数据库初始化说明文档</li>\n<li>删除部分预留代码，减少暂时不必要的代码对使用者带来的误导。</li>\n<li>前端UI中，增加部分配置，使用者可以通过注释部分配置，让前端UI快速支持单体版。</li>\n</ul>\n<h2 id=\"v2-5-4-60\"> v2.5.4.60</h2>\n<ul>\n<li>Spring Boot 版本升级至 2.5.4</li>\n<li>Skywalking 版本升级至 8.7.0</li>\n<li>微服务日志输出至日志中心格式。</li>\n<li>增加Swagger注入条件注解，优化日志中心相关配置采用统一常量控制</li>\n<li>增加自定义Property&quot;助手&quot;数据统一自动编译生成配置，无须额外设置，在IDE中编辑配置属性时可自动弹出提示</li>\n<li>修复Kafka配置不生效问题。</li>\n<li>解决单体版自动启动Kafka问题。</li>\n<li>暂时关闭单体版Swagger，规避Swagger会自动启动Kafka问题。</li>\n</ul>\n<h2 id=\"v2-5-4-55\"> v2.5.4.55</h2>\n<ul>\n<li>整合代码，将constant包代码整合至common包中。删除constant包。</li>\n<li>完善Rest接口校验机制，以及相关自定义错误码</li>\n<li>统一spring boot validation错误信息，将其整合至平台统一响应实体Result中。无须在各个Rest接口中，添加BindingResult参数。</li>\n</ul>\n<h2 id=\"v2-5-4-50\"> v2.5.4.50</h2>\n<ul>\n<li>优化服务本地权限存储逻辑，解决权限属性数据重复存储，不会替换问题。</li>\n<li>重新梳理Spring Security OAuth2 方法级表达式动态权限鉴权逻辑，摒弃无用的权限验证Voter逻辑，使用统一逻辑实现@PreAuthorize注解权限的全面动态可配置化。统一平台接口- 白名单，IP地址白名单，以及Scope绑定URL的管理。</li>\n<li>重构UserDetails用户信息组织逻辑，使用Spring Security标准代码，替换自定义逻辑代码，降低代码冗余，与自研方法级动态权限完美融合。</li>\n<li>优化平台权限从Controller扫描,汇总存储至服务器以及动态修改后最终回传同步至服务的整理逻辑以及事件流。完美支持单体式架构,UPMS自身应用需求,分布式架构以及分布式各服- 务多实例等各种应用场景。</li>\n<li>修复部分已知BUG，将部分代码中日志由@Slf4j改回传统日志编写方式，一方面提高编译效率，另一方面解决源代码包查看时Idea提醒代码不一致问题。</li>\n<li>清理系统无用代码。</li>\n<li>增加方法级动态权限演示动图，更新Readme</li>\n</ul>\n<h2 id=\"v2-5-4-40\"> v2.5.4.40</h2>\n<ul>\n<li>优化自定义多级缓存，实现可以统一设置allowNullValues值，并解决存储空值时卡死问题。</li>\n<li>重新梳理,优化系统权限从Controller扫描,汇总存储至服务器以及动态修改后最终回传同步至服务的整理逻辑以及事件流。完美支持单体式架构,UPMS自身应用需求,分布式架构以及- - 分布式各服务多实例等各种应用场景。</li>\n<li>增加Kafka条件注入配置，将条件转换为@ConditionalOnXXX，方便管理和维护。避免单体版应用相关依赖过度依赖Kafka而导致的无法启动</li>\n<li>修复部分已知BUG，将部分代码中日志由@Slf4j改回传统日志编写方式，一方面提高编译效率，另一方面解决源代码包查看时Idea提醒代码不一致问题。</li>\n<li>去除传统Kafka Producer 通用类，改为统一使用 Spring Cloud Bus</li>\n</ul>\n<h2 id=\"v2-5-4-30\"> v2.5.4.30</h2>\n<ul>\n<li>重新调整Property配置，规范Property定义。修改相关配置</li>\n<li>调整包，以及包相关依赖关系。让包之间的依赖更加合理</li>\n<li>增加Kafka配置，增加@KafkaListener动态控制，以避免在不需要的情况下Kafka的自动开启。</li>\n<li>调整部分常理代码位置，常量代码基本调整完成</li>\n<li>将原有自定义条件，转换为@ConditionalOnXXX注解，让使用更加便捷</li>\n<li>日志中心是否开启状态，改为@ConditionalOnLogCenterEnabled注解</li>\n</ul>\n<h2 id=\"v2-5-4-20\"> v2.5.4.20</h2>\n<ul>\n<li>本地权限缓存更换为JetCache，为服务多实例的权限扫描和存储提供更好的支持</li>\n<li>将数据访问策略从Conditional类，升级为Conditional注解，使用更加便捷</li>\n<li>调整包依赖关系，新建assistant,constant包，删除message包。</li>\n<li>逐步将平台中各类非独有常量移入constant包方便管理和修改</li>\n<li>采用Spring Boot Event和Spring Cloud Bus Event 机制重构接口收集逻辑。支持单体架构,UPMS,分布式多实例等不同场景接口扫描的特殊需求</li>\n<li>优化Docker Compose配置，使用Debezium Kafka 替换已有kafka，以支持Debezium应用</li>\n<li>删除无用代码</li>\n</ul>\n<h2 id=\"v2-5-4-10\"> v2.5.4.10</h2>\n<ul>\n<li>全网首个实现Spring Security 动态URL权限与注解表达式权限有机整合，并且可以动态配置的微服务框架。</li>\n<li>全面支持方法级权限控制，Security OAuth2 permitAll等方法权限以及@PreAuthorize注解权限，均支持动态配置。目前支持以下权限的动态配置：\n· hasRole\n· hasAnyRole\n· hasAuthority\n· hasAnyAuthority\n· hasIpAddress\n· #oauth2.clientHasRole\n· #oauth2.clientHasAnyRole\n· #oauth2.hasScope\n· #oauth2.hasAnyScope\n· #oauth2.hasScopeMatching\n· #oauth2.hasAnyScopeMatching\n· #oauth2.denyOAuthClient\n· #oauth2.isOAuth\n· #oauth2.isUser\n· #oauth2.isClient</li>\n<li>彻底解决使用withObjectPostProcessor方式，会覆盖外部匹配规则问题。</li>\n<li>真正实现Scope权限与URL权限的关联与管控，拓展OAuth2默认只进行Scope简单对比的实现逻辑。</li>\n<li>实现动态权限配置的多服务同步。</li>\n<li>暂时去除JetCache，全面使用自研支持Hibernate二级缓存的多级缓存。</li>\n<li>修改配置文件配置</li>\n<li>删除无用代码</li>\n</ul>\n<h2 id=\"v2-5-3-60\"> v2.5.3.60</h2>\n<ul>\n<li>Nacos版本升级至2.0.3</li>\n<li>Hutool版本升级至5.7.6</li>\n<li>修改部分代码名称</li>\n<li>修改配置文件配置参数</li>\n</ul>\n<h2 id=\"v2-5-3-50\"> v2.5.3.50</h2>\n<ul>\n<li>将所有服务包括UAA的权限存储，改为本地和认证中心，多级分布式存储和验证。</li>\n<li>增加策略模式，支持认证中心权限数据直连和远程消息两种存储方式动态切换。</li>\n<li>改进自研多级缓存，解决Hibernate二级缓存进行数据缓存时产生的事务锁问题。</li>\n<li>删除无用代码</li>\n<li>为动态Scope权限做铺垫。</li>\n<li>全面支持方法级权限控制。</li>\n</ul>\n<h2 id=\"v2-5-3-40\"> v2.5.3.40</h2>\n<ul>\n<li>Spring Boot 版本升级至 2.5.3</li>\n<li>采用新的Hash算法，缩短权限标识；简化用户权限信息，以缩短平台生成JWT Token的长度</li>\n<li>git commit 插件由pl.project13.maven » git-commit-id-plugin改为io.github.git-commit-id » git-commit-id-maven-plugin。</li>\n<li>git commit 插件升级至 5.0.0 版本</li>\n</ul>\n<h2 id=\"v2-5-3-30\"> v2.5.3.30</h2>\n<ul>\n<li>重构用户中心用户人员体系，将平台用户,第三方社交登录用户,人事管理用户以及Camunda工作流用户体系无缝融合。</li>\n<li>人事管理体系人员唯一化管理，同时支持企业,党组,团青等多种类型的机构类型，便于企业人事管理。</li>\n<li>基于Debezium实现数据库变更数据捕获，实现人事管理信息与Camunda工作流用户实时同步。</li>\n<li>树形结构通用代码实现逻辑与Hutool Tree一致，因此采用Hutool Tree 全面替换已有的Tree代码。</li>\n<li>删除不再使用的通用类代码。</li>\n<li>修改说明文档</li>\n</ul>\n<h2 id=\"v2-5-3-10\"> v2.5.3.10</h2>\n<ul>\n<li>自研基于Caffeine和Redis分布式两级缓存</li>\n<li>完美支持JPA Hibernate二级缓存</li>\n<li>完美支持各类查询数据缓存以及JPA @ManyToMany, @ManyToOne等关联查询。</li>\n<li>实现基于Caffeine的Hibernate二级缓存，可与自研两级缓存快速切换，仅使用本地缓存。</li>\n<li>极大的简化了原有自研的基于JetCache的缓存使用方式。</li>\n<li>保留JetCache，可根据实际使用需要使用。</li>\n<li>已有服务接口相关代码，均已更新自研分布式两级缓存模式。</li>\n</ul>\n<h2 id=\"_2-5-2-40\"> 2.5.2.40</h2>\n<ul>\n<li>Redis Value 默认序列化工具修改为Jackson2JsonRedisSerializer</li>\n<li>jetcache valueEncoder 和 valueDecoder 修改为kryo</li>\n<li>部分代码的日志改为传统方式，不再使用@Slf4j注解</li>\n<li>抽象实体共性属性，拓展基础实体，以支持JPA视图类的ORM映射。</li>\n<li>重构基础Service，将基础Service的读操作与其它操作分离，以支持“视图”相关Service的编写。</li>\n<li>重构基础Controller，将基础Controller的读操作与其它操作分离，以支持“视图”相关Controller的编写。</li>\n<li>将Hibernate Validator替换为spring-boot-starter-validation</li>\n<li>删除JPA过期方法封装</li>\n</ul>\n<h2 id=\"v2-5-2-30\"> v2.5.2.30</h2>\n<ul>\n<li>Spring Boot 版本升级至2.5.2</li>\n<li>Spring Boot Admin 版本升级至2.4.2</li>\n<li>升级其它相关依赖版本</li>\n</ul>\n<h2 id=\"v2-5-2-25\"> v2.5.2.25</h2>\n<ul>\n<li>Skywalking升级至8.6.0</li>\n</ul>\n<h2 id=\"v2-5-2-20\"> v2.5.2.20</h2>\n<ul>\n<li>Spring Boot 升级至2.5.1</li>\n<li>Camunda 升级至7.15.0</li>\n<li>其它依赖包版本升级</li>\n<li>Swagger回滚至2.9.2，解决Swagger接口测试相关问题以及Knife4 Authorize不显示问题</li>\n<li>结构性调整平台相关配置属性</li>\n</ul>\n<h2 id=\"v2-5-1-0\"> v2.5.1.0</h2>\n<ul>\n<li>Spring Boot 大版本升级至2.5.0</li>\n</ul>\n<h2 id=\"v2-4-5-60\"> v2.4.5.60</h2>\n<ul>\n<li>修改负载均衡不生效问题</li>\n<li>调整包依赖关系</li>\n<li>升级版本</li>\n</ul>\n<h2 id=\"v2-4-5-48\"> v2.4.5.48</h2>\n<ul>\n<li>正式发布开源版本</li>\n</ul>\n",
      "date_published": "2021-10-27T16:13:57.000Z",
      "date_modified": "2021-10-28T15:24:29.000Z",
      "authors": [
        {
          "name": "码匠君"
        }
      ],
      "tags": []
    },
    {
      "title": "Eurynome Cloud | 在线文档",
      "url": "https://herodotus.cn/",
      "id": "https://herodotus.cn/",
      "content_html": "",
      "date_published": "2021-10-27T06:18:58.000Z",
      "date_modified": "2021-10-28T15:24:29.000Z",
      "authors": [
        {
          "name": "码匠君"
        }
      ],
      "tags": []
    }
  ]
}