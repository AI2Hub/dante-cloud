"use strict";(self.webpackChunkeurynome_cloud_document=self.webpackChunkeurynome_cloud_document||[]).push([[812],{4432:(n,e,a)=>{a.r(e),a.d(e,{data:()=>s});const s={key:"v-01ef07a3",path:"/documents/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html",title:"常用命令",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"前端工程涉及命令",slug:"前端工程涉及命令",children:[{level:3,title:"指定包",slug:"指定包",children:[]},{level:3,title:"依赖工程内组件",slug:"依赖工程内组件",children:[]},{level:3,title:"根目录添加依赖",slug:"根目录添加依赖",children:[]},{level:3,title:"升级依赖包",slug:"升级依赖包",children:[]},{level:3,title:"编译所有组件",slug:"编译所有组件",children:[]},{level:3,title:"清空组件 dist",slug:"清空组件-dist",children:[]},{level:3,title:"清除组件中的 node_modules",slug:"清除组件中的-node-modules",children:[]},{level:3,title:"让各个组件中重新关联依赖包",slug:"让各个组件中重新关联依赖包",children:[]},{level:3,title:"提交代码",slug:"提交代码",children:[]}]}],filePathRelative:"documents/常用命令.md",git:{updatedTime:null,contributors:[]}}},7029:(n,e,a)=>{a.r(e),a.d(e,{default:()=>l});const s=(0,a(6252).uE)('<h1 id="常用命令" tabindex="-1"><a class="header-anchor" href="#常用命令" aria-hidden="true">#</a> 常用命令</h1><h2 id="前端工程涉及命令" tabindex="-1"><a class="header-anchor" href="#前端工程涉及命令" aria-hidden="true">#</a> 前端工程涉及命令</h2><h3 id="指定包" tabindex="-1"><a class="header-anchor" href="#指定包" aria-hidden="true">#</a> 指定包</h3><p>指定包，在某个包下执行 yarn 命令</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">yarn</span> ws:**\n\n// 例如：\n// 添加包（从npm中添加）\n<span class="token function">yarn</span> ws:example <span class="token function">add</span> lodash -D\n\n// 删除包\n<span class="token function">yarn</span> ws:example remove lodash\n\n// 运行example\n<span class="token function">yarn</span> ws:example serve\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="依赖工程内组件" tabindex="-1"><a class="header-anchor" href="#依赖工程内组件" aria-hidden="true">#</a> 依赖工程内组件</h3><p>添加本工程中的组件作为依赖包（尚未上传至 npm）</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>// 将工程中的h-button 添加至example中\n// 注意：不支持批量添加多个，要一个一个加\nlerna <span class="token function">add</span> @hecate/h-button --scope @hecate/example\n\n// 删除本工程中的组件，使用yarn命令即可\n<span class="token function">yarn</span> ws:example remove @hecate/h-button\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="根目录添加依赖" tabindex="-1"><a class="header-anchor" href="#根目录添加依赖" aria-hidden="true">#</a> 根目录添加依赖</h3><p>在根目录添加依赖包</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>// -W 意思是指工作区，想要操作工程级的包，这个参数不能缺\n// -D 指定devDependencies的意思\n// 添加组件\n<span class="token function">yarn</span> <span class="token function">add</span> lodash -D -W\n\n// 删除组件\n<span class="token function">yarn</span> <span class="token function">add</span> lodash -W\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="升级依赖包" tabindex="-1"><a class="header-anchor" href="#升级依赖包" aria-hidden="true">#</a> 升级依赖包</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">yarn</span> upgrade-interactive --latest\n\n// 升级全局依赖包\n<span class="token function">yarn</span> global upgrade-interactive --latest\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="编译所有组件" tabindex="-1"><a class="header-anchor" href="#编译所有组件" aria-hidden="true">#</a> 编译所有组件</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>lerna run lib\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="清空组件-dist" tabindex="-1"><a class="header-anchor" href="#清空组件-dist" aria-hidden="true">#</a> 清空组件 dist</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>lerna run clean\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="清除组件中的-node-modules" tabindex="-1"><a class="header-anchor" href="#清除组件中的-node-modules" aria-hidden="true">#</a> 清除组件中的 node_modules</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>lerna clean\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="让各个组件中重新关联依赖包" tabindex="-1"><a class="header-anchor" href="#让各个组件中重新关联依赖包" aria-hidden="true">#</a> 让各个组件中重新关联依赖包</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>lerna bootstrap 或 <span class="token function">yarn</span> <span class="token function">install</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="提交代码" tabindex="-1"><a class="header-anchor" href="#提交代码" aria-hidden="true">#</a> 提交代码</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">yarn</span> push\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div>',23),l={render:function(n,e){return s}}}}]);