"use strict";(self.webpackChunkeurynome_cloud_document=self.webpackChunkeurynome_cloud_document||[]).push([[672],{608:(e,s,l)=>{l.r(s),l.d(s,{data:()=>o});const o={key:"v-115e6cc2",path:"/microservices/%E5%AE%B9%E5%99%A8%E9%83%A8%E7%BD%B2.html",title:"容器化部署",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"本地容器部署",slug:"本地容器部署",children:[{level:3,title:"[1]、本地Docker安装（Windows版）",slug:"_1-、本地docker安装-windows版",children:[]},{level:3,title:"[2]、依赖环境安装",slug:"_2-、依赖环境安装",children:[]}]},{level:2,title:"服务器容器部署",slug:"服务器容器部署",children:[]}],filePathRelative:"microservices/容器部署.md",git:{updatedTime:1630997095e3,contributors:[{name:"herodotus",email:"pointer_v@qq.com",commits:1}]}}},6596:(e,s,l)=>{l.r(s),l.d(s,{default:()=>v});var o=l(6252);const n=(0,o.uE)('<h1 id="容器化部署" tabindex="-1"><a class="header-anchor" href="#容器化部署" aria-hidden="true">#</a> 容器化部署</h1><h2 id="本地容器部署" tabindex="-1"><a class="header-anchor" href="#本地容器部署" aria-hidden="true">#</a> 本地容器部署</h2><p>本地采用容器方式进行项目的部署，因为每个人使用的电脑、操作系统都各不相同，加之不同人的喜好和偏好也不尽相同，无法做到全覆盖。</p><div class="custom-container tip"><p class="custom-container-title">提示</p><p>这里仅以容器方式安装<code>Nacos</code>、<code>ELK</code>、<code>Kafka</code>、<code>Zookeeper</code>、<code>Sentinel</code>，本地安装<code>PostgreSQL</code>、<code>MySQL</code>和<code>Redis</code>的方式，进行示意性说明。仅供参考，具体安装请结合自身及时情况，适时调整。</p></div><p><strong>本地安装</strong></p><ul><li>PostgreSQL</li><li>MySQL</li><li>Redis</li></ul><p><strong>容器安装</strong></p><ul><li>Nacos</li><li>ELK</li><li>Kafka &amp; Zookeeper</li><li>Sentinel</li></ul><h3 id="_1-、本地docker安装-windows版" tabindex="-1"><a class="header-anchor" href="#_1-、本地docker安装-windows版" aria-hidden="true">#</a> [1]、本地Docker安装（Windows版）</h3><ul><li>Windows 本地安装 Docker 请参考个人博文：</li></ul>',10),r={href:"https://blog.csdn.net/Pointer_v/article/details/106176846?spm=1001.2014.3001.5501",target:"_blank",rel:"noopener noreferrer"},a=(0,o.Uk)("Windows 10 2004 (20H1) 安装 Docker Desktop for Windows (2.3.0.2) 以 WSL 2 方式运行容器"),t={href:"https://blog.csdn.net/Pointer_v/article/details/106910766?spm=1001.2014.3001.5501",target:"_blank",rel:"noopener noreferrer"},i=(0,o.Uk)("Windows 10 将 Docker Desktop for Windows（WSL 2 方式）文件存储移出C盘放置到其它目录"),c=(0,o.uE)('<h3 id="_2-、依赖环境安装" tabindex="-1"><a class="header-anchor" href="#_2-、依赖环境安装" aria-hidden="true">#</a> [2]、依赖环境安装</h3><h4 id="_1-安装配置mysql" tabindex="-1"><a class="header-anchor" href="#_1-安装配置mysql" aria-hidden="true">#</a> (1) 安装配置MySQL</h4><ol><li><strong>正常安装MySQL</strong></li><li><strong>创建Nacos持久化数据库</strong></li></ol><p>即在MySQL中，为Nacos新建用户、新建数据库、给数据库用户分配数据库权限。</p><ol start="3"><li><strong>导入Nacos初始脚本</strong></li></ol>',5),d={href:"https://github.com/alibaba/nacos/releases",target:"_blank",rel:"noopener noreferrer"},p=(0,o.Uk)("下载"),u=(0,o.Uk)("最新稳定版的Nacos压缩包。解压后，在"),h=(0,o._)("code",null,"{NACOS_HOME}/conf",-1),m=(0,o.Uk)("目录下，找到"),g=(0,o._)("code",null,"nacos-mysql.sql",-1),b=(0,o.Uk)("导入到数据库中。"),q=(0,o.uE)('<div class="custom-container tip"><p class="custom-container-title">提示</p><p>在工程的<code>${project home}/configurations/scripts</code>目录下，保存了一份Nacos脚本可以使用，如果不是最新请自行重新下载。</p></div><ol start="4"><li><strong>开放MySQL数据库IP访问</strong></li></ol><p>正常情况下，本地开发使用<code>localhost</code>就可以访问已安装的mysql服务; 因为Docker是使用内部的独立网络，Docker内部容器想要访问外部的数据库，只能通过ip地址才能访问。所以需要开放数据库的IP访问，否则会出现 Docker 容器发无法连接数据库的情况。</p><p>使用命令行工具，登录进入MySQL，输入以下脚本查看数据库的可访问情况：</p><div class="language-mysql ext-mysql line-numbers-mode"><pre class="language-mysql"><code>mysql&gt; select host,user from mysql.user;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>查询结果示例：</p><div class="language-mysql ext-mysql line-numbers-mode"><pre class="language-mysql"><code>| host      | user             |\n| --------- | ---------------- |\n| localhost | root             |\n| localhost | mysql.infoschema |\n| localhost | mysql.session    |\n| localhost | mysql.sys        |\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p><strong>host字段的值是localhost，说明只允许本地访问</strong></p><p>找到对应你所用的用户，设置允许任意IP访问，执行语句：</p><div class="language-mysql ext-mysql line-numbers-mode"><pre class="language-mysql"><code>mysql&gt; update mysql.user set host = &#39;%&#39; where user = &#39;root&#39;;\n\nmysql&gt; flush privileges;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="_2-安装配置postgresql" tabindex="-1"><a class="header-anchor" href="#_2-安装配置postgresql" aria-hidden="true">#</a> (2) 安装配置PostgreSQL</h4><ol><li><strong>安装PostgreSQL数据库</strong></li></ol><p>正常安装即可。跟随安装的Wizard一步一步进行即可。</p><ol start="2"><li><strong>创建应用数据库</strong></li></ol><p>进入<code>SQL Shell(psql)</code> (在Windows的菜单中可以找到)，使用超级管理员账号和密码登录进入数据库，执行以下脚本：</p><div class="language-postgresql ext-postgresql line-numbers-mode"><pre class="language-postgresql"><code>CREATE USER herodotus WITH PASSWORD &#39;herodotus&#39;;\nCREATE DATABASE herodotus OWNER herodotus;\nGRANT ALL PRIVILEGES ON DATABASE herodotus TO herodotus;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="custom-container warning"><p class="custom-container-title">注意</p><p>要分步，一条一条地执行，不要全部复制一把全部执行。一定要注意每个语句结尾要以“;”结束。</p></div><ol start="3"><li><strong>导入建表数据</strong></li></ol><p>先导入Oauth2相关表即可，其它的表可以通过JPA自动创建。文件位置： ${project home}/herodotus-cloud/herodotus-cloud-platform/herodotus-cloud-platform-uaa/src/main/resources/sql/oauth2-schema-postgresql.sql</p><p>（4）、开放IP访问</p><p>如果想要使用Docker封装的服务，就需要开放PostgreSQL的IP访问。Windows环境，链接PostgreSQL是主机名填写“localhost”可以正常链接，使用IP地址不能进行链接</p><p>在${PostgreSQL_HOME}/12/data目录下，找到postgresql.conf和pg_hba.conf。</p><ul><li>打开postgresql.conf，在59行，找到listen_addresses，修改为：</li></ul><div class="language-postgresql ext-postgresql line-numbers-mode"><pre class="language-postgresql"><code>listen_addresses = &#39;*&#39;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ul><li>修改端口号打开postgresql.conf，在63行，找到port</li></ul><blockquote><p>PostgreSQL 12 中，该项默认就为 ‘*’，所以可以不用修改</p></blockquote><ul><li>打开pg_hba.conf，在最后增加：</li></ul><div class="language-postgresql ext-postgresql line-numbers-mode"><pre class="language-postgresql"><code>host    all             all             192.168.0.0/16          trust\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><blockquote><p>允许访问PostgreSQL服务器的客户端IP地址, 其中：192.168.0.0/16表示允许192.168.0.1-192.168.255.255网段访问。可根据实际情况调整</p></blockquote><ul><li>重启数据服务</li></ul><h2 id="服务器容器部署" tabindex="-1"><a class="header-anchor" href="#服务器容器部署" aria-hidden="true">#</a> 服务器容器部署</h2><div class="custom-container tip"><p class="custom-container-title">提示</p><p>应用环境的部署是一项大工程，同样的基础设施根据不同应用场景需求，可以采用多种多样不同的方式进行部署。基础设施的部署也比较复杂，其中任意一项都可以单独作为专门话题进行讨论。这就是所谓的“<strong>千人千面</strong>”， 而且基础设施部署并不是本项目的重点，所以此处不再展开。当然，只要是技术问题，欢迎在群里积极讨论交流。</p></div>',32),v={render:function(e,s){const l=(0,o.up)("OutboundLink");return(0,o.wg)(),(0,o.iD)(o.HY,null,[n,(0,o._)("ol",null,[(0,o._)("li",null,[(0,o._)("a",r,[a,(0,o.Wm)(l)])]),(0,o._)("li",null,[(0,o._)("a",t,[i,(0,o.Wm)(l)])])]),c,(0,o._)("p",null,[(0,o._)("a",d,[p,(0,o.Wm)(l)]),u,h,m,g,b]),q],64)}}}}]);