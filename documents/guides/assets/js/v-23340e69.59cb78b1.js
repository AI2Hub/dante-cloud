"use strict";(self.webpackChunkeurynome_cloud_document=self.webpackChunkeurynome_cloud_document||[]).push([[152],{7341:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-23340e69",path:"/documents/%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2.html",title:"环境部署",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"准备工作",slug:"准备工作",children:[{level:3,title:"后端运行所需的基础设施",slug:"后端运行所需的基础设施",children:[]},{level:3,title:"前端运行所需的基础设施",slug:"前端运行所需的基础设施",children:[]}]},{level:2,title:"运行系统",slug:"运行系统",children:[{level:3,title:"后端运行",slug:"后端运行",children:[]},{level:3,title:"前端运行",slug:"前端运行",children:[]}]}],filePathRelative:"documents/环境部署.md",git:{updatedTime:1631030613e3,contributors:[{name:"herodotus",email:"pointer_v@qq.com",commits:2}]}}},3311:(n,s,a)=>{a.r(s),a.d(s,{default:()=>R});var e=a(6252);const t=(0,e.uE)('<h1 id="环境部署" tabindex="-1"><a class="header-anchor" href="#环境部署" aria-hidden="true">#</a> 环境部署</h1><h2 id="准备工作" tabindex="-1"><a class="header-anchor" href="#准备工作" aria-hidden="true">#</a> 准备工作</h2><h3 id="后端运行所需的基础设施" tabindex="-1"><a class="header-anchor" href="#后端运行所需的基础设施" aria-hidden="true">#</a> 后端运行所需的基础设施</h3><table><thead><tr><th>设施</th><th>当前版本</th><th>说明</th></tr></thead><tbody><tr><td>Nacos</td><td>2.0.3</td><td>分布式版本使用的Nacos作为配置中心和服务发现中心，所以需要安装Nacos。不管本地运行还是Docker、K8S环境都需要。</td></tr><tr><td>Redis</td><td>3.2.100+</td><td>运行的必须组件，分布式版本、单体版本；本地运行还是还是Docker、K8S环境都需要</td></tr><tr><td>Kafka</td><td>2.6.0+</td><td>运行的必须组件，分布式版本、单体版本；本地运行还是还是Docker、K8S环境都需要。（虽然本系统使用的是spring cloud bus同时兼容RabbitMQ和Kafka，由于使用Debezium来支持工作流、ElasticSearch数据同步，所以如果没有特殊的使用需求还是建议使用Kafka）</td></tr><tr><td>PostgreSQL 数据库</td><td>建议使用最新版，其它版本也可以运行</td><td>个人多年项目经验，感觉PostgreSQL更好用和顺手，所以默认数据为PostgreSQL。基础代码都是使用spring data jpa（Mybatis Plus也支持），所以其它数据库也支持，修改一下配置就行</td></tr><tr><td>MySQL 数据库</td><td>5.6.5+</td><td>Nacos 运行需要依赖数据库，长久运行需要依赖于MySQL（目前Nacos不支持其它数据库，虽说Nacos RoadMap有多数据库支持，不知道什么时候开发完成）。本地运行为了省事，也可以用Nacos的内置数据库，这样减少本地运行资源占用</td></tr><tr><td>Sentinel Dashboard</td><td>1.8.0</td><td>本地调试运行可以不需要</td></tr><tr><td>Skywalking</td><td>8.7.0</td><td>本地运行可以不需要</td></tr><tr><td>ELK</td><td>7.0.0 +</td><td>日志中心中心所需基础环境，本地运行可以不需要，需要在配置关闭日志收集</td></tr></tbody></table><ul><li><strong>(1) 后端本地运行所需标准最小环境</strong></li></ul><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Nacos &gt;= 1.1.0 (推荐使用最新版Nacos)\nRedis &gt;= 3.0.0\nKafka &gt;= 2.6.0 (目前Kafka运行还需要依赖Zookeeper)\nPostgreSQL &gt;= 10\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li><strong>(2) 开发环境</strong></li></ul><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>IDEA 或 Eclipse （推荐IDEA）\nJDK &gt;= 1.8 (推荐1.8版本)\nMaven &gt;= 1.3\nGit 使用最新版\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="前端运行所需的基础设施" tabindex="-1"><a class="header-anchor" href="#前端运行所需的基础设施" aria-hidden="true">#</a> 前端运行所需的基础设施</h3><table><thead><tr><th>设施</th><th>当前版本</th><th>说明</th></tr></thead><tbody><tr><td>Nodejs</td><td>14.17.0 +</td><td>运行前端Vue工程必须依赖，如果不需要运行前端可以忽略</td></tr><tr><td>Yarn</td><td>1.22.10</td><td>前端包管理工具，如果习惯使用Yarn，用Npm或其它工具也都可以</td></tr></tbody></table><ul><li><strong>(1) 前端端本地运行所需标准最小环境</strong></li></ul><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Nodejs&gt;= 10\nYarn&gt;= 1.22.10 （Yarn2 目前会有很多问题，劣势太多不建议使用）\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ul><li><strong>(2) 开发环境</strong></li></ul><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Visual Studio Code （Vscode）或其它 （推荐Vscode）\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ul><li><strong>(3) 环境配置</strong></li></ul>',15),o={href:"https://blog.csdn.net/Pointer_v/article/details/105432529?spm=1001.2014.3001.5501",target:"_blank",rel:"noopener noreferrer"},c=(0,e.Uk)("参见个人博客"),l=(0,e.uE)('<h2 id="运行系统" tabindex="-1"><a class="header-anchor" href="#运行系统" aria-hidden="true">#</a> 运行系统</h2><h3 id="后端运行" tabindex="-1"><a class="header-anchor" href="#后端运行" aria-hidden="true">#</a> 后端运行</h3><h4 id="_1-、创建工程" tabindex="-1"><a class="header-anchor" href="#_1-、创建工程" aria-hidden="true">#</a> [1]、创建工程</h4><p><strong>方式一：</strong></p>',4),p=(0,e.Uk)("前往"),r={href:"https://gitee.com/herodotus/eurynome-cloud",target:"_blank",rel:"noopener noreferrer"},d=(0,e.Uk)("Gitee下载页面"),i=(0,e.Uk)("下载解压到工作目录"),u=(0,e.uE)("<li><p>打开IDE导入工程</p></li><li><p><code>Eclipse</code>，菜单 <code>File -&gt; Import</code>，然后选择 <code>Maven -&gt; Existing Maven Projects</code>，点击 <code>Next</code> 按钮，选择工作目录，然后点击 <code>Finish</code> 按钮，即可成功导入。</p></li><li><p><code>IDEA</code>，菜单 <code>File -&gt; Open</code>，然后选择已解压工程所在的目录，点击 <code>OK</code> 即可。</p></li>",3),g=(0,e._)("blockquote",null,[(0,e._)("p",null,"IDE会自动加载相关的依赖包，具体要依据网络以及个人本地Maven缓存情况而定。")],-1),m=(0,e._)("p",null,[(0,e._)("strong",null,"方式二：")],-1),k=(0,e._)("code",null,"IDEA",-1),h=(0,e.Uk)(" 菜单 "),b=(0,e._)("code",null,"File -> New -> Project From Version Control...",-1),v=(0,e.Uk)(", 在弹出框中输入本工程Git地址："),y={href:"https://gitee.com/herodotus/eurynome-cloud.git",target:"_blank",rel:"noopener noreferrer"},f=(0,e.Uk)("https://gitee.com/herodotus/eurynome-cloud.git"),_=(0,e.Uk)("，然后设置放置目录，点击 "),E=(0,e._)("strong",null,"OK",-1),x=(0,e.Uk)(" 即可"),A=(0,e.uE)('<h4 id="_2-、创建数据库" tabindex="-1"><a class="header-anchor" href="#_2-、创建数据库" aria-hidden="true">#</a> [2]、创建数据库</h4><p>进入<code>PostgreSQL</code> 的<code>SQL Shell(psql)</code> (在Windows的菜单中可以找到)，使用超级管理员账号和密码登录进入数据库，执行以下脚本：</p><div class="custom-container tip"><p class="custom-container-title">提示</p><p><code>Linux</code> 环境下在命令行中登录 <code>PostgreSQL</code></p></div><div class="language-postgresql ext-postgresql line-numbers-mode"><pre class="language-postgresql"><code>CREATE USER herodotus WITH PASSWORD &#39;herodotus&#39;;\nCREATE DATABASE herodotus OWNER herodotus;\nGRANT ALL PRIVILEGES ON DATABASE herodotus TO herodotus;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="custom-container tip"><p class="custom-container-title">说明(1)</p><p>这里不管是用户名、用户密码还是数据库名均使用herodotus是为了方便，请根据自己实际情况修改。</p></div><div class="custom-container tip"><p class="custom-container-title">说明(2)</p><p>这里没有进行分库（即：所有的服务使用同一个数据库），请根据自己的实际情况修改。</p></div><div class="custom-container tip"><p class="custom-container-title">说明(3)</p><p>以上是以 <code>PostgreSQL</code> 作为默认数据库，如果要使用其它数据请自行探索。</p></div><div class="custom-container warning"><p class="custom-container-title">注意</p><p>要分步、一条一条地执行，不要全部复制，一把全部执行。一定要注意每个语句结尾要以“;”结束。</p></div><h4 id="_3-、修改配置" tabindex="-1"><a class="header-anchor" href="#_3-、修改配置" aria-hidden="true">#</a> [3]、修改配置</h4><ul><li><strong>（1）需导入Nacos配置信息修改</strong></li></ul><p>在工程 <code>${project_home}/platform/eurynome-cloud-management/resources/configs</code> 目录下，存放着所有需要导入 <code>Nacos</code> 的所有配置文件。</p><div class="custom-container tip"><p class="custom-container-title">提示</p><p>本项目所有<code>Nacos</code>配置，均是采用<code>yaml</code>格式。如需使用其它格式请自行修改</p></div><p>请根据自身环境的信息，进行对应的修改。为了方便使用，所有的所有的配置采用**“共享式、统一化多环境配置模式”**，所以大多数配置在对应 <code>多环境</code> 的 <code>eurynome-cloud-environment.yaml</code> 配置中就可以完成修改。</p><div class="custom-container warning"><p class="custom-container-title">注意</p><p>第一次使用系统，<code>eurynome-cloud-environment.yaml</code> 中 <code>herodotus.swagger.database.ddl-auto</code> 配置，要设置成 <code>update</code> 或 <code>create</code>。推荐设置成 <code>update</code>，这样在开发过程中，会自动更新数据库结构。生产环境中，也可以设置成 <code>update</code>，当然最好设置成 <code>none</code>。</p></div><ul><li><strong>（2）导入Nacos配置</strong></li></ul><p>配置修改完成之后，需要将<code>${project_home}/platform/eurynome-cloud-management/resources/configs</code> 目录下导入到 <code>Nacos</code> 中。</p><div class="custom-container danger"><p class="custom-container-title">注意</p><p><code>${project_home}/platform/eurynome-cloud-management/resources/configs</code> 目录下，还有一级目录。这级目录的名称，是对应 <code>Nacos</code> 中的 <code>Group</code>。所以在向 <code>Nacos</code> 导入配置时，一定要注意 <code>Group</code> 的创建和匹配。切勿全部导入到 <code>DEFAULT</code> 组下，这样会导致无法正常运行。</p></div><div class="custom-container tip"><p class="custom-container-title">提示</p><p><strong>Eurynome Cloud</strong> 是开源版本，未提供<code>Nacos</code>配置的自动导入功能。</p><p>为了方便使用，最新的版本中，在<code>${project_home}/platform/eurynome-cloud-management/resources/imports</code> 目录下提供可以直接导入的配置包。可以方便的完成导入配置、创建<code>Group</code>等操作。</p></div><ul><li><strong>（3）修改pom配置</strong></li></ul><p>找到工程根目录下的 <code>pom.xml</code>, 由于支持多环境，所以在该文件中，找到你对应环境的配置，修改该环境下的对应的配置信息。</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token comment">&lt;!-- 开发 --&gt;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profile</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">&gt;</span></span>development<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activation</span><span class="token punctuation">&gt;</span></span>\n        <span class="token comment">&lt;!--默认激活配置--&gt;</span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activeByDefault</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activeByDefault</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activation</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">&gt;</span></span>\n        <span class="token comment">&lt;!--当前环境--&gt;</span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profile.name</span><span class="token punctuation">&gt;</span></span>development<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profile.name</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>database.type</span><span class="token punctuation">&gt;</span></span>postgresql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>database.type</span><span class="token punctuation">&gt;</span></span>\n        <span class="token comment">&lt;!--代码构建控制--&gt;</span>\n        <span class="token comment">&lt;!--跳过构建源代码包--&gt;</span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>skip.build.source.package</span><span class="token punctuation">&gt;</span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>skip.build.source.package</span><span class="token punctuation">&gt;</span></span>\n        <span class="token comment">&lt;!--不copy代码包到docker构建目录--&gt;</span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>skip.copy.docker.resource</span><span class="token punctuation">&gt;</span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>skip.copy.docker.resource</span><span class="token punctuation">&gt;</span></span>\n        <span class="token comment">&lt;!--不执行git commit 构建--&gt;</span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>skip.build.git.commit.info</span><span class="token punctuation">&gt;</span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>skip.build.git.commit.info</span><span class="token punctuation">&gt;</span></span>\n        <span class="token comment">&lt;!--Nacos配置中心地址--&gt;</span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>config.server-addr</span><span class="token punctuation">&gt;</span></span>127.0.0.1:8848<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>config.server-addr</span><span class="token punctuation">&gt;</span></span>\n        <span class="token comment">&lt;!--Nacos配置中心命名空间,用于支持多环境.这里必须使用ID，不能使用名称,默认为空--&gt;</span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>config.namespace</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>config.namespace</span><span class="token punctuation">&gt;</span></span>\n        <span class="token comment">&lt;!--Nacos服务发现地址--&gt;</span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>discovery.server-addr</span><span class="token punctuation">&gt;</span></span>127.0.0.1:8848<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>discovery.server-addr</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sentinel.server-addr</span><span class="token punctuation">&gt;</span></span>127.0.0.1:8858<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sentinel.server-addr</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profile</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><ul><li><strong>（4）多环境配置</strong></li></ul>',22),D=(0,e.Uk)("参考"),S=(0,e.Uk)("多环境配置"),N=(0,e.Uk)("说明"),L=(0,e.uE)('<h4 id="_4-、编译代码" tabindex="-1"><a class="header-anchor" href="#_4-、编译代码" aria-hidden="true">#</a> [4]、编译代码</h4><p><strong>方式一：</strong></p><p>在IDE工程中，利用IDE提供的界面操作进行编译。以<code>IDEA</code>为例，在右侧<code>Maven Panel</code>中，选择<code>eurynome-cloud(root)</code>节点，点击Lifecycle节点下的<code>install</code> 或者 <code>package</code> 进行编译。参考下图：</p><p><img src="/eurynome-cloud/images/idea/lifecycle.png" alt="输入图片说明"></p><p><strong>方式二：</strong></p><p>用命令行进入到工程代码所在目录，通过执行下面命令进行编译</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>mvn <span class="token function">install</span>\n\n或 \n\nmvn package\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><div class="custom-container tip"><p class="custom-container-title">提示</p><p>推荐使用<code>install</code>命令，进行编译。使用该命令编译完成之后，会在<code>Maven</code>本地缓存中，生成响应的包，这样<code>eurynome-cloud-athena</code>功能就可以直接使用。</p></div><div class="custom-container tip"><p class="custom-container-title">提示</p><p>在第一次编译的时候，因为在本地缓存缺少相关的包，所以在执行 <code>mvn clean</code> 操作时会提示错误。因此，在第一次编译时只使用 <code>mvn package</code> 或 <code>mvn install</code>。第一次编译完成之后，就可以使用 <code>mvn clean package</code> 或 <code>mvn clean install</code> 命令进行编译。IDE界面操作也是同理。</p></div><h4 id="_5-、导入数据库脚本" tabindex="-1"><a class="header-anchor" href="#_5-、导入数据库脚本" aria-hidden="true">#</a> [5]、导入数据库脚本</h4><p><strong>（1）运行服务</strong></p><p>为了减少数据库脚本，与实际应用不匹配的问题，系统大部分数据库表以及初始默认数据，使用自动创建方式导入，只有 <code>OAuth2</code> 额外需要的表，才需要手动创建。</p><p>所以在进行脚本的导入之前，请先运行<code>${project_home}/services/eurynome-cloud-upms-ability</code> 服务。该服务正常运行之后，会将大部分基础表创建好，同时会扫描该服务中的<code>Rest API</code>，转换为权限存储至<code>sys_authority</code>表中。</p><p>再运行<code>${project_home}/platform/eurynome-cloud-uaa</code>服务，该服务正常运行之后，会扫描该服务中的<code>Rest API</code>，转换为权限存储至<code>sys_authority</code>表中。</p><p><strong>（2）导入数据库脚本</strong></p><ol><li><p>在工程<code>${project_home}/configurations/scripts</code> 目录下，找到 <code>OAuth2</code> Schema脚本（<code>oauth2-schema-postgresql.sql</code>）导入到系统中。</p></li><li><p>在工程<code>${project_home}/services/eurynome-cloud-upms-ability/resources/sqls</code>目录下, 找到系统默认数据脚本（<code>upms-data-postgresql.sql</code>）导入到系统中。</p></li></ol><div class="custom-container warning"><p class="custom-container-title">注意</p><p><code>upms-data-postgresql.sql</code> 中， <code>sys_authority</code> 和 <code>sys_role_authority</code> 两部分数据，以为了以防服务<code>Rest API</code>扫描功能失效的情况下，权限数据无法正常生成的补救措施。</p><p>具体操作：</p><ul><li>如果在上一步，两个服务正常启动之后，<code>sys_authority</code> 权限数据可以正常生成，那么在导入 <code>upms-data-postgresql.sql</code> 时，请先删除 <code>sys_authority</code> 和 <code>sys_role_authority</code> 两部分数据再导入。然后，再导入该目录下的 <code>data-process.sql</code> 脚本即可。</li><li>如果在上一步，两个服务正常启动之后，<code>sys_authority</code> 权限数据未正常生成：请完整执行 <code>upms-data-postgresql.sql</code>，无须再执行<code>data-process.sql</code>。</li></ul></div><h4 id="_6-、打开运行基础模块-启动没有先后顺序" tabindex="-1"><a class="header-anchor" href="#_6-、打开运行基础模块-启动没有先后顺序" aria-hidden="true">#</a> [6]、打开运行基础模块（启动没有先后顺序）</h4><ul><li>GatewayApplication （网关模块 必须）</li><li>UaaApplication （认证模块 必须）</li><li>UpmsApplication （用户模块 必须）</li><li>ManagementApplication （监控中心 可选）</li><li>BpmnApplication （工作流 可选）</li></ul><h4 id="_7-、运行elk" tabindex="-1"><a class="header-anchor" href="#_7-、运行elk" aria-hidden="true">#</a> [7]、运行ELK</h4><p>完整运行本套微服务架构，需要搭建 <code>ELK</code> 套件，作为日志中心以及 <code>Skywalking</code> 链路追踪的数据存储介质。</p><p>目前已有基础功能尚未涉及到搜索，只有日志中心和链路追踪功能涉及到 <code>Elasticsearch</code>。如果本地开发不要相关功能，就不需要安装<code>ELK</code>套件。</p><div class="custom-container tip"><p class="custom-container-title">提示</p><p>如果不想使用<code>ELK</code>，那么需要关闭微服务的日志收集功能。修改你所使用 <code>多环境</code> 对应的 <code>eurynome-cloud-environment.yaml</code> 配置中的 <code>herodotus.environment.logstash-server-addr</code> 属性的值，将其值设置成 <code>false</code> ，即可关闭日志收集功能</p></div><h4 id="_8-、运行skywalking" tabindex="-1"><a class="header-anchor" href="#_8-、运行skywalking" aria-hidden="true">#</a> [8]、运行Skywalking</h4><p>完整运行本套微服务架构，需要搭建 <code>ELK</code> 套件，作为日志中心以及<code>Skywalking</code>链路追踪的数据存储介质。正式环境运行建议使用 <code>Docker</code> 或 <code>K8S</code> 的方式运行 <code>Skywalking</code>，并以 <code>Docker</code> 的形式运行服务。</p><p>如果仅是在本地运行调试服务与 <code>Skywalking</code> 的联动，可以在IDE中增加参数后，再运行服务即可。</p><p>以IDEA为例，点开 <code>Edit Configurations...</code>，在对应服务的 <code>VM Options</code> 输入框中添加如下参数即可调试 <code>Skywalking</code></p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>-javaagent:D:/Workspaces/Java/herodotus-cloud/configurations/docker/context/agent/skywalking-agent-es7-8.6.0.jar<span class="token operator">=</span>agent.service_name<span class="token operator">=</span>herodotus-cloud-upms-ability,collector.backend_service<span class="token operator">=</span><span class="token number">192.168</span>.101.10:11800\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h4 id="_9-、以docker方式部署" tabindex="-1"><a class="header-anchor" href="#_9-、以docker方式部署" aria-hidden="true">#</a> [9]、以Docker方式部署</h4>',29),w=(0,e.Uk)("参见："),q=(0,e.Uk)("容器化部署"),U=(0,e.uE)('<p>具体操作如下图所示：</p><p><img src="/eurynome-cloud/images/idea/local-skywalking.jpeg" alt="输入图片说明"></p><h3 id="前端运行" tabindex="-1"><a class="header-anchor" href="#前端运行" aria-hidden="true">#</a> 前端运行</h3><h4 id="前端运行命令" tabindex="-1"><a class="header-anchor" href="#前端运行命令" aria-hidden="true">#</a> 前端运行命令</h4><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>// 进入目录\n<span class="token builtin class-name">cd</span> eurynome-cloud-ui\n\n// 安装依赖\n<span class="token function">yarn</span> <span class="token function">install</span>\n或\n<span class="token function">npm</span> <span class="token function">install</span>\n\n<span class="token comment"># 本地开发 启动项目</span>\n<span class="token function">yarn</span> dev\n或\n<span class="token function">npm</span> run dev\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h4 id="运行验证" tabindex="-1"><a class="header-anchor" href="#运行验证" aria-hidden="true">#</a> 运行验证</h4>',6),I=(0,e.Uk)("打开浏览器，输入："),K={href:"http://localhost:3000",target:"_blank",rel:"noopener noreferrer"},P=(0,e.Uk)("http://localhost:3000"),j=(0,e.Uk)(" 默认账户/密码 system/123456） 若能正确展示登录页面，并能成功登录，菜单及页面展示正常，则表明环境搭建成功"),R={render:function(n,s){const a=(0,e.up)("OutboundLink"),R=(0,e.up)("RouterLink");return(0,e.wg)(),(0,e.iD)(e.HY,null,[t,(0,e._)("p",null,[(0,e._)("a",o,[c,(0,e.Wm)(a)])]),l,(0,e._)("ul",null,[(0,e._)("li",null,[(0,e._)("p",null,[p,(0,e._)("a",r,[d,(0,e.Wm)(a)]),i])]),u]),g,m,(0,e._)("p",null,[k,h,b,v,(0,e._)("a",y,[f,(0,e.Wm)(a)]),_,E,x]),A,(0,e._)("p",null,[D,(0,e.Wm)(R,{to:"/documents/%E5%A4%9A%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE.html"},{default:(0,e.w5)((()=>[S])),_:1}),N]),L,(0,e._)("p",null,[w,(0,e.Wm)(R,{to:"/microservices/%E5%AE%B9%E5%99%A8%E5%8C%96%E6%8A%80%E6%9C%AF.html"},{default:(0,e.w5)((()=>[q])),_:1})]),U,(0,e._)("p",null,[I,(0,e._)("a",K,[P,(0,e.Wm)(a)]),j])],64)}}}}]);