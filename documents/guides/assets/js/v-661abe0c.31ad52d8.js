"use strict";(self.webpackChunkeurynome_cloud_document=self.webpackChunkeurynome_cloud_document||[]).push([[129],{5251:(e,o,s)=>{s.r(o),s.d(o,{data:()=>c});const c={key:"v-661abe0c",path:"/microservices/%E5%AE%B9%E5%99%A8%E5%8C%96%E9%83%A8%E7%BD%B2.html",title:"容器化部署",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"本地容器部署",slug:"本地容器部署",children:[{level:3,title:"[1]、本地Docker安装（Windows版）",slug:"_1-、本地docker安装-windows版",children:[]},{level:3,title:"[2]、安装配置MySQL",slug:"_2-、安装配置mysql",children:[]},{level:3,title:"[2]、安装配置PostgreSQL",slug:"_2-、安装配置postgresql",children:[]},{level:3,title:"[3]、安装配置Redis",slug:"_3-、安装配置redis",children:[]},{level:3,title:"[4]、部署Kafka、Zookeeper、Nacos、ELK、Sentinel Dashboard",slug:"_4-、部署kafka、zookeeper、nacos、elk、sentinel-dashboard",children:[]},{level:3,title:"[5]、部署Skywalking",slug:"_5-、部署skywalking",children:[]},{level:3,title:"[6]、服务打包部署",slug:"_6-、服务打包部署",children:[]}]},{level:2,title:"服务器容器部署",slug:"服务器容器部署",children:[]},{level:2,title:"Docker打包设计",slug:"docker打包设计",children:[{level:3,title:"Eurynome Cloud Docker 打包设计初衷",slug:"eurynome-cloud-docker-打包设计初衷",children:[]},{level:3,title:"Eurynome Cloud Docker 打包的设计",slug:"eurynome-cloud-docker-打包的设计",children:[]},{level:3,title:"Eurynome Cloud Docker 打包使用方法",slug:"eurynome-cloud-docker-打包使用方法",children:[]}]}],filePathRelative:"microservices/容器化部署.md",git:{updatedTime:1631030613e3,contributors:[{name:"herodotus",email:"pointer_v@qq.com",commits:1}]}}},6621:(e,o,s)=>{s.r(o),s.d(o,{default:()=>P});var c=s(6252);const r=(0,c.uE)('<h1 id="容器化部署" tabindex="-1"><a class="header-anchor" href="#容器化部署" aria-hidden="true">#</a> 容器化部署</h1><h2 id="本地容器部署" tabindex="-1"><a class="header-anchor" href="#本地容器部署" aria-hidden="true">#</a> 本地容器部署</h2><p>本地采用容器方式进行项目的部署，因为每个人使用的电脑、操作系统都各不相同，加之不同人的喜好和偏好也不尽相同，无法做到全覆盖。</p><div class="custom-container tip"><p class="custom-container-title">提示</p><p>这里仅以容器方式安装<code>Nacos</code>、<code>ELK</code>、<code>Kafka</code>、<code>Zookeeper</code>、<code>Sentinel</code>，本地安装<code>PostgreSQL</code>、<code>MySQL</code>和<code>Redis</code>的方式，进行示意性说明。仅供参考，具体安装请结合自身及时情况，适时调整。</p></div><p><strong>本地安装</strong></p><ul><li>PostgreSQL</li><li>MySQL</li><li>Redis</li></ul><p><strong>容器安装</strong></p><ul><li>Nacos</li><li>ELK</li><li>Kafka &amp; Zookeeper</li><li>Sentinel</li></ul><h3 id="_1-、本地docker安装-windows版" tabindex="-1"><a class="header-anchor" href="#_1-、本地docker安装-windows版" aria-hidden="true">#</a> [1]、本地Docker安装（Windows版）</h3><ul><li>Windows 本地安装 Docker 请参考个人博文：</li></ul>',10),n={href:"https://blog.csdn.net/Pointer_v/article/details/106176846?spm=1001.2014.3001.5501",target:"_blank",rel:"noopener noreferrer"},l=(0,c.Uk)("Windows 10 2004 (20H1) 安装 Docker Desktop for Windows (2.3.0.2) 以 WSL 2 方式运行容器"),a={href:"https://blog.csdn.net/Pointer_v/article/details/106910766?spm=1001.2014.3001.5501",target:"_blank",rel:"noopener noreferrer"},d=(0,c.Uk)("Windows 10 将 Docker Desktop for Windows（WSL 2 方式）文件存储移出C盘放置到其它目录"),i=(0,c._)("h3",{id:"_2-、安装配置mysql",tabindex:"-1"},[(0,c._)("a",{class:"header-anchor",href:"#_2-、安装配置mysql","aria-hidden":"true"},"#"),(0,c.Uk)(" [2]、安装配置MySQL")],-1),t=(0,c._)("ol",null,[(0,c._)("li",null,[(0,c._)("strong",null,"正常安装MySQL")]),(0,c._)("li",null,[(0,c._)("strong",null,"创建Nacos持久化数据库")])],-1),p=(0,c._)("p",null,"即在MySQL中，为Nacos新建用户、新建数据库、给数据库用户分配数据库权限。",-1),u=(0,c._)("ol",{start:"3"},[(0,c._)("li",null,[(0,c._)("strong",null,"导入Nacos初始脚本")])],-1),k={href:"https://github.com/alibaba/nacos/releases",target:"_blank",rel:"noopener noreferrer"},m=(0,c.Uk)("下载"),g=(0,c.Uk)("最新稳定版的Nacos压缩包。解压后，在"),h=(0,c._)("code",null,"{NACOS_HOME}/conf",-1),b=(0,c.Uk)("目录下，找到"),v=(0,c._)("code",null,"nacos-mysql.sql",-1),f=(0,c.Uk)("导入到数据库中。"),_=(0,c.uE)('<div class="custom-container tip"><p class="custom-container-title">提示</p><p>在工程的<code>${project home}/configurations/scripts</code>目录下，保存了一份Nacos脚本可以使用，如果不是最新请自行重新下载。</p></div><ol start="4"><li><strong>开放MySQL数据库IP访问</strong></li></ol><p>正常情况下，本地开发使用<code>localhost</code>就可以访问已安装的mysql服务; 因为Docker是使用内部的独立网络，Docker内部容器想要访问外部的数据库，只能通过ip地址才能访问。所以需要开放数据库的IP访问，否则会出现 Docker 容器发无法连接数据库的情况。</p><p>使用命令行工具，登录进入MySQL，输入以下脚本查看数据库的可访问情况：</p><div class="language-mysql ext-mysql line-numbers-mode"><pre class="language-mysql"><code>mysql&gt; select host,user from mysql.user;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>查询结果示例：</p><div class="language-mysql ext-mysql line-numbers-mode"><pre class="language-mysql"><code>| host      | user             |\n| --------- | ---------------- |\n| localhost | root             |\n| localhost | mysql.infoschema |\n| localhost | mysql.session    |\n| localhost | mysql.sys        |\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p><strong>host字段的值是localhost，说明只允许本地访问</strong></p><p>找到对应你所用的用户，设置允许任意IP访问，执行语句：</p><div class="language-mysql ext-mysql line-numbers-mode"><pre class="language-mysql"><code>mysql&gt; update mysql.user set host = &#39;%&#39; where user = &#39;root&#39;;\n\nmysql&gt; flush privileges;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="_2-、安装配置postgresql" tabindex="-1"><a class="header-anchor" href="#_2-、安装配置postgresql" aria-hidden="true">#</a> [2]、安装配置PostgreSQL</h3><ol><li><strong>安装PostgreSQL数据库</strong></li></ol><p>正常安装即可。跟随安装的Wizard一步一步进行即可。</p><ol start="2"><li><strong>创建应用数据库</strong></li></ol>',14),y=(0,c.Uk)("参见："),E=(0,c.Uk)("创建应用数据"),D=(0,c._)("ol",{start:"3"},[(0,c._)("li",null,[(0,c._)("strong",null,"导入建表数据")])],-1),w=(0,c.Uk)("参见："),S=(0,c.Uk)("导入数据库脚本"),x=(0,c.uE)('<ol start="4"><li><strong>开放IP访问</strong></li></ol><p>如果想要使用Docker封装的服务，就需要开放<code>PostgreSQL</code>的IP访问。Windows环境，链接<code>PostgreSQL</code>是主机名填写<code>“localhost”</code>可以正常链接，使用IP地址不能进行链接</p><p>在<code>${PostgreSQL_HOME}/12/data</code>目录下，找到<code>postgresql.conf</code>和<code>pg_hba.conf</code>。</p><ul><li>打开<code>postgresql.conf</code>，在59行，找到<code>listen_addresses</code>，修改为：</li></ul><div class="language-conf ext-conf line-numbers-mode"><pre class="language-conf"><code>listen_addresses = &#39;*&#39;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ul><li>修改端口号打开<code>postgresql.conf</code>，在63行，找到port</li></ul><blockquote><p>PostgreSQL 12 中，该项默认就为 ‘*’，所以可以不用修改</p></blockquote><ul><li>打开<code>pg_hba.conf</code>，在最后增加：</li></ul><div class="language-conf ext-conf line-numbers-mode"><pre class="language-conf"><code>host    all             all             192.168.0.0/16          trust\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><blockquote><p>允许访问PostgreSQL服务器的客户端IP地址, 其中：192.168.0.0/16表示允许192.168.0.1-192.168.255.255网段访问。可根据实际情况调整</p></blockquote><ul><li>重启数据服务</li></ul><h3 id="_3-、安装配置redis" tabindex="-1"><a class="header-anchor" href="#_3-、安装配置redis" aria-hidden="true">#</a> [3]、安装配置Redis</h3><ol><li>安装Redis</li></ol><p>正常安装即可</p><ol start="2"><li>开放IP访问</li></ol><p>在<code>redis</code>安装目录下，找到<code>redis.windows-service.conf</code></p><ul><li>将 <code>56</code> 行 <code>bind 127.0.0.1</code> 注释掉，修改为</li></ul><div class="language-conf ext-conf line-numbers-mode"><pre class="language-conf"><code>#bind 127.0.0.1\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ul><li>将 <code>75</code> 行 <code>protected-mode</code> 参数改为 <code>no</code></li></ul><div class="language-conf ext-conf line-numbers-mode"><pre class="language-conf"><code>protected-mode no\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><blockquote><p>生产环境不建议这样，还是要指定具体IP安全一些</p></blockquote><ul><li>重启服务</li></ul><h3 id="_4-、部署kafka、zookeeper、nacos、elk、sentinel-dashboard" tabindex="-1"><a class="header-anchor" href="#_4-、部署kafka、zookeeper、nacos、elk、sentinel-dashboard" aria-hidden="true">#</a> [4]、部署Kafka、Zookeeper、Nacos、ELK、Sentinel Dashboard</h3><p>除了<code>MySQL</code>、<code>PostgreSQL</code>和<code>Redis</code>以外，其它相关运行环境组件 <code>Zookeeper</code>、<code>Kafka</code>、<code>Nacos</code>、<code>ELK</code>、<code>Sentinel Dashboard</code>，可以通过<code>docker-compose</code>方式进行部署，执行以下命令即可：</p><ul><li>运行容器</li></ul>',25),q={class:"custom-container danger"},j=(0,c.uE)('<p class="custom-container-title">注意：</p><p><code>ELK</code> 依赖一个重要参数 <code>vm.max_map_count</code>，如果这个值小于<code>262144</code>，<code>ELK</code> 会无法正常启动</p><p>一种解决办法</p><p>如果是采用 <code>WSL2</code> 的方式运行容器，那么在Linux中输入以下命令</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">sudo</span> -i\n<span class="token function">sudo</span> sysctl vm.max_map_count<span class="token operator">=</span><span class="token number">524288</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>然后在启动Docker Desktop</p><p>另一种解决办法：</p><ul><li>open powershell</li><li>wsl -d docker-desktop</li><li>echo &quot;vm.max_map_count = 262144&quot; &gt; /etc/sysctl.d/99-docker-desktop.conf</li></ul>',8),L=(0,c.Uk)("参考 : "),A={href:"https://github.com/docker/for-win/issues/5202",target:"_blank",rel:"noopener noreferrer"},$=(0,c.Uk)("https://github.com/docker/for-win/issues/5202"),C=(0,c.uE)('<div class="custom-container tip"><p class="custom-container-title">说明</p><p>已经将Dockerfile以及docker-compose修改为参数运行。</p><p>因此运行一下命令时，请确保.env 文件在执行命令的目录下。</p><p>例如：如果在<code>C:\\Users\\Administrator\\Desktop</code>执行命令，那么<code>.env</code>文件，就需要在<code>C:\\Users\\gengwei.zheng\\Desktop</code>目录下</p></div><div class="language-docker ext-docker line-numbers-mode"><pre class="language-docker"><code>docker-compose -f ${project_home}/configurations/docker/docker-compose/herodotus/env.base.yml up -d\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><blockquote><p>该命令会查看本地是否已经有了相关镜像，如果没有会首先下载镜像，然后再运行，请先保证网络畅通</p></blockquote><ul><li>停止容器</li></ul><div class="language-docker ext-docker line-numbers-mode"><pre class="language-docker"><code>docker-compose -f ${project_home}/configurations/docker/docker-compose/herodotus/env.base.yml stop\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ul><li>停止并删除容器</li></ul><div class="language-docker ext-docker line-numbers-mode"><pre class="language-docker"><code>docker-compose -f ${project home}/configurations/docker/docker-compose/herodotus/env.base.yml down\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="_5-、部署skywalking" tabindex="-1"><a class="header-anchor" href="#_5-、部署skywalking" aria-hidden="true">#</a> [5]、部署Skywalking</h3><div class="custom-container warning"><p class="custom-container-title">注意</p><p>由于 <code>Skywalking</code> 采用 <code>Elasticsearch</code> 进行数据存储，因此 <code>Skywalking</code>运行之前，要保证 <code>Elasticsearch</code> 已经正常运行。</p><p>虽然docker-compose有depends_on属性，但是该属性只能解决容器启动的先后顺序问题，并不能实现某一个容器及容器内部所有应用启动成功之后再运行的问题。</p><p>因此，这里将环境依赖的应用，拆分为两个<code>docker-compose</code>文件，</p><ul><li>先运行<code>${project_home}/configurations/docker/docker-compose/herodotus/env.base.yml</code>，待所有容器及内部服务成功运行之后，</li><li>再运行<code>${project_home}/configurations/docker/docker-compose/herodotus/env.skywalking.yml</code></li></ul></div><p>通过docker-compose方式进行部署，执行以下命令即可：</p><ul><li>运行容器</li></ul><div class="language-docker ext-docker line-numbers-mode"><pre class="language-docker"><code>docker-compose -f ${project_home}/configurations/docker/docker-compose/herodotus/env.skywalking.yml  up -d\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><blockquote><p>该命令会查看本地是否已经有了相关镜像，如果没有会首先下载镜像，然后再运行，请先保证网络畅通</p></blockquote><ul><li>停止容器</li></ul><div class="language-docker ext-docker line-numbers-mode"><pre class="language-docker"><code>docker-compose -f ${project_home}/configurations/docker/docker-compose/herodotus/env.skywalking.yml stop\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ul><li>停止并删除容器</li></ul><div class="language-docker ext-docker line-numbers-mode"><pre class="language-docker"><code>docker-compose -f ${project_home}/configurations/docker/docker-compose/herodotus/env.skywalking.yml down\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="_6-、服务打包部署" tabindex="-1"><a class="header-anchor" href="#_6-、服务打包部署" aria-hidden="true">#</a> [6]、服务打包部署</h3><p>在命令行中，执行以下命令即可</p><ul><li>运行容器</li></ul><div class="language-docker ext-docker line-numbers-mode"><pre class="language-docker"><code>docker-compose -f ${project home}/configurations/docker/docker-compose/herodotus/services.dev.yml --env-file=${project_home}/configurations/docker/docker-compose/herodotus/.env up -d\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><blockquote><p>该命令会查看本地是否已经有了相关镜像，如果没有会首先构建镜像，然后再运行，请先保证网络畅通</p></blockquote><ul><li>停止容器</li></ul><div class="language-docker ext-docker line-numbers-mode"><pre class="language-docker"><code>docker-compose -f ${project home}/configurations/docker/docker-compose/herodotus/services.dev.yml --env-file=${project_home}/configurations/docker/docker-compose/herodotus/.env up -d stop\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ul><li>停止并删除容器</li></ul><div class="language-docker ext-docker line-numbers-mode"><pre class="language-docker"><code>docker-compose -f ${project home}/configurations/docker/docker-compose/herodotus/services.dev.yml --env-file=${project_home}/configurations/docker/docker-compose/herodotus/.env up -d down\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="服务器容器部署" tabindex="-1"><a class="header-anchor" href="#服务器容器部署" aria-hidden="true">#</a> 服务器容器部署</h2><div class="custom-container tip"><p class="custom-container-title">提示</p><p>应用环境的部署是一项大工程，同样的基础设施根据不同应用场景需求，可以采用多种多样不同的方式进行部署。基础设施的部署也比较复杂，其中任意一项都可以单独作为专门话题进行讨论。这就是所谓的“<strong>千人千面</strong>”， 而且基础设施部署并不是本项目的重点，所以此处不再展开。当然，只要是技术问题，欢迎在群里积极讨论交流。</p></div><p>使用Docker-compose打包Docker，参见[Eurynome Cloud Docker 打包使用方法](#Eurynome Cloud Docker 打包使用方法)</p><h2 id="docker打包设计" tabindex="-1"><a class="header-anchor" href="#docker打包设计" aria-hidden="true">#</a> Docker打包设计</h2><h3 id="eurynome-cloud-docker-打包设计初衷" tabindex="-1"><a class="header-anchor" href="#eurynome-cloud-docker-打包设计初衷" aria-hidden="true">#</a> Eurynome Cloud Docker 打包设计初衷</h3><p>Eurynome Cloud Docker 打包的设计，采取了与大多数开源微服务框架不同的方式。采取这种不同的方式进行打包，主要是考虑解决以下两方面问题：</p><h4 id="_1-、skwalking-agent的引入问题" tabindex="-1"><a class="header-anchor" href="#_1-、skwalking-agent的引入问题" aria-hidden="true">#</a> [1]、Skwalking Agent的引入问题</h4><p>系统中为了解决服务链路跟踪及监控的问题，引入了Skywalking组件。Skywalking想要正确运行，除了要保证Skywalking Server的<a href="%5B5%5D%E3%80%81%E9%83%A8%E7%BD%B2Skywalking">正常运行</a>外，还要将Skywalking&quot;注入&quot;到服务的运行环境中。</p><ol><li>如果是以<code>fat jar</code>的方式运行服务，需要在服务的运行命令中指定Skywalking Agent以及相关的参数，如下命令</li></ol><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>java -javaagent:/skywalking-agent.jar<span class="token operator">=</span>agent.service_name<span class="token operator">=</span><span class="token variable">${SW_AGENT_SERVICE_NAME}</span>,collector.backend_service<span class="token operator">=</span><span class="token variable">${SW_COLLECTOR_BACKEND_SERVICE}</span> <span class="token variable">${JAVA_OPTS}</span> -jar /app.jar\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ol start="2"><li>如果是以Docker的方式运行服务，传统的方式就需要把<code>skywalking-agent.jar</code>一并打入到服务的docker中。</li></ol><p>由于Docker-compose打包上下文的问题，就需要在每一个模块中都复制一份skywalking-agent.jar。很不好管理，看着也不舒服。</p><h4 id="_2-、dockerfile的编写和放置问题" tabindex="-1"><a class="header-anchor" href="#_2-、dockerfile的编写和放置问题" aria-hidden="true">#</a> [2]、Dockerfile的编写和放置问题</h4><p>常规Java微服务的Docker打包方式，要么采用Maven Plugin的方式，要么采用docker-compose的方式。不管哪一种方式，都需要在该服务代码所在目录下新建一个Dockerfile文件。</p><p>一方面，每个服务下的Dockerfile文件中的配置信息，除了服务的JAR包名不同以外，其余的所有配置都相同，就是一种重复劳动。 另一方面，如果要增加Skywalking，那么需要在每一个服务所在目录下都拷贝一份<code>skywalking-agent.jar</code>。不仅重复工作，代码结构也不美观整洁。</p><h3 id="eurynome-cloud-docker-打包的设计" tabindex="-1"><a class="header-anchor" href="#eurynome-cloud-docker-打包的设计" aria-hidden="true">#</a> Eurynome Cloud Docker 打包的设计</h3><p>为了解决上述两方面问题，<code>Eurynome Cloud</code> 在所有模块之外之指定了一个统一的目录，将需要打包的jar以及dockerfile全部放入该目录，通过该目录形成一个统一的上下文环境。在<strong>Eurynome Cloud</strong>工程中，<code>${project_home}/configurations/docker/context</code>就是这个上下文环境。</p><p>在这个上下文环境中，除了包含通用的Dockerfile、Skywalking Agent以外，在使用Maven进行编译的过程中，还会将所有需要打包服务的对应的jar包拷贝到<code>${project_home}/configurations/docker/context/target</code>目录下。这样打包的所有资源就都已经具备，同时还解决了上述两个问题。</p><div class="custom-container tip"><p class="custom-container-title">提示</p><p>可以通过修改<code>${project_home}/pom.xml</code> 中的<code>&lt;docker.build.directory&gt;</code>值，来改变拷贝jar包的目录</p></div><h3 id="eurynome-cloud-docker-打包使用方法" tabindex="-1"><a class="header-anchor" href="#eurynome-cloud-docker-打包使用方法" aria-hidden="true">#</a> Eurynome Cloud Docker 打包使用方法</h3><h4 id="_1-、修改信息" tabindex="-1"><a class="header-anchor" href="#_1-、修改信息" aria-hidden="true">#</a> [1]、修改信息</h4><p>由于使用了一个统一的Dockerfile来解决重复定义Docker打包配置文件的问题，想要实现使用一个Dockerfile打出不同的Docker，那么就需要通过传参的方式来改变Dockerfile中的值。</p><p>这里采用的是环境变量的方式，在<code>${project_home}/configurations/docker/docker-compose/.env</code>文件中定义这些参数。其中包含版本号以及具体服务对应的包名。所以如果有新增服务或者想要指定版本号，首先就需要修改这个配置文件。</p><h4 id="_2-、执行命令" tabindex="-1"><a class="header-anchor" href="#_2-、执行命令" aria-hidden="true">#</a> [2]、执行命令</h4><p>执行打包命令</p><div class="language-docker ext-docker line-numbers-mode"><pre class="language-docker"><code>docker-compose -f ${project home}/configurations/docker/docker-compose/herodotus/services.dev.yml --env-file=${project_home}/configurations/docker/docker-compose/herodotus/.env up -d\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>或者</p><div class="language-docker ext-docker line-numbers-mode"><pre class="language-docker"><code>docker-compose -f ${project home}/configurations/docker/docker-compose/herodotus/services.prod.yml --env-file=${project_home}/configurations/docker/docker-compose/herodotus/.env up -d\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><div class="custom-container tip"><p class="custom-container-title">说明</p><p>上文说到想要以Docker的方式运行服务并且关联Skywalking，就需要在打包时将Skywalking Agent打入到Docker中。但实际应用中并不是所有环境都需要使用Skywalking，比如：在生产环境需要使用Skywalking，在开发环境中并不需要Skywalking以降低资源消耗。</p><p>因此，Eurynome Cloud 提供了两种打包配置</p><p>使用<code>${project home}/configurations/docker/docker-compose/herodotus/services.dev.yml</code>这个Docker-compose配置文件打包时，对应的Dockerfile文件是<code>${project home}/configurations/docker/context/development/Dockerfile</code>。这个Dockerfile配置中，没有包含Skywalking Agent的拷贝命令。</p><p>使用<code>${project home}/configurations/docker/docker-compose/herodotus/services.prod.yml</code>这个Docker-compose配置文件打包时，对应的Dockerfile文件是<code>${project home}/configurations/docker/context/production/Dockerfile</code>。这个Dockerfile配置中，包含了Skywalking Agent的拷贝命令。</p><p>这样通过不同的命令，实现了对不同Docker环境需求的支持。</p></div>',55),P={render:function(e,o){const s=(0,c.up)("OutboundLink"),P=(0,c.up)("RouterLink");return(0,c.wg)(),(0,c.iD)(c.HY,null,[r,(0,c._)("ol",null,[(0,c._)("li",null,[(0,c._)("a",n,[l,(0,c.Wm)(s)])]),(0,c._)("li",null,[(0,c._)("a",a,[d,(0,c.Wm)(s)])])]),i,t,p,u,(0,c._)("p",null,[(0,c._)("a",k,[m,(0,c.Wm)(s)]),g,h,b,v,f]),_,(0,c._)("p",null,[y,(0,c.Wm)(P,{to:"/documents/%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2.html#%5B2%5D%E3%80%81%E5%88%9B%E5%BB%BA%E6%95%B0%E6%8D%AE%E5%BA%93"},{default:(0,c.w5)((()=>[E])),_:1})]),D,(0,c._)("p",null,[w,(0,c.Wm)(P,{to:"/documents/%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2.html#%5B5%5D%E3%80%81%E5%AF%BC%E5%85%A5%E6%95%B0%E6%8D%AE%E5%BA%93%E8%84%9A%E6%9C%AC"},{default:(0,c.w5)((()=>[S])),_:1})]),x,(0,c._)("div",q,[j,(0,c._)("p",null,[L,(0,c._)("a",A,[$,(0,c.Wm)(s)])])]),C],64)}}}}]);