"use strict";(self.webpackChunkeurynome_cloud_document=self.webpackChunkeurynome_cloud_document||[]).push([[243],{7738:(n,a,s)=>{s.r(a),s.d(a,{data:()=>e});const e={key:"v-cff5f184",path:"/documents/%E5%A4%9A%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE.html",title:"多环境配置",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"什么是多环境配置？",slug:"什么是多环境配置",children:[]},{level:2,title:"Maven 多环境配置",slug:"maven-多环境配置",children:[]},{level:2,title:"Spring Boot 多环境配置",slug:"spring-boot-多环境配置",children:[{level:3,title:"Spring Boot 环境设置机制",slug:"spring-boot-环境设置机制",children:[]},{level:3,title:"配置多环境",slug:"配置多环境",children:[]},{level:3,title:"指定环境",slug:"指定环境",children:[]},{level:3,title:"单一文件写法",slug:"单一文件写法",children:[]}]},{level:2,title:"Nacos 多环境配置",slug:"nacos-多环境配置",children:[{level:3,title:"Data Id",slug:"data-id",children:[]},{level:3,title:"Group",slug:"group",children:[]},{level:3,title:"Namespace",slug:"namespace",children:[]}]},{level:2,title:"Docker和K8S 多环境配置",slug:"docker和k8s-多环境配置",children:[]},{level:2,title:"Eurynome Cloud 的多环境配置",slug:"eurynome-cloud-的多环境配置",children:[{level:3,title:"Eurynome Cloud 中的Maven多环境配置",slug:"eurynome-cloud-中的maven多环境配置",children:[]},{level:3,title:"Eurynome Cloud 中的Spring Boot和Nacos多环境配置",slug:"eurynome-cloud-中的spring-boot和nacos多环境配置",children:[]}]}],filePathRelative:"documents/多环境配置.md",git:{updatedTime:1630997095e3,contributors:[{name:"herodotus",email:"pointer_v@qq.com",commits:1}]}}},2197:(n,a,s)=>{s.r(a),s.d(a,{default:()=>t});const e=(0,s(6252).uE)('<h1 id="多环境配置" tabindex="-1"><a class="header-anchor" href="#多环境配置" aria-hidden="true">#</a> 多环境配置</h1><h2 id="什么是多环境配置" tabindex="-1"><a class="header-anchor" href="#什么是多环境配置" aria-hidden="true">#</a> 什么是多环境配置？</h2><p>在实际项目开发过程中，我们往往需要区分开发，测试，联调、预发布，生产等不同的应用环境。这些应用环境用途不同，对应环境的配置项、稳定性、数据质量、保障性、可接触人群等要求也不同，比如Swagger一般上在生产时是关闭的；不同环境数据库地址、端口号等都是不尽相同的。要是没有多环境的自由切换，部署起来是很繁琐也容易出错的。</p><p>使用多环境配置，可以针对不同的应用环境，提前配置好对应的环境配置信息。在使用时，仅需要修改具体的环境名称，就可以把对应环境配置信息、系统参数等相关内容全部切换。不仅使用便捷，还极大地降低了手工修改参数的出错率。</p><h2 id="maven-多环境配置" tabindex="-1"><a class="header-anchor" href="#maven-多环境配置" aria-hidden="true">#</a> Maven 多环境配置</h2><p>使用<code>Maven</code>可以通过在<code>pom.xml</code>中增加<code>&lt;profiles&gt;</code>配置进行多环境的配置。参见以下示例：</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code>&lt;profiles<span class="token punctuation">&gt;</span>\n    &lt;profile<span class="token punctuation">&gt;</span>\n        &lt;id<span class="token punctuation">&gt;</span>development&lt;/id<span class="token punctuation">&gt;</span>\n        &lt;activation<span class="token punctuation">&gt;</span>\n            &lt;activeByDefault<span class="token punctuation">&gt;</span>true&lt;/activeByDefault<span class="token punctuation">&gt;</span>\n        &lt;/activation<span class="token punctuation">&gt;</span>\n        &lt;properties<span class="token punctuation">&gt;</span>\n            <span class="token punctuation">...</span>\n        &lt;/properties<span class="token punctuation">&gt;</span>\n    &lt;/profile<span class="token punctuation">&gt;</span>\n    &lt;profile<span class="token punctuation">&gt;</span>\n        &lt;id<span class="token punctuation">&gt;</span>produtction&lt;/id<span class="token punctuation">&gt;</span>\n        &lt;properties<span class="token punctuation">&gt;</span>\n            <span class="token punctuation">...</span>\n        &lt;/properties<span class="token punctuation">&gt;</span>\n    &lt;/profile<span class="token punctuation">&gt;</span>\n    &lt;profile<span class="token punctuation">&gt;</span>\n        &lt;id<span class="token punctuation">&gt;</span>testing&lt;/id<span class="token punctuation">&gt;</span>\n        &lt;properties<span class="token punctuation">&gt;</span>\n            <span class="token punctuation">...</span>\n        &lt;/properties<span class="token punctuation">&gt;</span>\n    &lt;/profile<span class="token punctuation">&gt;</span>\n&lt;/profiles<span class="token punctuation">&gt;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><p>通过下面配置就可以指定当前默认的环境是哪个</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code>&lt;activation<span class="token punctuation">&gt;</span>\n    &lt;activeByDefault<span class="token punctuation">&gt;</span>true&lt;/activeByDefault<span class="token punctuation">&gt;</span>\n&lt;/activation<span class="token punctuation">&gt;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>在开发和使用过程中，必须要配置一个默认的环境。配置完成之后，在IDE中也会提供可操作性界面进行操作。下图即为IDEA的界面示例：</p><p><img src="/eurynome-cloud/images/idea/profiles.png" alt="profiles"></p><h2 id="spring-boot-多环境配置" tabindex="-1"><a class="header-anchor" href="#spring-boot-多环境配置" aria-hidden="true">#</a> Spring Boot 多环境配置</h2><h3 id="spring-boot-环境设置机制" tabindex="-1"><a class="header-anchor" href="#spring-boot-环境设置机制" aria-hidden="true">#</a> Spring Boot 环境设置机制</h3><p><code>spring.profiles.active</code> 属性可以为我们指定当前设置的环境，以此来选择我们的配置文件。例如我们有配置文件</p><ul><li>application.yml</li><li>application-dev.yml</li><li>application-test.yml</li><li>application-prod.yml</li></ul><p>当执行 <code>java -jar xxx.jar --spring.profiles.actvie=test</code> 此时，系统将启用 <code>application.yml</code> 和 <code>application-test.yml</code> 配置文件。</p><p>当执行 <code>java -jar xxx.jar --spring.profiles.actvie=prod</code> 此时，系统将启用 <code>application.yml</code> 和 <code>application-prod.yml</code> 配置文件。</p><p>正是这种配置参数可以决定我们使用哪种配置文件，如果我们把不同环境的配置写在对应的配置文件中，我们就可以实现多环境机制。</p><h3 id="配置多环境" tabindex="-1"><a class="header-anchor" href="#配置多环境" aria-hidden="true">#</a> 配置多环境</h3><p>正如上一点所述，我们配置不同的配置文件</p><ul><li>application.yml</li><li>application-dev.yml（开发环境）</li><li>application-test.yml（测试环境）</li><li>application-uat.yml（预发布环境）</li><li>application-prod.yml（生产环境）</li></ul><h3 id="指定环境" tabindex="-1"><a class="header-anchor" href="#指定环境" aria-hidden="true">#</a> 指定环境</h3><ul><li>在 cmd 命令中指定</li></ul><div class="language-cmd ext-cmd line-numbers-mode"><pre class="language-cmd"><code>java -jar xxx.jar --spring.profiles.actvie=dev \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ul><li>在 <code>application.yml</code> 中指定</li></ul><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>\n  <span class="token key atrule">profiles</span><span class="token punctuation">:</span>\n    <span class="token key atrule">active</span><span class="token punctuation">:</span> dev\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li>在IDEA 编辑器中指定</li></ul><p>在运行按钮（绿色三角形按钮）旁边选择 <code>Edit Configurations...</code>，在弹出的对话框中 <code>Active profiles</code> 输入 <code>dev</code> 或其他即可。</p><div class="custom-container warning"><p class="custom-container-title">注意</p><p>这种方法只有在本地调试的时候才生效。</p></div><h3 id="单一文件写法" tabindex="-1"><a class="header-anchor" href="#单一文件写法" aria-hidden="true">#</a> 单一文件写法</h3><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>\n  <span class="token key atrule">application</span><span class="token punctuation">:</span>\n    <span class="token key atrule">name</span><span class="token punctuation">:</span>  @artifactId@\n  <span class="token key atrule">profiles</span><span class="token punctuation">:</span>\n    <span class="token key atrule">active</span><span class="token punctuation">:</span> develpment\n<span class="token punctuation">...</span>\n\n<span class="token punctuation">---</span>\n<span class="token comment"># 开发环境配置</span>\n<span class="token key atrule">spring</span><span class="token punctuation">:</span>\n  <span class="token key atrule">config</span><span class="token punctuation">:</span>\n    <span class="token key atrule">activate</span><span class="token punctuation">:</span>\n      <span class="token key atrule">on-profile</span><span class="token punctuation">:</span> develpment\n\n<span class="token punctuation">---</span>\n<span class="token comment"># 生产环境配置</span>\n<span class="token key atrule">spring</span><span class="token punctuation">:</span>\n  <span class="token key atrule">config</span><span class="token punctuation">:</span>\n    <span class="token key atrule">activate</span><span class="token punctuation">:</span>\n      <span class="token key atrule">on-profile</span><span class="token punctuation">:</span> production\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><h2 id="nacos-多环境配置" tabindex="-1"><a class="header-anchor" href="#nacos-多环境配置" aria-hidden="true">#</a> Nacos 多环境配置</h2><p>本身没有提供统一的多环境管理。在Nacos中，本身有多个不同管理级别的概念，包括：Data ID、Group、Namespace。只要利用好这些层级概念的关系，就可以根据自己的需要来实现多环境的管理。</p><h3 id="data-id" tabindex="-1"><a class="header-anchor" href="#data-id" aria-hidden="true">#</a> Data Id</h3><ol><li><code>Data Id</code>的默认值为<code>${spring.cloud.nacos.config.prefix}-${spring.profile.active}.${spring.cloud.nacos.config.file-extension}</code></li><li><code>spring.cloud.nacos.config.prefix</code>的默认值为<code>${spring.application.name}</code></li><li><code>spring.cloud.nacos.config.file-extension</code>的默认值为<code>properties</code></li><li>当<code>spring.profiles.active</code>未配置时，则匹配<code>${spring.application.name}.properties</code></li><li>若设置了<code>spring.profiles.active</code>而<code>Nacos</code>中存在<code>${spring.application.name}.properties</code>时，若还存在</li><li><code>${spring.application.name}-${spring.profiles.active}.properties</code>，则默认匹配后者，若不存在，则会自动匹配前者 由于<code>Nacos</code>建议且默认用<code>spring.application.name</code>作为<code>Data Id</code>的前缀，若要在不同服务中共享项目统一配置，则可以通过配置<code>spring.cloud.nacos.config.shared-dataids</code>或<code>spring.cloud.nacos.config.refreshable-dataids</code>来添加共享配置，前者不支持自动刷新，后者支持</li></ol><h3 id="group" tabindex="-1"><a class="header-anchor" href="#group" aria-hidden="true">#</a> Group</h3><p><code>Group</code>是一个很灵活的配置项，并没有固定的规定，可以用作多环境、多模块、多版本之间区分配置</p><h3 id="namespace" tabindex="-1"><a class="header-anchor" href="#namespace" aria-hidden="true">#</a> Namespace</h3><p>使用命名空间来区分不同环境的配置，因为使用<code>profiles</code>或<code>group</code>会是不同环境的配置展示到一个页面，而<code>Nacos</code>控制台对不同的<code>Namespace</code>做了<code>Tab</code>栏分组展示</p><p><img src="/eurynome-cloud/images/nacos/namespaces-tab.png" alt="Namespaces Tab"></p><p>创建方式如下图所示</p><p><img src="/eurynome-cloud/images/nacos/namespaces-create.png" alt="Namespaces Create"></p><div class="custom-container danger"><p class="custom-container-title">注意</p><p>配置Namespace的时候不是通过名称，而是通过命名空间的ID(上图所示)，可通过如下配置来设置服务使用的命名空间</p></div><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profile</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">&gt;</span></span>docker<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">&gt;</span></span>\n        <span class="token comment">&lt;!--当前环境--&gt;</span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profile.name</span><span class="token punctuation">&gt;</span></span>docker<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profile.name</span><span class="token punctuation">&gt;</span></span>\n        <span class="token comment">&lt;!--数据库类型--&gt;</span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>database.type</span><span class="token punctuation">&gt;</span></span>postgresql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>database.type</span><span class="token punctuation">&gt;</span></span>\n        <span class="token comment">&lt;!--代码构建控制--&gt;</span>\n        <span class="token comment">&lt;!--跳过构建源代码包--&gt;</span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>skip.build.source.package</span><span class="token punctuation">&gt;</span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>skip.build.source.package</span><span class="token punctuation">&gt;</span></span>\n        <span class="token comment">&lt;!--不copy代码包到docker构建目录--&gt;</span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>skip.copy.docker.resource</span><span class="token punctuation">&gt;</span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>skip.copy.docker.resource</span><span class="token punctuation">&gt;</span></span>\n        <span class="token comment">&lt;!--不执行git commit 构建--&gt;</span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>skip.build.git.commit.info</span><span class="token punctuation">&gt;</span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>skip.build.git.commit.info</span><span class="token punctuation">&gt;</span></span>\n        <span class="token comment">&lt;!--Nacos配置中心地址--&gt;</span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>config.server-addr</span><span class="token punctuation">&gt;</span></span>192.168.101.10:8848<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>config.server-addr</span><span class="token punctuation">&gt;</span></span>\n        <span class="token comment">&lt;!--Nacos配置中心命名空间,用于支持多环境.这里必须使用ID，不能使用名称,默认为空--&gt;</span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>config.namespace</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>config.namespace</span><span class="token punctuation">&gt;</span></span>\n        <span class="token comment">&lt;!--Nacos服务发现地址--&gt;</span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>discovery.server-addr</span><span class="token punctuation">&gt;</span></span>192.168.101.10:8848<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>discovery.server-addr</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sentinel.server-addr</span><span class="token punctuation">&gt;</span></span>192.168.101.10:8858<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sentinel.server-addr</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profile</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><h2 id="docker和k8s-多环境配置" tabindex="-1"><a class="header-anchor" href="#docker和k8s-多环境配置" aria-hidden="true">#</a> Docker和K8S 多环境配置</h2><p><code>Docker</code>和<code>K8S</code>的多环境，因为不同使用者使用的方式不同，<strong>Eurynome Cloud</strong> 并没有过多涉及。<strong>Eurynome Cloud</strong> 中，也简单定义了自己<code>Docker</code>多环境，涉及<code>production</code>和<code>development</code>两个环境，主要区别是<code>production</code>环境docker打包会包含<code>Skywalking Agent</code>，而<code>development</code>环境docker打包只会包含应用，通过执行不同的<code>docker-compose</code>文件进行区分仅此而已。如果不使用<code>Skywalking</code>，使用<code>development</code>环境打包docker即可。</p><h2 id="eurynome-cloud-的多环境配置" tabindex="-1"><a class="header-anchor" href="#eurynome-cloud-的多环境配置" aria-hidden="true">#</a> Eurynome Cloud 的多环境配置</h2><p>微服务架构涉及多方面内容，<strong>Eurynome Cloud</strong>的为解决多环境，综合使用<code>Maven</code>、<code>Spring Boot</code>以及<code>Nacos</code>多环境的特点，以支持微服务的多环境切换和多种数据库的配置支持。</p><h3 id="eurynome-cloud-中的maven多环境配置" tabindex="-1"><a class="header-anchor" href="#eurynome-cloud-中的maven多环境配置" aria-hidden="true">#</a> Eurynome Cloud 中的Maven多环境配置</h3><p><strong>Eurynome Cloud</strong> Maven 多环境配置，在工程根目录下的<code>pom.xml</code>中进行配置。这里的环境配置主要解决以下问题：</p><ol><li><strong>传递参数</strong>：传递<code>&lt;profile.name&gt;</code>和<code>&lt;database.type&gt;</code>两个参数。</li></ol><ul><li><code>&lt;profile.name&gt;</code>的值传递至<code>bootstrap.yml</code>中，这样就可以联动使用<code>Spring Boot</code>和<code>Nacos</code>的多环境配置；</li><li><code>&lt;database.type&gt;</code>参数，传递至<code>bootstrap.yml</code>中，用于指定具体使用的数据库配置</li></ul><ol start="2"><li><strong>Dashboard</strong>：通过<code>&lt;skip.build.source.package&gt;</code>、<code>&lt;skip.copy.docker.resource&gt;</code>和<code>&lt;skip.build.git.commit.info&gt;</code>三个参数进行打包控制。</li></ol><ul><li><code>&lt;skip.build.source.package&gt;</code> 控制是否构建源代码包：构建源代码包便于调试<code>eurynome-cloud-athena</code>的调试。</li><li><code>&lt;skip.copy.docker.resource&gt;</code> 控制是否拷贝服务jar包：编译完成后，将可执行额外操作，将服务jar包拷贝到统一的docker build context下，使用统一配置build docker，这样就不必每一个服务都编写<code>Dockerfile</code></li><li><code>&lt;skip.build.git.commit.info&gt;</code> 控制是否生成Git信息：是否将Git commit等相关信息在编译打包时，写入到jar包中。写入Git commit等相关信息，可以便于在运维过程中快速区分不同jar对应的提交信息、编译、开发者等相关信息。</li></ul><ol start="3"><li><strong><code>Nacos</code> 和 <code>Sentinel Dashboard</code>地址指定</strong>：</li></ol><p>指定不同环境下<code>Nacos</code>配置中心、服务发现和<code>Sentinel Dashboard</code>的地址，<code>Nacos</code>配置中心、服务发现地址无法写在<code>Nacos</code>的配置中，所以在此处进行设置。</p><h3 id="eurynome-cloud-中的spring-boot和nacos多环境配置" tabindex="-1"><a class="header-anchor" href="#eurynome-cloud-中的spring-boot和nacos多环境配置" aria-hidden="true">#</a> Eurynome Cloud 中的Spring Boot和Nacos多环境配置</h3><ul><li>通过<code>Spring Boot</code>的<code>profiles</code>机制，实现<code>Spring Boot</code>与<code>Nacos</code>的联动。</li><li>利用<code>Nacos</code>的<code>Group</code>信息，实现<code>Nacos</code>配置的多环境。<code>${project_home}/platform/eurynome-cloud-management/resources/configs</code>目录下，还有一级目录。这级目录的名称，是对应<code>Nacos</code>中的<code>Group</code>。所以在向<code>Nacos</code>导入配置时，一定要注意<code>Group</code>的创建和匹配。切勿全部导入到<code>DEFAULT</code>组下，这样会导致无法正常运行。</li></ul>',58),t={render:function(n,a){return e}}}}]);