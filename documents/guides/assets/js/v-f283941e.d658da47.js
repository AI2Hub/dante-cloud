"use strict";(self.webpackChunkeurynome_cloud_document=self.webpackChunkeurynome_cloud_document||[]).push([[658],{5517:(e,o,d)=>{d.r(o),d.d(o,{data:()=>c});const c={key:"v-f283941e",path:"/documents/%E6%95%B0%E6%8D%AE%E5%88%9D%E5%A7%8B%E5%8C%96.html",title:"数据初始化",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"系统初次部署数据库初始化内容",slug:"系统初次部署数据库初始化内容",children:[]},{level:2,title:"数据表及数据初始化说明",slug:"数据表及数据初始化说明",children:[{level:3,title:"[1]、OAuth2 标准表结构的创建",slug:"_1-、oauth2-标准表结构的创建",children:[]},{level:3,title:"[2]、服务中涉及业务表的创建",slug:"_2-、服务中涉及业务表的创建",children:[]},{level:3,title:"[3]、个别View或函数的创建（可选）",slug:"_3-、个别view或函数的创建-可选",children:[]},{level:3,title:"[4]、默认用户、角色等数据的初始化",slug:"_4-、默认用户、角色等数据的初始化",children:[]},{level:3,title:"[5]、服务Rest API接口数据初始化",slug:"_5-、服务rest-api接口数据初始化",children:[]}]},{level:2,title:"数据表和数据自动初始化",slug:"数据表和数据自动初始化",children:[{level:3,title:"解决办法",slug:"解决办法",children:[]},{level:3,title:"具体步骤",slug:"具体步骤",children:[]}]},{level:2,title:"系统默认账号",slug:"系统默认账号",children:[]}],filePathRelative:"documents/数据初始化.md",git:{updatedTime:1631030613e3,contributors:[{name:"herodotus",email:"pointer_v@qq.com",commits:1}]}}},2038:(e,o,d)=>{d.r(o),d.d(o,{default:()=>a});const c=(0,d(6252).uE)('<h1 id="数据初始化" tabindex="-1"><a class="header-anchor" href="#数据初始化" aria-hidden="true">#</a> 数据初始化</h1><h2 id="系统初次部署数据库初始化内容" tabindex="-1"><a class="header-anchor" href="#系统初次部署数据库初始化内容" aria-hidden="true">#</a> 系统初次部署数据库初始化内容</h2><p><strong>Eurynome Cloud</strong> 在初次使用时，数据初始化涉及以下内容：</p><ul><li>数据库表创建，其中涉及以下几部分表的创建： <ol><li>OAuth2 标准表结构的创建</li><li>服务中涉及业务表的创建</li><li>个别View或函数的创建</li></ol></li><li>默认数据初始化，其中涉及以下几部分数据的初始化 <ol><li>默认用户、角色等数据的初始化</li><li>平台已有服务Rest API接口数据初始化以及权限数据的转化。</li></ol></li></ul><h2 id="数据表及数据初始化说明" tabindex="-1"><a class="header-anchor" href="#数据表及数据初始化说明" aria-hidden="true">#</a> 数据表及数据初始化说明</h2><h3 id="_1-、oauth2-标准表结构的创建" tabindex="-1"><a class="header-anchor" href="#_1-、oauth2-标准表结构的创建" aria-hidden="true">#</a> [1]、OAuth2 标准表结构的创建</h3><p>目前系统提供<code>MySQL</code>和 <code>PostgreSQL</code> 两种数据库的<code>OAuth2</code>标准的表结构创建脚本，可以在工程的<code>${project_home}/configurations/scripts</code>目录下找到对应的Schema SQL脚本。</p><p>在<code>${project_home}/packages/eurynome-cloud-security</code>包的<code>resources</code>目录中，也存有一份<code>OAuth2</code>的表结构创建脚本以及默认数据的导入脚本。这些脚本与<code>${project_home}/configurations/scripts</code>内容一致，主要是用于微服务版和单体版的自动化表结构创建和数据初始化，具体用法后面会讲到。</p><h3 id="_2-、服务中涉及业务表的创建" tabindex="-1"><a class="header-anchor" href="#_2-、服务中涉及业务表的创建" aria-hidden="true">#</a> [2]、服务中涉及业务表的创建</h3><p>系统虽然同时支持<code>Mybatis</code>和<code>JPA</code>，但是已有服务的代码实现目前均是基于<code>JPA</code>编写，因此服务中涉及的业务表，只要<code>spring.jpa.hibernate.ddl-auto</code>属性设置为非<code>none</code>值，那么就可以自动创建。</p><div class="custom-container tip"><p class="custom-container-title">提示</p><p>在微服务架构，可以通过修改<code>Nacos</code>对应环境下（系统支持多环境，不同环境对应Nacos不同的组）的<code>eurynome-cloud-environment.yaml</code>配置中的<code>herodotus.switch.database.ddl-auto</code>值进行修改。</p></div><h3 id="_3-、个别view或函数的创建-可选" tabindex="-1"><a class="header-anchor" href="#_3-、个别view或函数的创建-可选" aria-hidden="true">#</a> [3]、个别View或函数的创建（可选）</h3><p>如果已有功能使用到了数据库的视图、函数（或存储过程）等特性，那么会提供相应的创建脚本，可以在工程的<code>${project_home}/configurations/scripts</code>目录下找到对应的Schema SQL脚本。</p><blockquote><p>注：目前开源版本暂不涉及，可以忽略本项内容</p></blockquote><h3 id="_4-、默认用户、角色等数据的初始化" tabindex="-1"><a class="header-anchor" href="#_4-、默认用户、角色等数据的初始化" aria-hidden="true">#</a> [4]、默认用户、角色等数据的初始化</h3><p>表结构创建完成之后，可以通过导入数据初始化脚本，导入系统默认的用户、角色以及<code>OAuth2</code>相关数据。该脚本可以在<code>${project_home}/services/eurynome-cloud-upms-ability</code>包的<code>resources</code>目录下找到。</p><h3 id="_5-、服务rest-api接口数据初始化" tabindex="-1"><a class="header-anchor" href="#_5-、服务rest-api接口数据初始化" aria-hidden="true">#</a> [5]、服务Rest API接口数据初始化</h3><p>系统基础的权限数据，来源于所有服务中包含的<code>Rest API</code>接口。为了方便使用，服务在正常启动之后，会扫描所有的<code>RestController</code>，获取其中所有的接口信息后，存入系统的<code>sys_authority</code>表作为权限数据。</p><div class="custom-container tip"><p class="custom-container-title">说明</p><p>系统对扫描<code>RestController</code>，获取接口信息功能提供了开关配置，可以通过配置设置是否开启扫描功能。同时，考虑到减少配置，提高使用的便捷性，所以是否开启注解扫描的配置直接使用的是<code>spring.jpa.hibernate.ddl-auto</code>的值。即：如果<code>spring.jpa.hibernate.ddl-auto</code>的值是<code>none</code>，那么就关闭注解扫描功能。</p></div><div class="custom-container tip"><p class="custom-container-title">说明</p><p>系统是以服务名、请求类型以及请求URL组合值的MD5值作为权限的ID，所以只要保证“服务名、请求类型、请求URL”这三个值不改变，那么权限的ID就不会变化。其中任意一个值有变化，就会被当成新的权限数据存入<code>sys_authority</code>表中，这时就一定请注意你所配置的role和authority的关系。</p></div><div class="custom-container tip"><p class="custom-container-title">说明</p><p>扫描所有的<code>RestController</code>获取接口信息后，是使用 jpa 的<code>save()</code>方法进行权限数据的保存。这个方法既有新增功能又有更新功能，如果<code>sys_authority</code>表中没有该条权限数据就新增，如果有那么就更新。因此，尽量不要手动修改<code>sys_authority</code>的值，修改后的值会被重新的扫描<code>RestController</code>获取到的值覆盖。</p></div><h2 id="数据表和数据自动初始化" tabindex="-1"><a class="header-anchor" href="#数据表和数据自动初始化" aria-hidden="true">#</a> 数据表和数据自动初始化</h2><p>因为是使用<code>spring-data-jpa</code>，所以可以使用<code>spring-data-jpa</code>提供的机制进行数据表和数据自动初始化。</p><p><code>spring-data-jpa</code>中，jpa的默认实现使用的是<code>Hibernate</code>。提供了基于<code>JDBC</code>和<code>Hibernate</code>两部分数据表创建和初始化机制：</p><ul><li>基于JDBC的初始化机制：通过配置spring.sql.init相关属性实现，使用jdbc读取sql脚本实现。schema相关脚本创建表、视图、存储过程等，data相关脚本导入数据。</li><li>基于Hibernate的初始化机制：通过配置spring.jpa.hibernate.ddl-auto相关属性实现，利用Hibernate自身的机制实现。目前只用到的了建表功能。</li></ul><p><strong>Eurynome Cloud</strong>的数据表和数据自动初始化就是基于这两种机制实现，用<code>Hibernate</code>的初始化机制创建服务涉及的相关业务表，用<code>JDBC</code>的初始化机制创建<code>OAuth2</code>的标准表和导入所有的初始化数据。</p><p>由于<code>spring-data-jpa</code>的<code>JDBC</code>的初始化机制，在服务启动过程中会早于<code>Hibernate</code>的初始化机制执行，这就导致在第一次执行数据表和数据自动初始化时会出现问题：服务涉及的业务表还没有创建，<code>JDBC</code>的初始化机制就可开始导入数据，导致数据初始化失败。</p><h3 id="解决办法" tabindex="-1"><a class="header-anchor" href="#解决办法" aria-hidden="true">#</a> 解决办法</h3><ol><li>将所有表结构和初始数据全部生成为SQL脚本，只使用JDBC的初始化机制进行初始化。因为目前没有使用flyway等数据库版本管理，手动管理的数据库脚本越多，就越容易出现数据库变更后脚本更新不及时导致出错率增大的问题。（后续考虑增加flyway等数据库版本管理功能）</li><li>还是综合使用JDBC的初始化机制和Hibernate的初始化机制，使用一种绕的办法解决初始化时机不同的问题。</li></ol><h3 id="具体步骤" tabindex="-1"><a class="header-anchor" href="#具体步骤" aria-hidden="true">#</a> 具体步骤</h3><ol><li>设置属性<code>spring.sql.init.mode=never</code>、<code>spring.jpa.hibernate.ddl-auto=create</code>，先启动一次服务。这次启动<code>Hibernate</code>会把所有服务涉及的业务表创建出来，同时系统会把所有的扫描到的<code>RestController</code>接口存储至<code>sys_authority</code>表中。然后，停掉该服务。</li><li>设置属性<code>spring.sql.init.mode=always</code>、<code>spring.jpa.hibernate.ddl-auto=update</code>，再一次启动服务。这次服务启动会<code>JDBC</code>的初始化机制就会创建<code>OAuth2</code>的表结构，以及导入所有初始化数据而不会出错。</li><li>数据初始化成功后，请注意将属性<code>spring.sql.init.mode</code>改回<code>never</code>，防止下次运行再次导入数据导致主键冲突等问题。属性spring.jpa.hibernate.ddl-auto的值可以根据自己实际使用需求需改。一般在开发阶段或设置为<code>update</code>或者<code>none</code>。</li></ol><h2 id="系统默认账号" tabindex="-1"><a class="header-anchor" href="#系统默认账号" aria-hidden="true">#</a> 系统默认账号</h2><p>系统部署完成后，可以使用一下账号进行登录使用：</p><ul><li>默认用户名：<strong>system</strong></li><li>默认密码：<strong>123456</strong></li></ul>',34),a={render:function(e,o){return c}}}}]);