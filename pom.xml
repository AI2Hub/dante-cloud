<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>cn.herodotus.eurynome</groupId>
        <artifactId>dependencies</artifactId>
        <version>1.1.1</version>
        <relativePath>dependencies/pom.xml</relativePath>
    </parent>

    <artifactId>eurynome-cloud</artifactId>
    <version>1.1.1</version>
    <packaging>pom</packaging>

    <name>eurynome-cloud</name>
    <description>Top Eurynome project pom.xml file</description>

    <properties>
        <java.version>1.8</java.version>
        <resource.delimiter>@</resource.delimiter>
        <maven.compiler.source>${java.version}</maven.compiler.source>
        <maven.compiler.target>${java.version}</maven.compiler.target>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
    </properties>

    <!-- 所有的子项目默认依赖 -->
    <dependencies>

    </dependencies>

    <!-- 管理依赖版本号,子项目不会默认依赖 -->
    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>${project.groupId}</groupId>
                <artifactId>eurynome-cloud-common</artifactId>
                <version>${project.version}</version>
            </dependency>
            <dependency>
                <groupId>${project.groupId}</groupId>
                <artifactId>eurynome-cloud-kernel</artifactId>
                <version>${project.version}</version>
            </dependency>
            <dependency>
                <groupId>${project.groupId}</groupId>
                <artifactId>eurynome-cloud-data</artifactId>
                <version>${project.version}</version>
            </dependency>
            <dependency>
                <groupId>${project.groupId}</groupId>
                <artifactId>eurynome-cloud-rest</artifactId>
                <version>${project.version}</version>
            </dependency>
            <dependency>
                <groupId>${project.groupId}</groupId>
                <artifactId>eurynome-cloud-crud</artifactId>
                <version>${project.version}</version>
            </dependency>
            <dependency>
                <groupId>${project.groupId}</groupId>
                <artifactId>eurynome-cloud-security</artifactId>
                <version>${project.version}</version>
            </dependency>
            <dependency>
                <groupId>${project.groupId}</groupId>
                <artifactId>eurynome-cloud-operation</artifactId>
                <version>${project.version}</version>
            </dependency>
            <dependency>
                <groupId>${project.groupId}</groupId>
                <artifactId>eurynome-cloud-message</artifactId>
                <version>${project.version}</version>
            </dependency>
            <dependency>
                <groupId>${project.groupId}</groupId>
                <artifactId>eurynome-cloud-starter</artifactId>
                <version>${project.version}</version>
            </dependency>
            <dependency>
                <groupId>${project.groupId}</groupId>
                <artifactId>eurynome-cloud-upms-api</artifactId>
                <version>${project.version}</version>
            </dependency>
            <dependency>
                <groupId>${project.groupId}</groupId>
                <artifactId>eurynome-cloud-upms-logic</artifactId>
                <version>${project.version}</version>
            </dependency>
            <dependency>
                <groupId>${project.groupId}</groupId>
                <artifactId>eurynome-cloud-bpmn-logic</artifactId>
                <version>${project.version}</version>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <modules>
        <module>dependencies</module>
        <module>packages</module>
        <module>services</module>
        <module>platform</module>
    </modules>

    <!-- 环境 -->
    <profiles>
        <!-- 开发 -->
        <profile>
            <id>development</id>
            <properties>
                <!--当前环境-->
                <profile.name>development</profile.name>
                <database.type>postgresql</database.type>
                <!--Nacos配置中心地址-->
                <config.server-addr>127.0.0.1:8848</config.server-addr>
                <!--Nacos配置中心命名空间,用于支持多环境.这里必须使用ID，不能使用名称,默认为空-->
                <config.namespace></config.namespace>
                <!--Nacos服务发现地址-->
                <discovery.server-addr>127.0.0.1:8848</discovery.server-addr>
                <sentinel.server-addr>127.0.0.1:8858</sentinel.server-addr>
                <!--为了便于Docker的构建，减少上下文影响，将所有Docker资源放置在同一个目录中进行构建-->
                <docker.build.directory>../../documents/docker/context/target</docker.build.directory>
            </properties>
        </profile>
        <!-- Docker -->
        <profile>
            <id>docker</id>
            <activation>
                <!--默认激活配置-->
                <activeByDefault>true</activeByDefault>
            </activation>
            <properties>
                <!--当前环境-->
                <profile.name>docker</profile.name>
                <database.type>postgresql</database.type>
                <!--Nacos配置中心地址-->
                <config.server-addr>192.168.101.10:8848</config.server-addr>
                <!--Nacos配置中心命名空间,用于支持多环境.这里必须使用ID，不能使用名称,默认为空-->
                <config.namespace></config.namespace>
                <!--Nacos服务发现地址-->
                <discovery.server-addr>192.168.101.10:8848</discovery.server-addr>
                <sentinel.server-addr>192.168.101.10:8858</sentinel.server-addr>
                <!--为了便于Docker的构建，减少上下文影响，将所有Docker资源放置在同一个目录中进行构建-->
                <docker.build.directory>../../documents/docker/context/target</docker.build.directory>
            </properties>
        </profile>
        <!-- 测试 -->
        <profile>
            <id>testing</id>
            <properties>
                <!--当前环境-->
                <profile.name>testing</profile.name>
                <database.type>postgresql</database.type>
                <!--Nacos配置中心地址-->
                <config.server-addr>10.180.80.80:8848</config.server-addr>
                <!--Nacos配置中心命名空间,用于支持多环境.这里必须使用ID，不能使用名称,默认为空-->
                <config.namespace></config.namespace>
                <!--Nacos服务发现地址-->
                <discovery.server-addr>10.180.80.80:8848</discovery.server-addr>
                <sentinel.server-addr>127.0.0.1:8858</sentinel.server-addr>
                <!--为了便于Docker的构建，减少上下文影响，将所有Docker资源放置在同一个目录中进行构建-->
                <docker.build.directory>../../documents/docker/context/target</docker.build.directory>
            </properties>
        </profile>
        <!-- 生产 -->
        <profile>
            <id>production</id>
            <properties>
                <!--当前环境,生产环境为空-->
                <profile.name>production</profile.name>
                <database.type>postgresql</database.type>
                <!--Nacos配置中心地址-->
                <config.server-addr>172.17.207.82:8848</config.server-addr>
                <!--Nacos配置中心命名空间,用于支持多环境.这里必须使用ID，不能使用名称,默认为空-->
                <config.namespace></config.namespace>
                <!--Nacos服务发现地址-->
                <discovery.server-addr>172.17.207.82:8848</discovery.server-addr>
                <sentinel.server-addr>127.0.0.1:8858</sentinel.server-addr>
                <!--为了便于Docker的构建，减少上下文影响，将所有Docker资源放置在同一个目录中进行构建-->
                <docker.build.directory>../../documents/docker/context/target</docker.build.directory>
            </properties>
        </profile>
    </profiles>
</project>