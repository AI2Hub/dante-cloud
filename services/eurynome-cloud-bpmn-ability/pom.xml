<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <artifactId>services</artifactId>
        <groupId>cn.herodotus.eurynome</groupId>
        <version>2.7.0.Beta3</version>
    </parent>

    <artifactId>eurynome-cloud-bpmn-ability</artifactId>
    <version>2.7.0.Beta3</version>

    <name>eurynome-cloud-bpmn-ability</name>
    <description>基于Camunda工作流的服务</description>

    <properties>
        <java.version>1.8</java.version>
    </properties>

    <dependencies>
        <dependency>
            <groupId>${project.groupId}</groupId>
            <artifactId>service-spring-boot-starter</artifactId>
        </dependency>
        <dependency>
            <groupId>${project.groupId}</groupId>
            <artifactId>eurynome-cloud-bpmn-logic</artifactId>
        </dependency>
        <dependency>
            <groupId>org.camunda.bpm.springboot</groupId>
            <artifactId>camunda-bpm-spring-boot-starter-rest</artifactId>
            <exclusions>
                <exclusion>
                    <artifactId>spring-boot-starter-tomcat</artifactId>
                    <groupId>org.springframework.boot</groupId>
                </exclusion>
            </exclusions>
        </dependency>
    </dependencies>

    <!-- 需要以服务方式运行的包，按照以下进行build plugin的配置，以便支持docker打包；-->
    <!-- 而仅作为依赖的工具型代码包，类似于eurynome-cloud-common之类的包，则不需要这样配置，甚至不需要<build>部分内容 -->
    <!-- 如果当前包中包含，例如：字体、证书等资源，需要配置maven-resources-plugin，以防止重要静态资源文件被spring boot重新编码 -->
    <build>
        <plugins>
            <!-- spring boot 默认插件 -->
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>

            <!-- docker 打包插件 -->
            <plugin>
                <groupId>io.fabric8</groupId>
                <artifactId>docker-maven-plugin</artifactId>
            </plugin>

            <!-- 拷贝插件 -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-antrun-plugin</artifactId>
            </plugin>
        </plugins>
    </build>

</project>
